{"remainingRequest":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/babel-loader/lib/index.js!/Users/jonny/Desktop/myProjects/Kalaam-BE/Compiler/main.js","dependencies":[{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/Compiler/main.js","mtime":1652753433898},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/jonny/Desktop/myProjects/Kalaam-BE/Compiler/main.js"],"names":["TypeCheck","ActiveLangugaeKeywords","KalaamKeywords","AdvancedTypeCheck","BuildOperation","RemoveQuotes","RemoveBrackets","earlyCleaning","PushArray","PushCalculation","PushConditionalKeyword","PushCondition","PushForLoop","PushWhileLoop","PushForLoopAruguments","PushExpression","PushNativeOperation","PushKeyword","PushNumber","PushOperator","PushRealTimePrintOperation","PushString","PushVariable","PushVariableValue","PushFunctionData","PushFunctionExecution","PushToArray","PushInput","GetCleanSourcedata","GetcleanedExpression","AddElementToArray","ResetValue","CreateArrayElement","CalculateValues","GetArrayorStringElement","HandleBlocks","SplitElementsArray","SetValues","PushSetArrayIndexValue","PushGetArrayIndexValue","GetConditionValue","AcceptInputandSetValue","AssignorUpdateValues","HandleConditions","getLoopIndexStart","ForLoopSetMetadata","SetArrayIndexValue","AddtoExecutionStack","scanner","handleRealtimePrint","handleVariable","handleOutput","prepareFunction","findtokenPositioninCode","isInterpretableType","Compile","sourcecode","PrintEngine","Tokens","memory","j","iterator","OriginalIterator","StringVar","token","value","NextTokenValue","nextElement","VariableToPrint","forEach","el","name","assigned_variables","includes","kalaam","isNumber","push","isPureEval","outputpure","eval","type","toString","undefined","IndexInput","Value","ArrayElement","output","IndexToChange","element","replace","Split","split","join","find","Print","a","mode","x","isCalculation","message","expression","description","position","LinebylineSourcedata","ExecutionStack","_analyzeToken","cleaned_sourcedata","i","tokens","skipParsing","nextEl","prevEl","prevElement","token_type","handled_variable","h","console","log","e","length","charAt","ExpressiontoPrint","isRealTimePrintMultipleString","BuiltArray","BuildArray","splice","isWhileLoop","foundcondition","BuildCondition","isMultiCalculation","c","op","s","d","cal","count","multiCal","foundString","skip","BuildString","CheckFunctionExpression","passedValues","interpretToken","t","skipInterpretation","mutable_tokens","token_subtype","subtype","functionSourceData","SourceData","Function","ConditionValue","LastConditionValue","Returnvalue","If","getWhileLoopSourcedata","startIndex","StoreResult","ExtratcedVariable","variable","WhileLoopSourcedataIndexStart","WhileLoopSourcedataTokens","isVariable","While","index","getSourcedata","FlagPrimalLoop","SourcedataTokens","IterationStart","IterationEnd","ForLoopSourcedataIndexStart","Cycle","isNestedLoop","FindNestedLoop","NestedLoopindex","indexOf","NestedLooplength","EndIndex","Linenumber","For","forloopindex","functionName","functionToken","functionArguments","arguments","val","FindInUpdatedTokens","functionContextmemory","identifier","context","IntheEndSetValueto","CompleteTokenValueList","onlyUnique","arr","t0","performance","now","sourcedata","mixedimpurity","variables_array","isError","linebylineOutput","error","OperationObjects","_parser","_interpretor","filter","difference","t1","toPrecision","TimeTaken","item"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA;AAEA;AACA,OAAO,KAAKA,SAAZ,MAA2B,2BAA3B;AAEA,SAASC,sBAAT,EAAiCC,cAAjC,QAAuD,uBAAvD,C,CAEA;;AACA,OAAO,KAAKC,iBAAZ,MAAmC,mCAAnC,C,CAEA;;AACA,OAAO,KAAKC,cAAZ,MAAgC,4BAAhC;AAEA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,aAAvC,QAA4D,oBAA5D,C,CAEA;AACA;;AACA,SAASC,SAAT,EAAoBC,eAApB,EAAqCC,sBAArC,EAA6DC,aAA7D,EAA4EC,WAA5E,EAAyFC,aAAzF,EAAwGC,qBAAxG,EAA+HC,cAA/H,EAA+IC,mBAA/I,EAAoKC,WAApK,EAAiLC,UAAjL,EAA6LC,YAA7L,EAA2MC,0BAA3M,EAAuOC,UAAvO,EAAmPC,YAAnP,EAAiQC,iBAAjQ,EAAoRC,gBAApR,EAAsSC,qBAAtS,EAA6TC,WAA7T,EAA0UC,SAA1U,QAA2V,oBAA3V,C,CAEA;;AACA,SACEC,kBADF,EAEEC,oBAFF,EAGEC,iBAHF,EAIEC,UAJF,EAKEC,kBALF,EAMEC,eANF,EAOEC,uBAPF,EAQEC,YARF,EASEC,kBATF,EAUEC,SAVF,EAWEC,sBAXF,EAYEC,sBAZF,EAaEC,iBAbF,EAcEC,sBAdF,EAeEC,oBAfF,EAgBEC,gBAhBF,EAiBEC,iBAjBF,EAkBEC,kBAlBF,EAmBEC,kBAnBF,EAoBEC,mBApBF,QAqBO,oBArBP;AAuBA,OAAOC,OAAP,MAAoB,iBAApB;AAEA,OAAO,uBAAP;AACA,SAASC,mBAAT,EAA8BC,cAA9B,EAA8CC,YAA9C,EAA4DC,eAA5D,QAAmF,qBAAnF;AACA,SAASC,uBAAT,QAAwC,oBAAxC;AACA,SAASC,mBAAT,QAAoC,oBAApC,C,CACA;;AAEA,SAASC,OAAT,CAAiBC,UAAjB,EAA6B;AAC3B,MAAI;AAiGF;AAEA;AACA;AACA;AACA;AACA;AACA;AAxGE,QA0GOC,WA1GP,GA0GF,SAASA,WAAT,CAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,CAArC,EAAwCC,QAAxC,EAAkDC,gBAAlD,EAAoE;AAClE;AAEA;AACA;AAEA,UAAIC,SAAS,GAAG,EAAhB;AAEA,UAAIC,KAAK,GAAGN,MAAM,CAACE,CAAD,CAAN,CAAUK,KAAtB;AAEA,UAAIC,cAAc,GAAGR,MAAM,CAACS,WAAP,CAAmBP,CAAnB,EAAsBK,KAA3C,CAVkE,CAWlE;;AACA,UAAIG,eAAe,GAAG9D,cAAc,CAAC4D,cAAD,CAApC,CAZkE,CAclE;AACA;AAEA;;AAEAP,MAAAA,MAAM,CAACU,OAAP,CAAe,UAACC,EAAD,EAAQ;AACrB;AAEA,YAAIA,EAAE,CAACC,IAAH,KAAYH,eAAhB,EAAiC;AAC/B;AAEA;AAEA,cAAII,kBAAkB,CAACC,QAAnB,CAA4BH,EAA5B,KAAmCE,kBAAkB,CAACC,QAAnB,CAA4BH,EAAE,CAACC,IAA/B,CAAvC,EAA6E;AAC3EpB,YAAAA,YAAY,CAACmB,EAAE,CAACL,KAAJ,EAAWS,MAAX,CAAZ;AACD,WAFD,MAEO;AACL;AAEA,gBAAIC,QAAQ,CAACL,EAAE,CAACL,KAAJ,CAAZ,EAAwB;AACtBd,cAAAA,YAAY,CAACmB,EAAE,CAACL,KAAJ,EAAWS,MAAX,CAAZ;AAEAF,cAAAA,kBAAkB,CAACI,IAAnB,CAAwBN,EAAE,CAACC,IAA3B;AACD,aAJD,CAMA;AANA,iBAOK,IAAIM,UAAU,CAACP,EAAE,CAACL,KAAJ,CAAd,EAA0B;AAC7B;AACA,oBAAIa,UAAU,GAAGC,IAAI,CAACT,EAAE,CAACL,KAAJ,CAArB;AAEAK,gBAAAA,EAAE,CAACL,KAAH,GAAWa,UAAX;AAEA3B,gBAAAA,YAAY,CAACmB,EAAE,CAACL,KAAJ,EAAWS,MAAX,CAAZ;AAEAF,gBAAAA,kBAAkB,CAACI,IAAnB,CAAwBN,EAAE,CAACC,IAA3B;AACD,eATI,CAWL;AAXK,mBAYA,IAAI,CAACM,UAAU,CAACP,EAAE,CAACL,KAAJ,CAAX,IAAyB,CAACU,QAAQ,CAACL,EAAE,CAACL,KAAJ,CAAtC,EAAkD;AACrD,sBAAI,EAAEK,EAAE,CAACC,IAAH,CAAQE,QAAR,CAAiB,GAAjB,KAAyBH,EAAE,CAACC,IAAH,CAAQE,QAAR,CAAiB,GAAjB,CAA3B,CAAJ,EAAuD;AACrD,wBAAIH,EAAE,CAACU,IAAH,KAAY,OAAhB,EAAyB;AACvB,0BAAI,CAACV,EAAE,CAACL,KAAH,CAASQ,QAAT,CAAkB,GAAlB,CAAL,EAA6B;AAC3BH,wBAAAA,EAAE,CAACL,KAAH,GAAW,MAAMK,EAAE,CAACL,KAAH,CAASgB,QAAT,EAAN,GAA4B,GAAvC;AACD;AACF;;AAED9B,oBAAAA,YAAY,CAACmB,EAAE,CAACL,KAAJ,EAAWS,MAAX,CAAZ;AAEAF,oBAAAA,kBAAkB,CAACI,IAAnB,CAAwBN,EAAE,CAACC,IAA3B;AACD;AACF;AACF;AACF;AACF,OA/CD,EAnBkE,CAoElE;;AACA,UAAIb,MAAM,CAACE,CAAC,GAAG,CAAL,CAAN,CAAcoB,IAAd,KAAuB,OAA3B,EAAoC;AAClC;AAEA;AAEA;AAEA,YAAInB,QAAQ,IAAIqB,SAAZ,IAAyBxB,MAAM,CAACE,CAAC,GAAG,CAAL,CAAN,CAAcuB,UAAd,KAA6BrB,gBAA1D,EAA4E;AAC1E,cAAIsB,KAAK,GAAGlB,cAAZ;AAEA,cAAImB,YAAY,GAAGrD,kBAAkB,CAACoD,KAAD,EAAQvB,QAAR,CAArC;AAEA,cAAIyB,MAAM,GAAGpD,uBAAuB,CAACmD,YAAD,EAAe1B,MAAf,CAApC;AAEA2B,UAAAA,MAAM,GAAGjF,YAAY,CAACiF,MAAD,CAArB;AAEAnC,UAAAA,YAAY,CAACmC,MAAD,EAASZ,MAAT,CAAZ;AAEAF,UAAAA,kBAAkB,CAACI,IAAnB,CAAwBlB,MAAM,CAACE,CAAC,GAAG,CAAL,CAA9B;AACD,SAZD,CAcA;AAdA,aAeK,IAAIF,MAAM,CAACE,CAAC,GAAG,CAAL,CAAN,CAAcuB,UAAd,IAA4BrB,gBAAhC,EAAkD;AACrD,gBAAIsB,MAAK,GAAGlB,cAAZ;AAEA,gBAAIqB,aAAa,GAAG7B,MAAM,CAACE,CAAC,GAAG,CAAL,CAAN,CAAcuB,UAAlC;;AAEA,gBAAIE,aAAY,GAAGrD,kBAAkB,CAACoD,MAAD,EAAQG,aAAR,CAArC;;AAEA,gBAAIC,OAAO,GAAGH,aAAY,CAACI,OAAb,CAAqB,GAArB,EAA0B,EAA1B,CAAd;;AAEA,gBAAIC,KAAK,GAAGF,OAAO,CAACG,KAAR,CAAc,GAAd,CAAZ;;AAEA,gBAAID,KAAK,CAAC,CAAD,CAAL,CAASjB,QAAT,CAAkB,GAAlB,KAA0BiB,KAAK,CAAC,CAAD,CAAL,CAASjB,QAAT,CAAkB,GAAlB,CAA9B,EAAsD;AACpD,kBAAIa,QAAM,GAAGrD,eAAe,CAACyD,KAAK,CAAC,CAAD,CAAN,EAAW9B,CAAX,EAAcD,MAAd,CAA5B;;AAEA+B,cAAAA,KAAK,CAAC,CAAD,CAAL,GAAWJ,QAAX;AAEAI,cAAAA,KAAK,GAAGA,KAAK,CAACE,IAAN,CAAW,GAAX,IAAkB,GAA1B;AACAP,cAAAA,aAAY,GAAGK,KAAf;AACD;;AAED,gBAAI1B,MAAK,GAAGL,MAAM,CAACkC,IAAP,CAAY,UAACvB,EAAD;AAAA,qBAAQA,EAAE,CAACC,IAAH,KAAYmB,KAAK,CAAC,CAAD,CAAzB;AAAA,aAAZ,CAAZ;;AAEA,gBAAI1B,MAAK,IAAIkB,SAAT,IAAsBpB,gBAAgB,IAAI4B,KAAK,CAAC,CAAD,CAAnD,EAAwD;AACtDA,cAAAA,KAAK,CAAC,CAAD,CAAL,GAAW1B,MAAK,CAACC,KAAjB;AAEAyB,cAAAA,KAAK,GAAGA,KAAK,CAACE,IAAN,CAAW,GAAX,IAAkB,GAA1B;AACAP,cAAAA,aAAY,GAAGK,KAAf;AACD,aALD,MAKO;AACLL,cAAAA,aAAY,GAAGA,aAAf,CADK,CAEL;AACD;;AAED,gBAAIC,OAAM,GAAGpD,uBAAuB,CAACmD,aAAD,EAAe1B,MAAf,CAApC;;AAEAR,YAAAA,YAAY,CAACmC,OAAD,EAASZ,MAAT,CAAZ;AACD;AACF,OA1DD,CA4DA;AA5DA,WA6DK,IAAIV,KAAK,KAAK/D,sBAAsB,CAAC6F,KAAjC,KAA2CjB,UAAU,CAACvE,cAAc,CAAC4D,cAAD,CAAf,CAAV,IAA8CS,QAAQ,CAACrE,cAAc,CAAC4D,cAAD,CAAf,CAAjG,CAAJ,EAAwI;AAC3IA,UAAAA,cAAc,GAAG5D,cAAc,CAAC4D,cAAD,CAA/B;;AAEA,cAAIS,QAAQ,CAACT,cAAD,CAAR,IAA4BR,MAAM,CAACE,CAAC,GAAG,CAAL,CAAN,CAAcoB,IAAd,IAAsB,aAAtD,EAAqE;AACnE7B,YAAAA,YAAY,CAACe,cAAD,EAAiBQ,MAAjB,CAAZ;AACD,WAFD,MAEO;AACL,gBAAIqB,CAAC,GAAGhB,IAAI,CAACb,cAAD,CAAZ;AAEAf,YAAAA,YAAY,CAAC4C,CAAD,EAAIrB,MAAJ,CAAZ;AACD;AACF,SAVI,CAYL;AAZK,aAaA,IAAIhB,MAAM,CAACE,CAAC,GAAG,CAAL,CAAN,CAAcoC,IAAd,KAAuB,eAAvB,IAA0C,CAAC9B,cAAc,CAACO,QAAf,CAAwB,GAAxB;AAA6B;AAA5E,YAAkH;AACrH,kBAAIa,QAAM,GAAGhF,cAAc,CAAC4D,cAAD,CAA3B;;AAEAoB,cAAAA,QAAM,GAAGjF,YAAY,CAACiF,QAAD,CAArB;AAEAnC,cAAAA,YAAY,CAACmC,QAAM,GAAG,IAAV,EAAgBZ,MAAhB,CAAZ;AACD,aANI,CAQL;AARK,eASA,IAAIhB,MAAM,CAACE,CAAC,GAAG,CAAL,CAAN,CAAcoC,IAAd,KAAuB,eAAvB,IAA0C9B,cAAc,CAACO,QAAf,CAAwB,GAAxB,CAA9C,EAA4E;AAC/E,kBAAIwB,CAAC,GAAG7D,kBAAkB,CAAC8B,cAAD,CAA1B;AAEA+B,cAAAA,CAAC,GAAGA,CAAC,CAACL,IAAF,CAAO,EAAP,EAAWD,KAAX,CAAiB,GAAjB,CAAJ;AAEA5B,cAAAA,SAAS,GAAG1B,SAAS,CAAC4D,CAAD,EAAItC,MAAJ,CAArB;;AAEA,kBAAI2B,QAAM,GAAGvB,SAAS,CAAC6B,IAAV,CAAe,GAAf,CAAb;;AAEAN,cAAAA,QAAM,GAAGhF,cAAc,CAACgF,QAAD,CAAvB;AACAA,cAAAA,QAAM,GAAGjF,YAAY,CAACiF,QAAD,CAArB;AAEAnC,cAAAA,YAAY,CAACmC,QAAM,GAAG,IAAV,EAAgBZ,MAAhB,CAAZ;AACD,aAbI,MAaE,IAAIwB,aAAa,CAAC5F,cAAc,CAAC4D,cAAD,CAAf,CAAb,IAAiDR,MAAM,CAACE,CAAC,GAAG,CAAL,CAAN,CAAcoC,IAAd,IAAsB,eAA3E,EAA4F;AACjG9B,cAAAA,cAAc,GAAG5D,cAAc,CAAC4D,cAAD,CAA/B;;AAEA,kBAAIoB,QAAM,GAAGrD,eAAe,CAACiC,cAAD,EAAiBN,CAAjB,EAAoBD,MAApB,CAA5B;;AAEAR,cAAAA,YAAY,CAACmC,QAAM,GAAG,IAAV,EAAgBZ,MAAhB,CAAZ;AACD;;AAED,UAAIyB,OAAO,GAAG,sCAAsC,GAAtC,GAA4C7F,cAAc,CAAC4D,cAAD,CAA1D,GAA6E,GAA7E,GAAmF,iBAAjG,CA7KkE,CA+KlE;;AAEA,UAAIkC,UAAU,GAAGpC,KAAK,GAAGE,cAAzB;AACA,UAAImC,WAAW,GAAG,wEAAlB;AAEAD,MAAAA,UAAU,GAAGvE,oBAAoB,CAACuE,UAAD,CAAjC;AAEA,UAAIE,QAAQ,GAAGjD,uBAAuB,CAACkD,oBAAD,EAAuBH,UAAvB,EAAmC,IAAnC,CAAtC;;AACA,UAAIE,QAAQ,IAAIpB,SAAhB,EAA2B;AACzBnC,QAAAA,mBAAmB,CAACyD,cAAD,EAAiBvG,sBAAsB,CAAC6F,KAAxC,EAA+CO,WAA/C,EAA4DjC,eAA5D,EAA6E,IAA7E,EAAmF+B,OAAnF,EAA4FG,QAA5F,CAAnB;AACD;AACF,KApSC,EAsSF;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;AAlTE,QAoTOG,aApTP,GAoTF,SAASA,aAAT,CAAuBC,kBAAvB,EAA2CC,CAA3C,EAA8CC,MAA9C,EAAsD;AACpD,UAAIpB,OAAO,GAAGkB,kBAAkB,CAACC,CAAD,CAAhC;AAEAE,MAAAA,WAAW,GAAG,CAAd;AAEA,UAAIC,MAAM,GAAGJ,kBAAkB,CAACvC,WAAnB,CAA+BwC,CAA/B,CAAb;AACA,UAAII,MAAM,GAAGL,kBAAkB,CAACM,WAAnB,CAA+BL,CAA/B,CAAb;AAEA,UAAIM,UAAU,GAAGjE,OAAO,CAAC0D,kBAAD,EAAqBC,CAArB,EAAwBC,MAAxB,CAAxB,CARoD,CASpD;AACA;AAEA;;AACA,cAAQK,UAAR;AACE,aAAK,UAAL;AACE;AAEA;AAEA;AAEA;AAEA,cAAIC,gBAAgB,GAAGhE,cAAc,CAACsC,OAAD,EAAUoB,MAAV,EAAkBF,kBAAlB,EAAsCC,CAAtC,EAAyCG,MAAzC,EAAiDC,MAAjD,CAArC;AACA,cAAII,CAAC,GAAGD,gBAAR;;AACA,cAAIC,CAAC,IAAIjC,SAAT,EAAoB;AAClB,gBAAI;AACFiC,cAAAA,CAAC,CAACnC,IAAF,KAAW,UAAX,GAAwB1D,YAAY,CAAC6F,CAAD,EAAIP,MAAJ,CAApC,GAAkDQ,OAAO,CAACC,GAAR,4BAAgC7B,OAAhC,EAAlD;AACD,aAFD,CAEE,OAAO8B,CAAP,EAAU;AACVF,cAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,6BAAmC9B,OAAnC;AACD;AACF;;AACD;AACF;;AACA,aAAK,QAAL;AACEtE,UAAAA,UAAU,CAACsE,OAAD,EAAUoB,MAAV,CAAV;AACA;AAEF;;AACA,aAAK,cAAL;AACE;AACA;AACA,cAAI;AACF,gBAAIU,CAAC,GAAG9B,OAAR;AACA8B,YAAAA,CAAC,GAAGA,CAAC,CAACC,MAAF,GAAW,CAAX,KAAiBD,CAAC,CAACE,MAAF,CAAS,CAAT,MAAgB,GAAhB,IAAuBF,CAAC,CAACE,MAAF,CAAS,CAAT,MAAgB,GAAxD,IAAgEF,CAAC,GAAGA,CAAC,CAAC7B,OAAF,CAAU,QAAV,EAAoB,EAApB,CAApE,GAAgG6B,CAAC,GAAG,GAAxG;AAEA/F,YAAAA,iBAAiB,CAAC+F,CAAD,EAAIV,MAAJ,CAAjB;AACD,WALD,CAKE,OAAOU,CAAP,EAAU;AACVF,YAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,0CAAgD9B,OAAhD;AACD;;AACD;AAEF;AACA;;AACA,aAAK,OAAL;AACE,cAAI;AACF7D,YAAAA,SAAS,CAAC6D,OAAD,EAAUoB,MAAV,EAAkBF,kBAAlB,EAAsCC,CAAtC,CAAT;AACD,WAFD,CAEE,OAAOW,CAAP,EAAU;AACVF,YAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,mCAAyC9B,OAAzC;AACD;;AACD;AACF;AACA;;AACA,aAAK,UAAL;AACE,cAAI;AACFrE,YAAAA,YAAY,CAACqE,OAAD,EAAUoB,MAAV,CAAZ;AACD,WAFD,CAEE,OAAOU,CAAP,EAAU;AACVF,YAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,sCAA4C9B,OAA5C;AACD;;AACD;AAEF;AAEA;;AACA,aAAK,OAAL;AACE,cAAI;AACFvE,YAAAA,WAAW,CAACuE,OAAD,EAAUoB,MAAV,CAAX;AAEA,gBAAIa,iBAAiB,GAAGX,MAAxB;;AAEA,gBAAI,CAACY,6BAA6B,CAACD,iBAAD,CAAlC,EAAuD;AACrD1G,cAAAA,cAAc,CAAC0G,iBAAD,EAAoBb,MAApB,CAAd;AACD;AACF,WARD,CAQE,OAAOU,CAAP,EAAU;AACVF,YAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,8BAAoC9B,OAApC;AACD;;AACD;AACF;AACA;;AACA,aAAK,UAAL;AACE,cAAI;AACFhE,YAAAA,gBAAgB,CAACgE,OAAD,EAAUoB,MAAV,EAAkBF,kBAAlB,EAAsCC,CAAtC,CAAhB;AACD,WAFD,CAEE,OAAOW,CAAP,EAAU;AACVF,YAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,uCAA6C9B,OAA7C;AACD;;AACD;AAEF;;AAEA,aAAK,OAAL;AACE;AACA;AACA,cAAI;AACF,gBAAI8B,EAAC,GAAG9B,OAAR;AACA8B,YAAAA,EAAC,CAACE,MAAF,CAASF,EAAC,CAACC,MAAF,GAAW,CAApB,MAA2B,GAA3B,GACI/G,SAAS,CAAC8G,EAAD,EAAIV,MAAJ,CADb,GAEI,YAAY;AACV,kBAAIe,UAAU,GAAGC,UAAU,CAACN,EAAD,EAAIX,CAAJ,EAAOD,kBAAP,CAA3B;AAEAlG,cAAAA,SAAS,CAACmH,UAAD,EAAaf,MAAb,CAAT;AACD,aANL;AAOD,WATD,CASE,OAAOU,CAAP,EAAU;AACVF,YAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,oCAA0C9B,OAA1C;AACD;;AAED;AAEF;AACA;;AACA,aAAK,iBAAL;AACE,cAAI;AACFlD,YAAAA,sBAAsB,CAACkD,OAAD,EAAUoB,MAAV,EAAkBF,kBAAlB,EAAsCC,CAAtC,CAAtB;AAEAD,YAAAA,kBAAkB,CAACmB,MAAnB,CAA0BlB,CAAC,GAAG,CAA9B,EAAiC,CAAjC;AACD,WAJD,CAIE,OAAOW,CAAP,EAAU;AACVF,YAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,+CAAqD9B,OAArD;AACD;;AAED;AAEF;AACA;;AACA,aAAK,iBAAL;AACE,cAAI;AACFjD,YAAAA,sBAAsB,CAACiD,OAAD,EAAUoB,MAAV,EAAkBF,kBAAlB,EAAsCC,CAAtC,CAAtB;AACD,WAFD,CAEE,OAAOW,CAAP,EAAU;AACVF,YAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,+CAAqD9B,OAArD;AACD;;AACD;AAEF;AACA;AACA;AACA;;AAEA,aAAK,qBAAL;AACE,cAAI;AACFsC,YAAAA,WAAW,CAACtC,OAAD,CAAX,GAAuB3E,aAAa,CAAC2E,OAAD,EAAUoB,MAAV,CAApC,GAAwDlG,sBAAsB,CAAC8E,OAAD,EAAUoB,MAAV,CAA9E,CADE,CAGF;AACA;;AACA,gBAAImB,cAAc,GAAGC,cAAc,CAACxC,OAAD,EAAUmB,CAAV,EAAaD,kBAAb,CAAnC,CALE,CAOF;;AAEA,gBAAIqB,cAAc,IAAI,EAAtB,EAA0B;AACxBpH,cAAAA,aAAa,CAACoH,cAAD,EAAiBnB,MAAjB,CAAb;AACD;AACF,WAZD,CAYE,OAAOU,CAAP,EAAU;AACVF,YAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,+CAAqD9B,OAArD;AACD;;AAED;AAEF;AACA;;AACA,aAAK,eAAL;AACE,cAAI;AACF9D,YAAAA,WAAW,CAAC8D,OAAD,EAAUoB,MAAV,CAAX;AACD,WAFD,CAEE,OAAOU,CAAP,EAAU;AACVF,YAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,iDAAuD9B,OAAvD;AACD;;AACD;AAEF;AACA;AACA;AACA;;AACA,aAAK,UAAL;AACE,cAAI;AACF5E,YAAAA,WAAW,CAAC4E,OAAD,EAAUoB,MAAV,CAAX;AACA9F,YAAAA,qBAAqB,CAAC0E,OAAD,EAAUkB,kBAAV,EAA8BC,CAA9B,EAAiCC,MAAjC,CAArB;AAEAjD,YAAAA,MAAM,CAACiB,IAAP,CAAY;AACVL,cAAAA,IAAI,EAAEuC,MADI;AAEV7C,cAAAA,KAAK,EAAE,CAFG;AAGVe,cAAAA,IAAI,EAAE;AAHI,aAAZ;AAKD,WATD,CASE,OAAOsC,CAAP,EAAU;AACVF,YAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,2CAAiD9B,OAAjD;AACD;;AACD;AAEF;AACA;;AACA,aAAK,aAAL;AACE;;;;;;;;;;;AAcA;AAEA,cAAI;AAAA,gBAcOyC,kBAdP,GAcF,SAASA,kBAAT,CAA4BC,CAA5B,EAA4C;AAAA,kBAAbC,EAAa,uEAAR,MAAQ;;AAC1C,kBAAID,CAAC,CAACzD,QAAF,CAAW,GAAX,KAAmByD,CAAC,CAACzD,QAAF,CAAW,GAAX,CAAvB,EAAwC;AACtC,oBAAI2D,CAAC,GAAGF,CAAC,CAACvC,KAAF,CAAQ,EAAR,CAAR;AACAyC,gBAAAA,CAAC,CAAC/D,OAAF,CAAU,UAACC,EAAD,EAAQ;AAChB,sBAAI6D,EAAE,CAAC1D,QAAH,CAAYH,EAAZ,CAAJ,EAAqB;AACnB+D,oBAAAA,CAAC,GAAGA,CAAC,GAAG,CAAR;AACD;AACF,iBAJD;;AAMA,oBAAIA,CAAC,GAAG,CAAR,EAAW;AACT,yBAAO,IAAP;AACD,iBAFD,MAEO;AACL,yBAAO,KAAP;AACD;AACF;AACF,aA7BC;;AACF,gBAAI/D,EAAE,GAAGkB,OAAT;AACA,gBAAI8C,GAAG,GAAG,EAAV;AACA,gBAAIC,KAAK,GAAG,CAAZ,CAHE,CAIF;;AACA,gBAAItC,CAAC,GAAGU,CAAR;AACA,gBAAI0B,CAAC,GAAG,CAAR;;AAEA,mBAAOnC,aAAa,CAACQ,kBAAkB,CAACT,CAAD,CAAnB,CAAb,IAAwCS,kBAAkB,CAACT,CAAD,CAAlB,IAAyB,GAAxE,EAA6E;AAC3EqC,cAAAA,GAAG,GAAGA,GAAG,GAAG5B,kBAAkB,CAACT,CAAD,CAA9B;AACAsC,cAAAA,KAAK,IAAI,CAAT;AACAtC,cAAAA,CAAC;AACF;;AAmBD,gBAAIuC,QAAQ,GAAGP,kBAAkB,CAACK,GAAD,CAAjC,CA/BE,CAiCF;;AACAzB,YAAAA,WAAW,GAAG0B,KAAK,GAAG,CAAtB,CAlCE,CAmCF;AAEA;AAEA;AAEA;;AACA,aAACD,GAAG,CAAC7D,QAAJ,CAAa,GAAb,CAAD,IAAsB,CAAC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqBA,QAArB,CAA8BH,EAAE,CAACkD,MAAH,CAAU,CAAV,CAA9B,CAAvB,GAAqE/G,eAAe,CAAC6H,GAAD,EAAM1B,MAAN,EAAcF,kBAAd,EAAkCC,CAAlC,EAAqC6B,QAArC,CAApF,GAAqIpB,OAAO,CAACC,GAAR,oCAAwC/C,EAAxC,EAArI;AACD,WA3CD,CA2CE,OAAOgD,CAAP,EAAU;AACVF,YAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,4CAAkD9B,OAAlD;AACD;;AACD;;AAEF,aAAK,gBAAL;AACE;AAEA;AACA,cAAI;AAAA,uCAC0BvC,mBAAmB,CAACyD,kBAAD,EAAqBC,CAArB,CAD7C;AAAA,gBACI8B,WADJ,wBACIA,WADJ;AAAA,gBACiBC,IADjB,wBACiBA,IADjB;;AAGFtH,YAAAA,0BAA0B,CAACqH,WAAD,EAAc7B,MAAd,CAA1B;AAEAC,YAAAA,WAAW,GAAG6B,IAAd;AACD,WAND,CAME,OAAOpB,CAAP,EAAU;AACVF,YAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,qCAA2C9B,OAA3C;AACD;;AAED;;AAEF,aAAK,QAAL;AACE;AACA,cAAI;AACF,gBAAI4C,CAAC,GAAGO,WAAW,CAACnD,OAAD,EAAUmB,CAAV,EAAaD,kBAAb,CAAnB;AAEA0B,YAAAA,CAAC,GAAGA,CAAC,CAAC3C,OAAF,CAAU,QAAV,EAAoB,EAApB,CAAJ;AAEA,aAAC2C,CAAC,CAAC3D,QAAF,CAAWxE,sBAAsB,CAAC6F,KAAlC,CAAD,GAA4CzE,UAAU,CAAC+G,CAAD,EAAIxB,MAAJ,CAAtD,GAAoEQ,OAAO,CAACC,GAAR,oCAAwCe,CAAC,EAAE5C,OAA3C,GAApE;AACD,WAND,CAME,OAAO8B,CAAP,EAAU;AACVF,YAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,yCAA+C9B,OAA/C;AACD;;AACD;AAEF;AACA;;AAEA;;;;;;AASA;AACA;AACA;AACA;;AACA,aAAK,eAAL;AACE,cAAI;AACF,gBAAIoD,uBAAuB,GAAGpD,OAAO,CAACG,KAAR,CAAc,GAAd,CAA9B;AAEA,gBAAIkD,YAAY,GAAGvI,cAAc,CAACsI,uBAAuB,CAAC,CAAD,CAAxB,CAAjC;AACAC,YAAAA,YAAY,GAAGA,YAAY,CAAClD,KAAb,CAAmB,GAAnB,CAAf;AAEAlE,YAAAA,qBAAqB,CAAC+D,OAAD,EAAUoB,MAAV,EAAkBF,kBAAlB,EAAsCC,CAAtC,EAAyCkC,YAAzC,CAArB;AACD,WAPD,CAOE,OAAOvB,CAAP,EAAU;AACVF,YAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,gDAAsD9B,OAAtD;AACD;;AACD;;AAEF,aAAK,kBAAL;AACE,cAAI;AACFxE,YAAAA,mBAAmB,CAACwE,OAAD,EAAUoB,MAAV,CAAnB;AACD,WAFD,CAEE,OAAOU,CAAP,EAAU;AACVF,YAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,6CAAmD9B,OAAnD;AACD;;AACD;;AAEF,aAAK,YAAL;AACE,cAAI;AACFhF,YAAAA,SAAS,CAACgF,OAAD,EAAUoB,MAAV,CAAT;AACD,WAFD,CAEE,OAAOU,CAAP,EAAU;AACVF,YAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,gCAAsC9B,OAAtC;AACD;;AACD;AA/TJ;AAiUD,KAloBC,EAooBF;;;AApoBE,QAqoBOsD,cAroBP,GAqoBF,SAASA,cAAT,CAAwBC,CAAxB,EAA2BnF,CAA3B,EAA8BD,MAA9B,EAAsC;AACpCqF,MAAAA,kBAAkB,GAAG,CAArB;AACA,UAAIC,cAAc,GAAGF,CAArB;AAEA,UAAI/E,KAAK,GAAGiF,cAAc,CAACrF,CAAD,CAAd,CAAkBK,KAA9B;AAEA,UAAIgD,UAAU,GAAGgC,cAAc,CAACrF,CAAD,CAAd,CAAkBoB,IAAnC;AACA,UAAIkE,aAAa,GAAGD,cAAc,CAACrF,CAAD,CAAd,CAAkBuF,OAAtC;AAEA,UAAInE,IAAI,GAAGhB,KAAK,KAAK/D,sBAAsB,CAAC6F,KAAjC,IAA0CmB,UAAU,KAAK,UAAzD,GAAsEiC,aAAtE,GAAsFjC,UAAjG,CAToC,CAUpC;AAEA;AACA;;AACA,UAAI;AACF,YAAI3D,mBAAmB,CAAC0B,IAAD,CAAvB,EAA+B;AAC7B,kBAAQA,IAAR;AACE,iBAAK,oBAAL;AACE;AACElC,gBAAAA,kBAAkB,CAACmG,cAAD,EAAiBrF,CAAjB,EAAoBA,CAApB,EAAuBD,MAAvB,EAA+BiD,MAA/B,EAAuC9C,gBAAvC,EAAyDD,QAAzD,EAAmE2C,cAAnE,EAAmFD,oBAAnF,CAAlB;AACD;AACD;;AAEF,iBAAK,YAAL;AAAmB;AACjB7D,gBAAAA,oBAAoB,CAACuG,cAAD,EAAiBrF,CAAjB,EAAoBD,MAApB,EAA4BE,QAA5B,EAAsCC,gBAAtC,EAAwDY,MAAxD,EAAgE8B,cAAhE,EAAgFD,oBAAhF,CAApB,CADiB,CAC0G;;AAE3H;AACD;AACD;;AAEA,iBAAK,aAAL;AACE;AACEzE,gBAAAA,iBAAiB,CAACmH,cAAD,EAAiBrF,CAAjB,EAAoBD,MAApB,EAA4B6C,cAA5B,EAA4CD,oBAA5C,CAAjB;AACD;AACD;;AACF,iBAAK,aAAL;AACE;AACE9D,gBAAAA,sBAAsB,CAACwG,cAAD,EAAiBrF,CAAjB,EAAoBD,MAApB,EAA4B6C,cAA5B,EAA4CD,oBAA5C,CAAtB;AACD;AACD;AAEF;;AACA,iBAAK,UAAL;AACE;AACE;AAEA;AACAyC,gBAAAA,kBAAkB,GAAG,CAArB,CAJF,CAKE;;AALF,uCAM+B5F,eAAe,CAAC6F,cAAD,EAAiBrF,CAAjB,CAN9C;AAAA,oBAMQwF,kBANR,oBAMQA,kBANR;;AAQEH,gBAAAA,cAAc,CAACrF,CAAD,CAAd,CAAkByF,UAAlB,GAA+BD,kBAA/B;;AAEA,oBAAIjD,QAAO,0BAASlG,sBAAsB,CAACqJ,QAAhC,8CAAmDtF,KAAnD,8QAAX;;AAEA,oBAAIoC,UAAU,aAAMnG,sBAAsB,CAACqJ,QAA7B,cAAyCtF,KAAzC,CAAd;AACA,oBAAIqC,WAAW,GAAG,sEAAlB;AAEA,oBAAIC,QAAQ,GAAGjD,uBAAuB,CAACkD,oBAAD,EAAuBH,UAAvB,EAAmC,IAAnC,CAAtC;;AACA,oBAAIE,QAAQ,IAAIpB,SAAhB,EAA2B;AACzBnC,kBAAAA,mBAAmB,CAACyD,cAAD,EAAiBvG,sBAAsB,CAACqJ,QAAxC,EAAkDjD,WAAlD,EAA+D4C,cAAc,CAACrF,CAAD,CAAd,CAAkBK,KAAjF,EAAwFmF,kBAAxF,EAA4GjD,QAA5G,EAAqHG,QAArH,CAAnB;AACD;;AACD0C,gBAAAA,kBAAkB,GAAGI,kBAAkB,CAAC7B,MAAxC;AACD;AACD;AACF;;AACA,iBAAK,WAAL;AACE;AACE,oBAAI/B,QAAO,GAAGxB,KAAd;AAEA,oBAAImC,OAAJ,CAHF,CAKE;;AAEA,oBAAIoD,cAAc,GAAG/G,iBAAiB,CAACgD,QAAD,EAAU7B,MAAV,EAAkBC,CAAlB,CAAtC;AAEAc,gBAAAA,MAAM,CAAC8E,kBAAP,CAA0B5E,IAA1B,CAA+B2E,cAA/B,EATF,CAWE;;AAEA,oBAAI,CAACA,cAAL,EAAqB;AACnB;AAEA;AACA;AACA,sBAAIE,WAAW,GAAGtH,YAAY,CAAC8G,cAAD,EAAiBrF,CAAjB,CAA9B,CALmB,CAOnB;;AACAoF,kBAAAA,kBAAkB,GAAGS,WAAW,CAAC7F,CAAZ,GAAgBA,CAArC;AAEAuC,kBAAAA,OAAO,mDAAcX,QAAd,gPAAP;AACD,iBAXD,MAWO;AACLW,kBAAAA,OAAO,kDAAaX,QAAb,4NAAP;AACD;;AAED,oBAAIY,WAAU,GAAGZ,QAAjB;AACA,oBAAIa,YAAW,GAAG,8DAAlB;AAEAD,gBAAAA,WAAU,GAAGvE,oBAAoB,CAACuE,WAAD,CAAjC;;AAEA,oBAAIE,SAAQ,GAAGjD,uBAAuB,CAACkD,oBAAD,EAAuBH,WAAvB,EAAmC,IAAnC,CAAtC;;AACA,oBAAIE,SAAQ,IAAIpB,SAAhB,EAA2B;AACzBnC,kBAAAA,mBAAmB,CAACyD,cAAD,EAAiBvG,sBAAsB,CAACyJ,EAAxC,EAA4CrD,YAA5C,EAAyDb,QAAzD,EAAkE+D,cAAlE,EAAkFpD,OAAlF,EAA2FG,SAA3F,CAAnB;AACD;AACF;AAED;AACF;AAEA;;AACA,iBAAK,OAAL;AACE;AACE7C,gBAAAA,WAAW,CAACwF,cAAD,EAAiBtF,MAAjB,EAAyBC,CAAzB,CAAX,CADF,CAC0C;AACzC;AACD;AAEF;;AACA,iBAAK,gBAAL;AACE;AAAA;AAAA,sBA4BW+F,sBA5BX,GA4BE,SAASA,sBAAT,CAAgCC,UAAhC,EAA4CX,cAA5C,EAA4DY,WAA5D,EAAyE;AACvEA,oBAAAA,WAAW,GAAG1H,YAAY,CAAC8G,cAAD,EAAiBW,UAAjB,EAA6BC,WAA7B,CAA1B;AAEA,2BAAOA,WAAP;AACD,mBAhCH;;AACEb,kBAAAA,kBAAkB,GAAG,CAArB;AACA,sBAAIxD,OAAO,GAAGyD,cAAc,CAACrF,CAAC,GAAG,CAAL,CAAd,CAAsBK,KAApC;AAEA,sBAAI6F,iBAAiB,GAAG,EAAxB;AAEA,sBAAIC,QAAQ,GAAG,EAAf;AACA,sBAAIC,6BAA6B,GAAG,CAApC;AACA,sBAAIC,yBAAyB,GAAG,EAAhC;;AAEA,uBAAK,IAAItD,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGnB,OAAO,CAAC+B,MAA5B,EAAoCZ,EAAC,EAArC,EAAyC;AACvC,wBAAIV,CAAC,GAAGT,OAAO,CAACgC,MAAR,CAAeb,EAAf,CAAR;;AAEA,wBAAIuD,UAAU,CAACjE,CAAD,CAAd,EAAmB;AACjB8D,sBAAAA,QAAQ,GAAGA,QAAQ,GAAG9D,CAAtB;AACD;;AACD,wBAAI,CAACiE,UAAU,CAAC1E,OAAO,CAACgC,MAAR,CAAeb,EAAC,GAAG,CAAnB,CAAD,CAAX,IAAsCuD,UAAU,CAACjE,CAAD,CAApD,EAAyD;AACvD,0BAAIjC,OAAK,GAAGL,MAAM,CAACkC,IAAP,CAAY,UAACvB,EAAD;AAAA,+BAAQA,EAAE,CAACC,IAAH,KAAYwF,QAApB;AAAA,uBAAZ,CAAZ;;AAEAD,sBAAAA,iBAAiB,CAAClF,IAAlB,CAAuB;AACrBmF,wBAAAA,QAAQ,EAAEA,QADW;AAErB9F,wBAAAA,KAAK,EAAED,OAAK,CAACC;AAFQ,uBAAvB;AAKA8F,sBAAAA,QAAQ,GAAG,EAAX;AACD;AACF;;AAQDC,kBAAAA,6BAA6B,GAAGpH,iBAAiB,CAACqG,cAAD,EAAiBrF,CAAjB,EAAoB,GAApB,EAAyBoG,6BAAzB,CAAjD;AAEAC,kBAAAA,yBAAyB,GAAGN,sBAAsB,CAACK,6BAAD,EAAgCf,cAAhC,EAAgDgB,yBAAhD,CAAtB,CAAiGJ,WAA7H;AAEA,sBAAI1D,OAAO,GAAG,UAAUX,OAAV,GAAoB,4CAAlC;AAEA,sBAAIa,WAAW,GAAG,yEAAlB;AAEA,sBAAID,UAAU,GAAGvE,oBAAoB,CAAC2D,OAAD,CAArC;AAEA,sBAAIc,QAAQ,GAAGjD,uBAAuB,CAACkD,oBAAD,EAAuBH,UAAvB,EAAmC,IAAnC,CAAtC;;AACA,sBAAIE,QAAQ,IAAIpB,SAAhB,EAA2B;AACzBnC,oBAAAA,mBAAmB,CAACyD,cAAD,EAAiBvG,sBAAsB,CAACkK,KAAxC,EAA+C9D,WAA/C,EAA4Db,OAA5D,EAAqEyE,yBAArE,EAAgG9D,OAAhG,EAAyGG,QAAzG,CAAnB;AACD,mBA/CH,CAiDE;;;AAEA,yBAAO9D,iBAAiB,CAACgD,OAAD,EAAU7B,MAAV,EAAkBC,CAAC,GAAG,CAAtB,CAAxB,EAAkD;AAChD,yBAAK,IAAI+C,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGsD,yBAAyB,CAAC1C,MAA9C,EAAsDZ,GAAC,EAAvD,EAA2D;AACzD;AAEA,0BAAIsD,yBAAyB,CAACtD,GAAD,CAAzB,CAA6B1C,KAA7B,KAAuC,GAA3C,EAAgD;AAC9CvB,wBAAAA,oBAAoB,CAACuH,yBAAD,EAA4BtD,GAA5B,EAA+BhD,MAA/B,EAAuC,EAAvC,EAA2C,EAA3C,EAA+C,EAA/C,EAAmD6C,cAAnD,EAAmED,oBAAnE,CAApB;AACD,uBAFD,MAEO,IAAI0D,yBAAyB,CAACtD,GAAD,CAAzB,CAA6B3B,IAA7B,KAAsC,aAA1C,EAAyD;AAC9DvC,wBAAAA,sBAAsB,CAACwH,yBAAD,EAA4BtD,GAA5B,EAA+BhD,MAA/B,EAAuC6C,cAAvC,CAAtB;AACD,uBAFM,CAIP;AAJO,2BAKF,IAAIyD,yBAAyB,CAACtD,GAAD,CAAzB,CAA6B3B,IAA7B,KAAsC,WAA1C,EAAuD;AAC1D;AAEA,8BAAIoF,KAAK,GAAGzH,gBAAgB,CAACsH,yBAAD,EAA4BtD,GAA5B,EAA+BhD,MAA/B,CAA5B;;AAEA,8BAAIyG,KAAK,IAAIlF,SAAb,EAAwB;AACtByB,4BAAAA,GAAC,GAAGyD,KAAJ;AACD,2BAFD,MAEO;AACLzD,4BAAAA,GAAC,GAAGA,GAAJ;AACD;AACF,yBAVI,CAYL;AAZK,6BAaA,IAAIsD,yBAAyB,CAACtD,GAAD,CAAzB,CAA6B1C,KAA7B,KAAuChE,sBAAsB,CAAC6F,KAAlE,EAAyE;AAC5ErC,4BAAAA,WAAW,CAACwG,yBAAD,EAA4BtG,MAA5B,EAAoCgD,GAApC,EAAuCH,cAAvC,CAAX,CAD4E,CACT;AACpE,2BAFI,CAIL;AAJK,+BAKA,IAAIyD,yBAAyB,CAACtD,GAAD,CAAzB,CAA6B3B,IAA7B,KAAsC,oBAA1C,EAAgE;AACnElC,8BAAAA,kBAAkB,CAACmH,yBAAD,EAA4BtD,GAA5B,EAA+B/C,CAA/B,EAAkCD,MAAlC,EAA0CiD,MAA1C,EAAkD9C,gBAAlD,EAAoED,QAApE,EAA8E2C,cAA9E,EAA8FD,oBAA9F,CAAlB;AACD;AACF;AACF;;AACDyC,kBAAAA,kBAAkB,GAAGiB,yBAAyB,CAAC1C,MAA/C,CArFF,CAuFE;AAEA;AAzFF;AA0FC;AACD;;AAEF,iBAAK,cAAL;AACE;AAAA,oBAOW8C,aAPX,GAOE,SAASA,aAAT,CAAuBT,UAAvB,EAAmCX,cAAnC,EAAmDY,WAAnD,EAAgE;AAC9D,sBAAIJ,WAAW,GAAGtH,YAAY,CAAC8G,cAAD,EAAiBW,UAAjB,EAA6BC,WAA7B,CAA9B;AACAA,kBAAAA,WAAW,GAAGJ,WAAW,CAACI,WAA1B;AAEA,yBAAOA,WAAP;AACD,iBAZH;;AACE,oBAAIS,cAAc,GAAG,CAArB,CADF,CAC0B;;AAExB,oBAAIC,gBAAgB,GAAG,EAAvB;;AAHF,0CAKkH1H,kBAAkB,CAACoG,cAAD,EAAiBrF,CAAjB,EAAoBD,MAApB,CALpI;AAAA,oBAKQG,gBALR,uBAKQA,gBALR;AAAA,oBAK0B0G,cAL1B,uBAK0BA,cAL1B;AAAA,oBAK0CC,YAL1C,uBAK0CA,YAL1C;AAAA,oBAKwD5G,QALxD,uBAKwDA,QALxD;AAAA,oBAKkE2B,OALlE,uBAKkEA,OALlE;AAAA,oBAK2EkF,2BAL3E,uBAK2EA,2BAL3E;AAAA,oBAKwGC,KALxG,uBAKwGA,KALxG;;AAcED,gBAAAA,2BAA2B,GAAG9H,iBAAiB,CAACqG,cAAD,EAAiBrF,CAAjB,EAAoB,GAApB,EAAyB8G,2BAAzB,CAA/C;AAEAH,gBAAAA,gBAAgB,GAAGF,aAAa,CAACK,2BAAD,EAA8BzB,cAA9B,EAA8CsB,gBAA9C,CAAhC;AAEAA,gBAAAA,gBAAgB,CAAClG,OAAjB,CAAyB,UAACC,EAAD,EAAQ;AAC/BA,kBAAAA,EAAE,CAACsG,YAAH,GAAkB,KAAlB;AACD,iBAFD,EAlBF,CAsBE;;AACA,oBAAIC,cAAc,GAAGN,gBAAgB,CAAC1E,IAAjB,CAAsB,UAACvB,EAAD;AAAA,yBAAQA,EAAE,CAACU,IAAH,KAAY,cAApB;AAAA,iBAAtB,CAArB;;AAEA,oBAAI6F,cAAc,IAAI3F,SAAtB,EAAiC;AAC/B,sBAAI4F,eAAe,GAAGP,gBAAgB,CAACQ,OAAjB,CAAyBF,cAAzB,IAA2C,CAAjE;AACA,sBAAIG,gBAAgB,GAAGT,gBAAgB,CAACO,eAAD,CAAhB,CAAkCG,QAAlC,GAA6CV,gBAAgB,CAACO,eAAD,CAAhB,CAAkClB,UAA/E,GAA4F,CAAnH,CAF+B,CAI/B;;AAEA,uBAAK,IAAI3D,CAAC,GAAG6E,eAAb,EAA8B7E,CAAC,GAAG6E,eAAe,GAAGE,gBAApD,EAAsE/E,CAAC,EAAvE,EAA2E;AACzEsE,oBAAAA,gBAAgB,CAACtE,CAAD,CAAhB,CAAoB2E,YAApB,GAAmC,IAAnC;AACD;AACF;;AAED,oBAAIpF,OAAO,CAACf,QAAR,CAAiB,GAAjB,KAAyBe,OAAO,CAACf,QAAR,CAAiB,GAAjB,CAA7B,EAAoD;AAClD6F,kBAAAA,cAAc,GAAG,CAAjB;AACD,iBAtCH,CAwCE;AACA;;;AAEA,oBAAInE,SAAO,GAAG,mCAAmCqE,cAAnC,GAAoD,MAApD,GAA6DC,YAA7D,GAA4E,YAA5E,GAA2F1F,IAAI,CAAC0F,YAAY,GAAGD,cAAf,GAAgC,CAAjC,CAA/F,GAAqI,4BAArI,GAAoK,IAApK,GAA2K,mBAA3K,GAAiM,GAAjM,GAAuM3G,QAAvM,GAAkN,GAAlN,GAAwN,kBAAxN,GAA6O2G,cAA7O,GAA8P,MAA9P,GAAuQC,YAAvQ,GAAsR,mCAApS,CA3CF,CA6CE;;;AACA,oBAAIrE,YAAU,GAAG,YAAYvC,QAAZ,GAAuB,MAAvB,GAAgCoF,cAAc,CAACrF,CAAC,GAAG,CAAL,CAAd,CAAsBK,KAAtD,GAA8D,KAA/E;;AACA,oBAAIoC,aAAW,GAAG,gCAAlB;AACA,oBAAI6E,UAAU,GAAG3E,oBAAoB,CAACwE,OAArB,CAA6B3E,YAA7B,CAAjB;AACA8E,gBAAAA,UAAU,IAAI,CAAd;AAEAnI,gBAAAA,mBAAmB,CAACyD,cAAD,EAAiBvG,sBAAsB,CAACkL,GAAxC,EAA6C9E,aAA7C,EAA0DkE,gBAA1D,EAA4E,EAA5E,EAAgFpE,SAAhF,EAAyF+E,UAAzF,CAAnB;;AAEA,qBAAKrH,QAAQ,GAAG2G,cAAhB,EAAgC3G,QAAQ,IAAI8G,KAA5C,EAAmD9G,QAAQ,EAA3D,EAA+D;AAC7D,sBAAIuH,YAAY,GAAGzH,MAAM,CAACkC,IAAP,CAAY,UAACvB,EAAD;AAAA,2BAAQA,EAAE,CAACC,IAAH,KAAYT,gBAApB;AAAA,mBAAZ,CAAnB;AAEAsH,kBAAAA,YAAY,CAACnH,KAAb,GAAqBJ,QAArB,CAH6D,CAK7D;;AACA,sBAAIyG,cAAc,KAAK,CAAvB,EAA0B,CACxB;AACD;;AAED,uBAAK,IAAI3D,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG4D,gBAAgB,CAAChD,MAArC,EAA6CZ,GAAC,EAA9C,EAAkD;AAChD;AAEA;AACAqC,oBAAAA,kBAAkB,GAAG,CAArB;;AACA,wBAAI;AACFF,sBAAAA,cAAc,CAACyB,gBAAD,EAAmB5D,GAAnB,EAAsBhD,MAAtB,CAAd;AACD,qBAFD,CAEE,OAAO2D,CAAP,EAAU;AACVF,sBAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,2CAAiDiD,gBAAgB,CAAC5D,GAAD,CAAjE;AACD;;AACD,wBAAIqC,kBAAkB,IAAI,CAA1B,EAA6B;AAC3BrC,sBAAAA,GAAC,GAAGA,GAAC,GAAGqC,kBAAR;AACD;AACF;AACF;;AAEDA,gBAAAA,kBAAkB,GAAGA,kBAAkB,GAAGuB,gBAAgB,CAAChD,MAA3D;AACD;AAED;AACF;;AACA,iBAAK,mBAAL;AAA0B;AACxB;AAEA;AAEA,oBAAI6B,mBAAkB,GAAG,EAAzB;AACA,oBAAIiC,YAAY,GAAGrH,KAAnB;AAEA,oBAAI6E,YAAY,GAAGI,cAAc,CAACrF,CAAD,CAAd,CAAkBiF,YAArC;AAEA,oBAAIyC,aAAa,GAAGrC,cAAc,CAACpD,IAAf,CAAoB,UAACvB,EAAD;AAAA,yBAAQA,EAAE,CAACL,KAAH,KAAaoH,YAArB;AAAA,iBAApB,CAApB;AAEA,oBAAIE,iBAAiB,GAAGD,aAAa,CAACE,SAAtC;AAEApC,gBAAAA,mBAAkB,GAAGkC,aAAa,CAACjC,UAAnC,CAdwB,CAgBxB;AAEA;AAEA;AAEA;AAEA;;AAEAkC,gBAAAA,iBAAiB,CAAClH,OAAlB,CAA0B,UAACC,EAAD,EAAK8F,KAAL,EAAe;AACvC,sBAAIqB,GAAG,GAAG5C,YAAY,CAACuB,KAAD,CAAtB;AAEAqB,kBAAAA,GAAG,GAAGA,GAAG,CAAChG,OAAJ,CAAY,IAAZ,EAAkB,EAAlB,CAAN;AACAgG,kBAAAA,GAAG,GAAGA,GAAG,CAAChG,OAAJ,CAAY,IAAZ,EAAkB,EAAlB,CAAN;AAEAoD,kBAAAA,YAAY,CAACuB,KAAD,CAAZ,GAAsBqB,GAAtB,CANuC,CAQvC;;AAEA,sBAAIC,mBAAmB,GAAG/H,MAAM,CAACkC,IAAP,CAAY,UAACvB,EAAD;AAAA,2BAAQA,EAAE,CAACC,IAAH,KAAYkH,GAApB;AAAA,mBAAZ,CAA1B,CAVuC,CAYvC;;AACA,sBAAIC,mBAAmB,KAAKxG,SAA5B,EAAuC;AACrCyG,oBAAAA,qBAAqB,CAAC/G,IAAtB,CAA2B;AACzBL,sBAAAA,IAAI,EAAED,EADmB;AAGzBL,sBAAAA,KAAK,EAAEwH,GAHkB;AAKzBG,sBAAAA,UAAU,EAAEhI,CAAC,GAAGwG,KALS;AAMzBpF,sBAAAA,IAAI,EAAE,OANmB;AAOzB6G,sBAAAA,OAAO,EAAE;AAPgB,qBAA3B;AASD,mBAVD,CAYA;AAZA,uBAaK,IAAIvH,EAAE,IAAIoH,mBAAmB,CAACnH,IAA1B,IAAkCmH,mBAAmB,IAAIxG,SAA7D,EAAwE;AAC3EyG,sBAAAA,qBAAqB,CAAC/G,IAAtB,CAA2B;AACzBL,wBAAAA,IAAI,EAAED,EADmB;AAGzBL,wBAAAA,KAAK,EAAEyH,mBAAmB,CAACzH,KAHF;AAKzB2H,wBAAAA,UAAU,EAAEhI,CAAC,GAAGwG,KALS;AAMzBpF,wBAAAA,IAAI,EAAE0G,mBAAmB,CAAC1G,IAND;AAOzB6G,wBAAAA,OAAO,EAAE,0BAPgB;AAQzBC,wBAAAA,kBAAkB,EAAEL;AARK,uBAA3B;AAUD,qBAXI,MAWE;AACLE,sBAAAA,qBAAqB,CAAC/G,IAAtB,CAA2B;AACzBL,wBAAAA,IAAI,EAAED,EADmB;AAGzBL,wBAAAA,KAAK,EAAEwH,GAHkB;AAKzBG,wBAAAA,UAAU,EAAEhI,CAAC,GAAGwG,KALS;AAMzBpF,wBAAAA,IAAI,EAAE0G,mBAAmB,CAAC1G,IAND;AAOzB6G,wBAAAA,OAAO,EAAE,0BAPgB;AAQzBC,wBAAAA,kBAAkB,EAAEL;AARK,uBAA3B;AAUD;AACF,iBAjDD,EA1BwB,CA6ExB;;AAEA,oBAAIM,sBAAsB,gCAAOpI,MAAP,GAAkBgI,qBAAlB,CAA1B;;AAEA,oBAAIxF,SAAO,GAAG,cAAc,GAAd,GAAoBkF,YAApB,GAAmC,GAAnC,GAAyC,4CAAzC,GAAwF,MAAxF,GAAiG,qCAAjG,GAAyIA,YAAzI,GAAwJ,wBAAxJ,GAAmLA,YAAnL,GAAkM,kCAAhN;;AAEA,oBAAIjF,YAAU,GAAGiF,YAAY,GAAG,GAAhC;;AAEA,oBAAIhF,aAAW,GAAG,sEAAlB;;AAEA,oBAAIC,UAAQ,GAAGjD,uBAAuB,CAACkD,oBAAD,EAAuBH,YAAvB,EAAmC,KAAnC,CAAtC;;AAEA,oBAAIE,UAAQ,IAAIpB,SAAhB,EAA2B;AACzBnC,kBAAAA,mBAAmB,CAACyD,cAAD,EAAiBvG,sBAAsB,CAACqJ,QAAxC,EAAkDjD,aAAlD,EAA+DgF,YAA/D,EAA6EjC,mBAA7E,EAAiGjD,SAAjG,EAA0GG,UAA1G,CAAnB;AACD,iBA3FuB,CA6FxB;AACA;AACA;;;AACA,qBAAK,IAAIK,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGyC,mBAAkB,CAAC7B,MAAvC,EAA+CZ,GAAC,EAAhD,EAAoD;AAClDqC,kBAAAA,kBAAkB,GAAG,CAArB;;AACA,sBAAI;AACFF,oBAAAA,cAAc,CAACM,mBAAD,EAAqBzC,GAArB,EAAwBoF,sBAAxB,CAAd;AACD,mBAFD,CAEE,OAAOzE,CAAP,EAAU;AACVF,oBAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,qDAA2D+D,YAA3D;AACD;;AACD,sBAAIrC,kBAAkB,IAAI,CAA1B,EAA6B;AAC3BrC,oBAAAA,GAAC,GAAGA,GAAC,GAAGqC,kBAAR;AACD;AACF;;AACD;AACD;AApYH;AAsYD;AACF,OAzYD,CAyYE,OAAO1B,CAAP,EAAU;AACVF,QAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ,wCAA8C2B,cAAc,CAACrF,CAAD,CAA5D;AACD;AACD;;;;;;;;;AAUD,KAziCC,EA2iCF;AAEA;AACA;;;AAgDA;AAEA;AAhmCE,QAkmCOoI,UAlmCP,GAkmCF,SAASA,UAAT,CAAoB/H,KAApB,EAA2BmG,KAA3B,EAAkC6B,GAAlC,EAAuC;AACrC,aAAOA,GAAG,CAAClB,OAAJ,CAAY9G,KAAZ,MAAuBmG,KAA9B;AACD,KApmCC;;AACF;AACA,QAAI8B,EAAE,GAAGC,WAAW,CAACC,GAAZ,EAAT,CAFE,CAE0B;AAE5B;;AACA,QAAMC,UAAU,GAAG7I,UAAnB;AAEA,QAAI+C,oBAAoB,GAAG8F,UAAU,CAAC5G,OAAX,CAAmB,iBAAnB,EAAsC,YAAtC,EAAoDE,KAApD,CAA0D,YAA1D,CAA3B,CAPE,CASF;;AACA,QAAIe,kBAAkB,GAAG,EAAzB;AACA,QAAIF,cAAc,GAAG,EAArB;AACA,QAAIG,CAAC,GAAG,CAAR,CAZE,CAaF;;AACA,QAAIC,MAAM,GAAG,EAAb,CAdE,CAgBF;;AACA,QAAI0F,aAAa,GAAG,EAApB,CAjBE,CAmBF;;AACA,QAAI3I,MAAM,GAAG,EAAb,CApBE,CAsBF;;AACA,QAAIgI,qBAAqB,GAAG,EAA5B;AAEA,QAAIY,eAAe,GAAG,EAAtB,CAzBE,CA2BF;;AACA,QAAI/H,kBAAkB,GAAG,EAAzB,CA5BE,CA8BF;AAEA;AACA;AAEA;AACA;;AAEA,QAAIqC,WAAW,GAAG,CAAlB;AACA,QAAImC,kBAAkB,GAAG,CAAzB;AAEAjH,IAAAA,UAAU;AACV,QAAI2C,MAAM,GAAG,EAAb,CA1CE,CA2CF;;AACAA,IAAAA,MAAM,CAAC8H,OAAP,GAAiB,KAAjB;AAEAhJ,IAAAA,UAAU,GAAGjD,aAAa,CAACiD,UAAD,CAA1B;AAEAkB,IAAAA,MAAM,CAACY,MAAP,GAAgB,EAAhB;AACAZ,IAAAA,MAAM,CAAC8E,kBAAP,GAA4B,EAA5B;AACA9E,IAAAA,MAAM,CAAC8B,cAAP,GAAwB,EAAxB;AAEA9B,IAAAA,MAAM,CAAC+H,gBAAP,GAA0B/H,MAAM,CAACY,MAAP,CAAcK,KAAd,CAAoB,IAApB,CAA1B;AACAjB,IAAAA,MAAM,CAACgI,KAAP,GAAe,EAAf;AACAhI,IAAAA,MAAM,CAACiI,gBAAP,GAA0B,EAA1B,CAtDE,CAwDF;;AAEA,QAAMzC,UAAU,GAAGlK,SAAS,CAACkK,UAAV,EAAnB;AAEA,QAAMvF,QAAQ,GAAG3E,SAAS,CAAC2E,QAAV,EAAjB;AAEA,QAAMmD,WAAW,GAAG9H,SAAS,CAAC8H,WAAV,EAApB;AAEA,QAAMjD,UAAU,GAAG1E,iBAAiB,CAAC0E,UAAlB,EAAnB,CAhEE,CAkEF;AAEA;AACA;AAEA;AAEA;;AAEA,QAAM6C,6BAA6B,GAAGvH,iBAAiB,CAACuH,6BAAlB,EAAtC,CA3EE,CA6EF;;AAEA,QAAMxB,aAAa,GAAG/F,iBAAiB,CAAC+F,aAAlB,EAAtB,CA/EE,CAiFF;AAEA;AAEA;;AAEA,QAAMyC,WAAW,GAAGvI,cAAc,CAACuI,WAAf,EAApB,CAvFE,CAyFF;;AAEA,QAAMf,UAAU,GAAGxH,cAAc,CAACwH,UAAf,EAAnB,CA3FE,CA6FF;;AAEA,QAAMI,cAAc,GAAG5H,cAAc,CAAC4H,cAAf,EAAvB;AAg9BAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCX,kBAAnC;AAEAU,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBT,MAAvB;AAEAF,IAAAA,kBAAkB,GAAG9E,kBAAkB,CAACyK,UAAD,EAAa3F,kBAAb,EAAiC4F,aAAjC,CAAvC,CAnjCE,CAqjCF;AAEA;;AAEA,KAAC,SAASM,OAAT,GAAmB;AAClB,WAAKjG,CAAL,EAAQA,CAAC,GAAGD,kBAAkB,CAACa,MAA/B,EAAuCZ,CAAC,EAAxC,EAA4C;AAC1CF,QAAAA,aAAa,CAACC,kBAAD,EAAqBC,CAArB,EAAwBC,MAAxB,CAAb,CAD0C,CAG1C;;;AACA,YAAIC,WAAW,IAAI,CAAnB,EAAsB;AACpBF,UAAAA,CAAC,GAAGA,CAAC,GAAGE,WAAR;AACD;AACF;AACF,KATD,IAzjCE,CAokCF;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;;;AACA,KAAC,SAASgG,YAAT,GAAwB;AACvB,WAAK,IAAI5G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGW,MAAM,CAACW,MAA3B,EAAmCtB,CAAC,EAApC,EAAwC;AACtC;AACA6C,QAAAA,cAAc,CAAClC,MAAD,EAASX,CAAT,EAAYtC,MAAZ,CAAd;;AACA,YAAIqF,kBAAkB,IAAI,CAA1B,EAA6B;AAC3B/C,UAAAA,CAAC,GAAGA,CAAC,GAAG+C,kBAAR;AACD;AACF;AACF,KARD;;AAkBA,QAAIxE,kBAAkB,GAAGA,kBAAkB,CAACsI,MAAnB,CAA0Bd,UAA1B,CAAzB;AAEA,QAAIe,UAAU,GAAGR,eAAe,CAACO,MAAhB,CAAuB,UAAC7G,CAAD;AAAA,aAAO,CAACzB,kBAAkB,CAACC,QAAnB,CAA4BwB,CAA5B,CAAR;AAAA,KAAvB,CAAjB;;AAEA,QAAI8G,UAAU,CAACxF,MAAX,GAAoB,CAAxB,EAA2B;AACzBwF,MAAAA,UAAU,CAAC1I,OAAX,CAAmB,UAACC,EAAD,EAAQ;AACzBI,QAAAA,MAAM,CAACgI,KAAP,CAAa9H,IAAb,oBAA8BN,EAA9B;AACD,OAFD;AAGD;;AAEDI,IAAAA,MAAM,CAAC+H,gBAAP,GAA0B/H,MAAM,CAACgI,KAAP,CAAanF,MAAb,GAAsB,CAAtB,GAA0B7C,MAAM,CAACgI,KAAjC,GAAyChI,MAAM,CAACY,MAAP,CAAcK,KAAd,CAAoB,IAApB,CAAnE,CAhnCE,CAknCF;;AACA,QAAIqH,EAAE,GAAGb,WAAW,CAACC,GAAZ,EAAT,CAnnCE,CAmnC0B;;AAE5B,QAAI1H,MAAM,CAACgI,KAAP,CAAanF,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,UAAIa,CAAC,GAAG,CAAC4E,EAAE,GAAGd,EAAN,EAAUe,WAAV,CAAsB,CAAtB,CAAR;AACAvI,MAAAA,MAAM,CAACwI,SAAP,0CAAoC9E,CAApC;AACD,KAHD,MAGO;AACL1D,MAAAA,MAAM,CAAC8H,OAAP,GAAiB,IAAjB;AAEA9H,MAAAA,MAAM,CAACwI,SAAP,GAAmB,oEAAnB;AACD,KA5nCC,CA8nCF;;;AAEAxI,IAAAA,MAAM,CAAC+H,gBAAP,GAA0B/H,MAAM,CAAC+H,gBAAP,CAAwBK,MAAxB,CAA+B,UAAUK,IAAV,EAAgB;AACvE,aAAOA,IAAI,KAAK,EAAhB;AACD,KAFyB,CAA1B;AAIAzI,IAAAA,MAAM,CAAC8B,cAAP,GAAwBA,cAAxB;AACA,WAAO9B,MAAP;AACD,GAtoCD,CAsoCE,OAAO4C,CAAP,EAAU;AACVF,IAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ;AACD;AACF;;AAED,SAAS/D,OAAT,EAAkBrD,cAAlB","sourcesContent":["/*!\n * Kalaam v1.0.0\n * (C) 2020-21 Swanand Kadam\n * Released under the MIT License.\n */\n\n//SECTION - Importing function modules\n\n//To check variable types: Number, String, Array etc.\nimport * as TypeCheck from '../TypeCheck/TypeChecking';\n\nimport { ActiveLangugaeKeywords, KalaamKeywords } from '../Compiler/constants';\n\n//To check other operations like MultiString, Arithmetic Operation etc.\nimport * as AdvancedTypeCheck from '../TypeCheck/AdvancedTypeChecking';\n\n//To format user input into a proper String, Array or Condition.\nimport * as BuildOperation from '../Scripts/BuildOperations';\n\nimport { RemoveQuotes, RemoveBrackets, earlyCleaning } from '../Scripts/Helpers';\n\n//Functions imported to push a particular data to our Tokens array.\n//Tokens array is basically a clean, formatted and a word by word version of raw code provided by user\nimport { PushArray, PushCalculation, PushConditionalKeyword, PushCondition, PushForLoop, PushWhileLoop, PushForLoopAruguments, PushExpression, PushNativeOperation, PushKeyword, PushNumber, PushOperator, PushRealTimePrintOperation, PushString, PushVariable, PushVariableValue, PushFunctionData, PushFunctionExecution, PushToArray, PushInput } from '../PushTokens/main';\n\n//This are other helper functions that we need for a particular task. All of this functions will be explained indepth as we see them in codebase.\nimport {\n  GetCleanSourcedata,\n  GetcleanedExpression,\n  AddElementToArray,\n  ResetValue,\n  CreateArrayElement,\n  CalculateValues,\n  GetArrayorStringElement,\n  HandleBlocks,\n  SplitElementsArray,\n  SetValues,\n  PushSetArrayIndexValue,\n  PushGetArrayIndexValue,\n  GetConditionValue,\n  AcceptInputandSetValue,\n  AssignorUpdateValues,\n  HandleConditions,\n  getLoopIndexStart,\n  ForLoopSetMetadata,\n  SetArrayIndexValue,\n  AddtoExecutionStack,\n} from '../Scripts/main.js';\n\nimport scanner from '../scanner/main';\n\nimport '../HelperLibrary/main';\nimport { handleRealtimePrint, handleVariable, handleOutput, prepareFunction } from '../Scripts/Handlers';\nimport { findtokenPositioninCode } from '../Scripts/finders';\nimport { isInterpretableType } from '../Scripts/testers';\n//We will be importing this whole function to practise.vue and it will be executed when user clicks on 'RUN'\n\nfunction Compile(sourcecode) {\n  try {\n    //t0 along with t1 takes record of Time taken to run the code. t1-t0 gives us the exact time taken.\n    var t0 = performance.now(); // eslint-disable-line\n\n    //Sourcedata is the raw code provided by user\n    const sourcedata = sourcecode;\n\n    var LinebylineSourcedata = sourcedata.replace(/(?:\\r\\n|\\r|\\n)/g, 'breakpoint').split('breakpoint');\n\n    //This is where formatted and cleaned sourcedata will go.\n    var cleaned_sourcedata = [];\n    var ExecutionStack = [];\n    var i = 0;\n    //This is where tokens will be pushed depending upon their types like Variable, function, loops etc.\n    var tokens = [];\n\n    //Experimental\n    var mixedimpurity = [];\n\n    //The variables with their calculated values are pushed here. If c=a+b, memory is where you will find the calculated value\n    var memory = [];\n\n    //Variable-value pairs similar to memory but limits itself to a user created function.\n    var functionContextmemory = [];\n\n    var variables_array = [];\n\n    //Pushing the variables that are assigned to filter out defined and undefined variables. Useful in error handling\n    var assigned_variables = [];\n\n    //TO REMOVE DUPLICATE VARIABLES,\n\n    // var variableArray = [];\n    //A temporary instance of a global variable. Used because of scoping issue, there are better soultions and we will do that.\n\n    //emptying accumulated value\n    //See AssignorUpdateValues function for more\n\n    var skipParsing = 0;\n    var skipInterpretation = 0;\n\n    ResetValue();\n    var kalaam = {};\n    //If an error is encountered we set the value to true and push the error to errors array.\n    kalaam.isError = false;\n\n    sourcecode = earlyCleaning(sourcecode);\n\n    kalaam.output = '';\n    kalaam.LastConditionValue = [];\n    kalaam.ExecutionStack = [];\n\n    kalaam.linebylineOutput = kalaam.output.split('\\n');\n    kalaam.error = [];\n    kalaam.OperationObjects = [];\n\n    //SECTION - Checking for type of characters. TypeCheck is an object which consists all self functions. Check Line 102\n\n    const isVariable = TypeCheck.isVariable();\n\n    const isNumber = TypeCheck.isNumber();\n\n    const isWhileLoop = TypeCheck.isWhileLoop();\n\n    const isPureEval = AdvancedTypeCheck.isPureEval();\n\n    //if _tokensr encounters anything like (\" or (, then that's a realtime print.\n\n    //buildstring will be applied now to create a string and push it into tokens. Buildstring is used to combine string tokens like\n    //['hello', 'Kalaam', 'developers', \"!\"] into 'hello kalaam developers!'.\n\n    //It's because cleaned_sourcedata is an array of tokens and each token is an individual word in a program.\n\n    //It's recommended to look at cleaned_sourcedata of every program to understand how it converts plain text into array of individual words.\n\n    const isRealTimePrintMultipleString = AdvancedTypeCheck.isRealTimePrintMultipleString();\n\n    //const isStringandValue = AdvancedTypeCheck.isStringandValue()\n\n    const isCalculation = AdvancedTypeCheck.isCalculation();\n\n    // const isDirectPrintArithmetic = AdvancedTypeCheck.isDirectPrintArithmetic()\n\n    //SECTION - Build Operations\n\n    //To convert ['hello', 'Kalaam', 'developers', \"!\"] into 'hello kalaam developers!'.\n\n    const BuildString = BuildOperation.BuildString();\n\n    //To convert ['[', 'x','y','z',']'] into ['x','y','z']\n\n    const BuildArray = BuildOperation.BuildArray();\n\n    //self function is the first step to handlle operations like अगर (ageone===10 && AverageAge<1000 && agetwo>100 || ageone===10) OR (ageone===10 )\n\n    const BuildCondition = BuildOperation.BuildCondition();\n\n    //This will run for every दिखाए() statement encountered in the program, not just for loops\n\n    //ARGUMENTS TO PrintEngine are:\n    //Tokens- Tokens array\n    //memory- Variable-value pairs of variables\n    //j- Index of a token in Tokens array\n    //global- self or self\n    //iterator and OriginalIterator are used to print values in for and while loops.\n\n    function PrintEngine(Tokens, memory, j, iterator, OriginalIterator) {\n      //To understand what kind of data is necessary to print a value\n\n      //Getting the current token as token and value to be printed as NextTokenValue\n      //e.g. For दिखाए(Name), Name is the NextTokenValue and it is the one which we will have to print\n\n      var StringVar = [];\n\n      var token = Tokens[j].value;\n\n      var NextTokenValue = Tokens.nextElement(j).value;\n      //Removing the brackets, if any.\n      var VariableToPrint = RemoveBrackets(NextTokenValue);\n\n      //SECTION - Outputting the code\n      // finding the variable value in memory. memory is where our Variable-value pairs exists.\n\n      //This loop is only for printing direct values like print(name), print(array)\n\n      memory.forEach((el) => {\n        //If we have a variable-value pair sitting in memory\n\n        if (el.name === VariableToPrint) {\n          //for calculations like x=ageone+agetwo\n\n          //If we have already calculated value in assigned_variables, use that or else move forward\n\n          if (assigned_variables.includes(el) || assigned_variables.includes(el.name)) {\n            handleOutput(el.value, kalaam);\n          } else {\n            //if the value found is a Number\n\n            if (isNumber(el.value)) {\n              handleOutput(el.value, kalaam);\n\n              assigned_variables.push(el.name);\n            }\n\n            //if the value found is operations like age=2020-1996\n            else if (isPureEval(el.value)) {\n              //we are using Javascript's eval function to calculate direct arithmetic operations\n              let outputpure = eval(el.value);\n\n              el.value = outputpure;\n\n              handleOutput(el.value, kalaam);\n\n              assigned_variables.push(el.name);\n            }\n\n            //We will simplify this conditions as we move forward\n            else if (!isPureEval(el.value) && !isNumber(el.value)) {\n              if (!(el.name.includes(']') && el.name.includes('['))) {\n                if (el.type === 'Array') {\n                  if (!el.value.includes('[')) {\n                    el.value = '[' + el.value.toString() + ']';\n                  }\n                }\n\n                handleOutput(el.value, kalaam);\n\n                assigned_variables.push(el.name);\n              }\n            }\n          }\n        }\n      });\n\n      //This is how we print Array in Kalaam\n      if (Tokens[j + 1].type === 'Array') {\n        //To run only if iterator is present\n\n        //This runs on for loop - दिखाए(Array[a]) etc\n\n        //self runs only if for(i) and in the loop, array[i], not on array[x]. For loop Iterator and index should be same, in self case 'i'\n\n        if (iterator != undefined && Tokens[j + 1].IndexInput === OriginalIterator) {\n          let Value = NextTokenValue;\n\n          let ArrayElement = CreateArrayElement(Value, iterator);\n\n          let output = GetArrayorStringElement(ArrayElement, memory);\n\n          output = RemoveQuotes(output);\n\n          handleOutput(output, kalaam);\n\n          assigned_variables.push(Tokens[j + 1]);\n        }\n\n        //This runs to Print(Array[2]) like specific array values\n        else if (Tokens[j + 1].IndexInput != OriginalIterator) {\n          let Value = NextTokenValue;\n\n          let IndexToChange = Tokens[j + 1].IndexInput;\n\n          let ArrayElement = CreateArrayElement(Value, IndexToChange);\n\n          let element = ArrayElement.replace(']', '');\n\n          let Split = element.split('[');\n\n          if (Split[1].includes('-') || Split[1].includes('+')) {\n            let output = CalculateValues(Split[1], j, memory);\n\n            Split[1] = output;\n\n            Split = Split.join('[') + ']';\n            ArrayElement = Split;\n          }\n\n          let token = memory.find((el) => el.name === Split[1]);\n\n          if (token != undefined && OriginalIterator != Split[1]) {\n            Split[1] = token.value;\n\n            Split = Split.join('[') + ']';\n            ArrayElement = Split;\n          } else {\n            ArrayElement = ArrayElement;\n            ////\n          }\n\n          let output = GetArrayorStringElement(ArrayElement, memory);\n\n          handleOutput(output, kalaam);\n        }\n      }\n\n      //printing direct numbers and direct calcultions like print(10), print(10*10)\n      else if (token === ActiveLangugaeKeywords.Print && (isPureEval(RemoveBrackets(NextTokenValue)) || isNumber(RemoveBrackets(NextTokenValue)))) {\n        NextTokenValue = RemoveBrackets(NextTokenValue);\n\n        if (isNumber(NextTokenValue) && Tokens[j + 1].type != 'Calculation') {\n          handleOutput(NextTokenValue, kalaam);\n        } else {\n          let a = eval(NextTokenValue);\n\n          handleOutput(a, kalaam);\n        }\n      }\n\n      //foroperations like print('you live, you learn')\n      else if (Tokens[j + 1].mode === 'RealTimePrint' && !NextTokenValue.includes('+') /*&& !NextTokenValue.includes('=')*/) {\n        let output = RemoveBrackets(NextTokenValue);\n\n        output = RemoveQuotes(output);\n\n        handleOutput(output + '\\n', kalaam);\n      }\n\n      //operations like print(Age + 'is young age') i.e string concatenations\n      else if (Tokens[j + 1].mode === 'RealTimePrint' && NextTokenValue.includes('+')) {\n        let x = SplitElementsArray(NextTokenValue);\n\n        x = x.join('').split('+');\n\n        StringVar = SetValues(x, memory);\n\n        let output = StringVar.join(' ');\n\n        output = RemoveBrackets(output);\n        output = RemoveQuotes(output);\n\n        handleOutput(output + '\\n', kalaam);\n      } else if (isCalculation(RemoveBrackets(NextTokenValue)) && Tokens[j + 1].mode != 'RealTimePrint') {\n        NextTokenValue = RemoveBrackets(NextTokenValue);\n\n        let output = CalculateValues(NextTokenValue, j, memory);\n\n        handleOutput(output + '\\n', kalaam);\n      }\n\n      let message = ' Computer ने आपकी दी गयी वैल्यू, ' + '\"' + RemoveBrackets(NextTokenValue) + '\"' + ' को दिखाया है |';\n\n      //This is the experession whcih is getting evaluated.\n\n      let expression = token + NextTokenValue;\n      let description = 'किसी VALUE को OUTPUT SCREEN पे दिखाने के लिए दिखाए() का उपयोग होता है।';\n\n      expression = GetcleanedExpression(expression);\n\n      let position = findtokenPositioninCode(LinebylineSourcedata, expression, true);\n      if (position != undefined) {\n        AddtoExecutionStack(ExecutionStack, ActiveLangugaeKeywords.Print, description, VariableToPrint, null, message, position);\n      }\n    }\n\n    //END OF Functions and Imported Functions\n\n    //Out of all self function, PrintEngine is very important function. It prints variable values by searching their value in memory.\n\n    //SECTION - Checking each token and adding to tokens array\n\n    //_tokens takes two arguments. The cleaned_sourcedata array and current index of cleaned_sourcedata array\n\n    //_tokens is used to create a tokens array with each token having it's name, value, type and other metadata\n\n    //It performs operations depending upon whether the element is variable, array, function, loop etc.\n\n    //scanning every single element from cleaned_sourcedata array and pushing it to Tokens depending upon the type pf element\n\n    function _analyzeToken(cleaned_sourcedata, i, tokens) {\n      let element = cleaned_sourcedata[i];\n\n      skipParsing = 0;\n\n      let nextEl = cleaned_sourcedata.nextElement(i);\n      let prevEl = cleaned_sourcedata.prevElement(i);\n\n      let token_type = scanner(cleaned_sourcedata, i, tokens);\n      //Push variables to tokens\n      //Format: {type: \"variable\", value: \"ReverseString\"}\n\n      //whenever we need a certain handling, handlers.js is used\n      switch (token_type) {\n        case 'VARIABLE':\n          //Here we seperate Message = 'Hello' into following three tokens :\n\n          //1: {type: \"variable\", value: \"Message\"}\n\n          //2: {type: \"operator\", value: \"=\"}\n\n          //3: {type: \"value\", value: \"Hello\"}\n\n          let handled_variable = handleVariable(element, tokens, cleaned_sourcedata, i, nextEl, prevEl);\n          let h = handled_variable;\n          if (h != undefined) {\n            try {\n              h.type === 'variable' ? PushVariable(h, tokens) : console.log(`error in setting ${element}`);\n            } catch (e) {\n              console.log(e, `error in setting ${element}`);\n            }\n          }\n          break;\n        //Push variables to tokens\n        case 'NUMBER':\n          PushNumber(element, tokens);\n          break;\n\n        //Push EmptyStrings to tokens\n        case 'EMPTY_STRING':\n          //In some cases empty strings will be modified into something like \"'\" or '\"'\n          //We convert it back to \" \"\n          try {\n            let e = element;\n            e = e.length > 1 && (e.charAt(0) === \"'\" || e.charAt(0) === '\"') ? (e = e.replace(/['\"]+/g, '')) : (e = ' ');\n\n            PushVariableValue(e, tokens);\n          } catch (e) {\n            console.log(e, `Error in setting Empty string ${element}`);\n          }\n          break;\n\n        //Push Input to tokens\n        //Format: {type: \"AcceptInput\", value: \" \", AcceptAs: \"Message\"}\n        case 'INPUT':\n          try {\n            PushInput(element, tokens, cleaned_sourcedata, i);\n          } catch (e) {\n            console.log(e, `Error in setting Input ${element}`);\n          }\n          break;\n        //Push operators to tokens. The accepted operators are =,},{\n        //Format: {type: \"operator\", value: \"=\"}\n        case 'OPERATOR':\n          try {\n            PushOperator(element, tokens);\n          } catch (e) {\n            console.log(e, `Error in setting operator ${element}`);\n          }\n          break;\n\n        //Push keyowrds to tokens. The accepted keywords is दिखाए\n\n        //Format: {type: \"keyword\", value: ActiveLangugaeKeywords.Print}\n        case 'PRINT':\n          try {\n            PushKeyword(element, tokens);\n\n            let ExpressiontoPrint = nextEl;\n\n            if (!isRealTimePrintMultipleString(ExpressiontoPrint)) {\n              PushExpression(ExpressiontoPrint, tokens);\n            }\n          } catch (e) {\n            console.log(e, `Error in printing ${element}`);\n          }\n          break;\n        //Push functions to tokens\n        //Format: {type: \"function\", value: \"First\", arguments: Array(2), FunctionInvocationExists: false, FunctionStack: Array(0), …}\n        case 'FUNCTION':\n          try {\n            PushFunctionData(element, tokens, cleaned_sourcedata, i);\n          } catch (e) {\n            console.log(e, `Error in handling function ${element}`);\n          }\n          break;\n\n        // Push array to tokens\n\n        case 'ARRAY':\n          //Format: {type: \"Array\", value: \"[]\"}\n          //if empty array else build the array (To convert '[',1,2,3,4,']'  into [1,2,3,4]\n          try {\n            let e = element;\n            e.charAt(e.length - 1) === ']'\n              ? PushArray(e, tokens)\n              : function () {\n                  let BuiltArray = BuildArray(e, i, cleaned_sourcedata);\n\n                  PushArray(BuiltArray, tokens);\n                };\n          } catch (e) {\n            console.log(e, `Error in handling Array ${element}`);\n          }\n\n          break;\n\n        //For operations like Numbers[a]=a\n        //Format: {type: \"SetArrayIndexValue\", value: \"Fibonacci[a]\", ValueToSet: \"a\"}\n        case 'SET_ARRAY_INDEX':\n          try {\n            PushSetArrayIndexValue(element, tokens, cleaned_sourcedata, i);\n\n            cleaned_sourcedata.splice(i + 1, 1);\n          } catch (e) {\n            console.log(e, `Error in setting array index value ${element}`);\n          }\n\n          break;\n\n        //For operations like a=Numbers[a], reverse of above\n        //Format: {type: \"GetArrayIndexValue\", value: \"Fibonacci[a-2]\"}\n        case 'GET_ARRAY_INDEX':\n          try {\n            PushGetArrayIndexValue(element, tokens, cleaned_sourcedata, i);\n          } catch (e) {\n            console.log(e, `Error in getting array index value ${element}`);\n          }\n          break;\n\n        //Push conditions to tokens. The accepted keywords are अगर, जबतक, अन्यथा\n        // Format: {type: \"conditionalkeyword\", value: \"अगर\"}\n        //Push while loops to tokens\n        //Format: {type: \"WhileLoopStart\", value: \"जबतक\"}, {type: \"condition\", value: \"count<25\"}\n\n        case 'CONDITIONAL_KEYWORD':\n          try {\n            isWhileLoop(element) ? PushWhileLoop(element, tokens) : PushConditionalKeyword(element, tokens);\n\n            //This is how we push conditions encountered in the sourcecode\n            //Format:{type: \"condition\", value: \"a<3\"}\n            let foundcondition = BuildCondition(element, i, cleaned_sourcedata);\n\n            //Push conditions to tokens array\n\n            if (foundcondition != '') {\n              PushCondition(foundcondition, tokens);\n            }\n          } catch (e) {\n            console.log(e, `Error in operating on conditionals ${element}`);\n          }\n\n          break;\n\n        //Finding operations like Numbers.पुश(x)\n        //Format: {type: \"PushToArray\", value: \"Numbers.पुश(x)\"}\n        case 'PUSH_TO_ARRAY':\n          try {\n            PushToArray(element, tokens);\n          } catch (e) {\n            console.log(e, `Error in pushing the values to array ${element}`);\n          }\n          break;\n\n        //Push For loop to tokens\n        // Format:\n        // {type: \"ForLoopStart\", value: \"दुहराओ\"}\n        // {type: \"ForLoopArguments\", iterator: \"a\", value: \"(0,25)\", iterationStart: \"0\", iterationEnd: \"25\"}\n        case 'FOR_LOOP':\n          try {\n            PushForLoop(element, tokens);\n            PushForLoopAruguments(element, cleaned_sourcedata, i, tokens);\n\n            memory.push({\n              name: nextEl,\n              value: 0,\n              type: 'ForLoopIterator',\n            });\n          } catch (e) {\n            console.log(e, `Error in operating on for loop ${element}`);\n          }\n          break;\n\n        //Pushing basic Calculations like 'length-1' to tokens\n        //Format: {type: \"Calculation\", value: \"length-1\"}\n        case 'CALCULATION':\n          /* red zone\n  \n          if (nextEl != undefined) {\n            // this is to perform long calculations like AverageAge=(ageone+agetwo)/2 + (ageone+agetwo)*2\n  \n            while (isCalculation(cleaned_sourcedata[i])) {\n              el = el + cleaned_sourcedata[i];\n  \n              i++;\n            }\n          }\n  \n          console.log(\"el:\", el);\n  */\n          /*error prone*/\n\n          try {\n            let el = element;\n            let cal = '';\n            let count = 0;\n            //   function findCalculation(cleaned_sourcedata, i) {\n            let x = i;\n            let d = 0;\n\n            while (isCalculation(cleaned_sourcedata[x]) || cleaned_sourcedata[x] == '+') {\n              cal = cal + cleaned_sourcedata[x];\n              count += 1;\n              x++;\n            }\n\n            function isMultiCalculation(c, op = '*+/-') {\n              if (c.includes('(') && c.includes(')')) {\n                let s = c.split('');\n                s.forEach((el) => {\n                  if (op.includes(el)) {\n                    d = d + 1;\n                  }\n                });\n\n                if (d > 1) {\n                  return true;\n                } else {\n                  return false;\n                }\n              }\n            }\n\n            let multiCal = isMultiCalculation(cal);\n\n            //  console.log(\"x\", x, i);\n            skipParsing = count - 1;\n            // cal = RemoveBrackets(cal);\n\n            //let c_el = RemoveBrackets(cal);\n\n            //  let cal = findCalculation();\n\n            // to stop prevention of expressions like is\"+ getting added as a calculation\n            !cal.includes('\"') && !['/', '*', \"'\", '\"'].includes(el.charAt(0)) ? PushCalculation(cal, tokens, cleaned_sourcedata, i, multiCal) : console.log(`impure calculation terms ${el}`);\n          } catch (e) {\n            console.log(e, `Error in completing calculation ${element}`);\n          }\n          break;\n\n        case 'REALTIME_PRINT':\n          //finding operations like print(x + 'y'). The RealTimePrint operations\n\n          //Format: {type: \"value\", value: \"('Reversed String-'+ ReverseString)\", mode: \"RealTimePrint\"}\n          try {\n            let { foundString, skip } = handleRealtimePrint(cleaned_sourcedata, i);\n\n            PushRealTimePrintOperation(foundString, tokens);\n\n            skipParsing = skip;\n          } catch (e) {\n            console.log(e, `Error in real time print ${element}`);\n          }\n\n          break;\n\n        case 'STRING':\n          //storing only the string values to tokens ( not the strings in print statements)\n          try {\n            let s = BuildString(element, i, cleaned_sourcedata);\n\n            s = s.replace(/['\"]+/g, '');\n\n            !s.includes(ActiveLangugaeKeywords.Print) ? PushString(s, tokens) : console.log(`error in pushing string ${(s, element)}`);\n          } catch (e) {\n            console.log(e, `error in operating on string ${element}`);\n          }\n          break;\n\n        //An extension of isPrintOperation() function\n        // Needs improvement\n\n        /*     else if (/^(?=.*?दिखाए)(?=.*[a-z])/.test(element)) {\n                \n    \n                PushKeyword(element.slice(0, 6), tokens); //Pushing print keyword only\n    \n                PushExpression(element.slice(6), tokens); //Pushing remaining expression like (a), (Message) etc\n            }\n            */\n\n        //error prone change made here- Pushing expression in here\n        //Used to push functions and expressions\n        //Unnecessary data is being passed through kalaam.\n        //This was created for a temporary fix\n        case 'FUNCTION_CALL':\n          try {\n            let CheckFunctionExpression = element.split('(');\n\n            let passedValues = RemoveBrackets(CheckFunctionExpression[1]);\n            passedValues = passedValues.split(',');\n\n            PushFunctionExecution(element, tokens, cleaned_sourcedata, i, passedValues);\n          } catch (e) {\n            console.log(e, `error in pushing function execution ${element}`);\n          }\n          break;\n\n        case 'NATIVE_OPERATION':\n          try {\n            PushNativeOperation(element, tokens);\n          } catch (e) {\n            console.log(e, `error in pushing native operaion ${element}`);\n          }\n          break;\n\n        case 'ARRAY_PUSH':\n          try {\n            PushArray(element, tokens);\n          } catch (e) {\n            console.log(e, `error in array push ${element}`);\n          }\n          break;\n      }\n    }\n\n    //making sense of tokens array coming from _parser.\n    function interpretToken(t, j, memory) {\n      skipInterpretation = 0;\n      let mutable_tokens = t;\n\n      let token = mutable_tokens[j].value;\n\n      let token_type = mutable_tokens[j].type;\n      let token_subtype = mutable_tokens[j].subtype;\n\n      let type = token === ActiveLangugaeKeywords.Print || token_type === 'operator' ? token_subtype : token_type;\n      //need to skip over some unncessary types\n\n      //operators are not working correctly\n      // no need to interpret over non-types\n      try {\n        if (isInterpretableType(type)) {\n          switch (type) {\n            case 'SetArrayIndexValue':\n              {\n                SetArrayIndexValue(mutable_tokens, j, j, memory, tokens, OriginalIterator, iterator, ExecutionStack, LinebylineSourcedata);\n              }\n              break;\n\n            case 'assignment': {\n              AssignorUpdateValues(mutable_tokens, j, memory, iterator, OriginalIterator, kalaam, ExecutionStack, LinebylineSourcedata); // eslint-disable-line\n\n              break;\n            }\n            //type=assignment\n\n            case 'PushToArray':\n              {\n                AddElementToArray(mutable_tokens, j, memory, ExecutionStack, LinebylineSourcedata);\n              }\n              break;\n            case 'AcceptInput':\n              {\n                AcceptInputandSetValue(mutable_tokens, j, memory, ExecutionStack, LinebylineSourcedata);\n              }\n              break;\n\n            //Whenever we encounter a function, we create a seperate execution context\n            case 'function':\n              {\n                //We are preparing the required data to execute a function call later in the prgroam\n\n                //functionsourcedata includes all the tokens from tokens array which belongs to a particular function\n                skipInterpretation = 0;\n                //We find self range or a function block through HandleBlocks function\n                let { functionSourceData } = prepareFunction(mutable_tokens, j);\n\n                mutable_tokens[j].SourceData = functionSourceData;\n\n                let message = `इस ${ActiveLangugaeKeywords.Function} का नाम ${token} है जिसे हम कोड में बाद में NEW VALUES पास करके उपयोग कर सकते है|`;\n\n                let expression = `${ActiveLangugaeKeywords.Function} ${token}`;\n                let description = ' एक विशिष्ट रूप से लिखा गया कोड जिसका हम बार बार उपयोग कर सकते है | ';\n\n                let position = findtokenPositioninCode(LinebylineSourcedata, expression, true);\n                if (position != undefined) {\n                  AddtoExecutionStack(ExecutionStack, ActiveLangugaeKeywords.Function, description, mutable_tokens[j].value, functionSourceData, message, position);\n                }\n                skipInterpretation = functionSourceData.length;\n              }\n              break;\n            //We are out of the fucntion execution context and back to global execution context\n            case 'condition':\n              {\n                let element = token;\n\n                var message;\n\n                //this function is the first step to calculate value of operations like अगर (ageone===10 && AverageAge<1000 && agetwo>100 || ageone===10) OR (ageone===10 )\n\n                let ConditionValue = GetConditionValue(element, memory, j);\n\n                kalaam.LastConditionValue.push(ConditionValue);\n\n                //if value is false, just skip the if loop context, if not it will be ran in final print module\n\n                if (!ConditionValue) {\n                  //  let InitializeLoop = tokens.indexOf(mutable_tokens[j]);\n\n                  //Handle Blocks is a function which takes care of nested block by taking care of nested { and } brackets\n                  //it uses the stack to push and pop brackets to accurately identify start and the end of the block\n                  let Returnvalue = HandleBlocks(mutable_tokens, j);\n\n                  //amount to skip if condition is false\n                  skipInterpretation = Returnvalue.j - j;\n\n                  message = `कंडीशन  ${element}  , FALSE(गलत) होने के कारन COMPUTER आगे के कोड को रन नहीं करेगा `;\n                } else {\n                  message = `कंडीशन ${element}  , TRUE(सत्य) होने के कारन COMPUTER आगे के कोड को रन करेगा `;\n                }\n\n                let expression = element;\n                let description = 'एक Certain Condition के तहत कोड Execution को Allow करता है। ';\n\n                expression = GetcleanedExpression(expression);\n\n                let position = findtokenPositioninCode(LinebylineSourcedata, expression, true);\n                if (position != undefined) {\n                  AddtoExecutionStack(ExecutionStack, ActiveLangugaeKeywords.If, description, element, ConditionValue, message, position);\n                }\n              }\n\n              break;\n            //So that we don't print a same value twice. First in global execution context and the in function context\n\n            //This one prints the global context values\n            case 'print':\n              {\n                PrintEngine(mutable_tokens, memory, j); // eslint-disable-line\n              }\n              break;\n\n            //This runs our while loop .i.e जबतक\n            case 'WhileLoopStart':\n              {\n                skipInterpretation = 0;\n                let element = mutable_tokens[j + 1].value;\n\n                let ExtratcedVariable = [];\n\n                let variable = '';\n                let WhileLoopSourcedataIndexStart = 0;\n                let WhileLoopSourcedataTokens = [];\n\n                for (let i = 0; i < element.length; i++) {\n                  let x = element.charAt(i);\n\n                  if (isVariable(x)) {\n                    variable = variable + x;\n                  }\n                  if (!isVariable(element.charAt(i + 1)) && isVariable(x)) {\n                    let token = memory.find((el) => el.name === variable);\n\n                    ExtratcedVariable.push({\n                      variable: variable,\n                      value: token.value,\n                    });\n\n                    variable = '';\n                  }\n                }\n\n                function getWhileLoopSourcedata(startIndex, mutable_tokens, StoreResult) {\n                  StoreResult = HandleBlocks(mutable_tokens, startIndex, StoreResult);\n\n                  return StoreResult;\n                }\n\n                WhileLoopSourcedataIndexStart = getLoopIndexStart(mutable_tokens, j, '{', WhileLoopSourcedataIndexStart);\n\n                WhileLoopSourcedataTokens = getWhileLoopSourcedata(WhileLoopSourcedataIndexStart, mutable_tokens, WhileLoopSourcedataTokens).StoreResult;\n\n                let message = 'जबतक ' + element + ' सही होगा तब तक आगे का कोड रन किया जायेगा ';\n\n                let description = 'जबतक में दिए हुए शर्त(Condition) के पूरा होने तक आगे के कोड को रन करे |';\n\n                let expression = GetcleanedExpression(element);\n\n                let position = findtokenPositioninCode(LinebylineSourcedata, expression, true);\n                if (position != undefined) {\n                  AddtoExecutionStack(ExecutionStack, ActiveLangugaeKeywords.While, description, element, WhileLoopSourcedataTokens, message, position);\n                }\n\n                //constantly accessing the conditionvalue\n\n                while (GetConditionValue(element, memory, j + 1)) {\n                  for (let i = 0; i < WhileLoopSourcedataTokens.length; i++) {\n                    //SECTION while loop context\n\n                    if (WhileLoopSourcedataTokens[i].value === '=') {\n                      AssignorUpdateValues(WhileLoopSourcedataTokens, i, memory, '', '', '', ExecutionStack, LinebylineSourcedata);\n                    } else if (WhileLoopSourcedataTokens[i].type === 'AcceptInput') {\n                      AcceptInputandSetValue(WhileLoopSourcedataTokens, i, memory, ExecutionStack);\n                    }\n\n                    // Handling CONDITIONAL statements in While loop\n                    else if (WhileLoopSourcedataTokens[i].type === 'condition') {\n                      //if index returns a value, it means condition is false and skip the execution\n\n                      let index = HandleConditions(WhileLoopSourcedataTokens, i, memory);\n\n                      if (index != undefined) {\n                        i = index;\n                      } else {\n                        i = i;\n                      }\n                    }\n\n                    //Handling दिखाए statements in while loop\n                    else if (WhileLoopSourcedataTokens[i].value === ActiveLangugaeKeywords.Print) {\n                      PrintEngine(WhileLoopSourcedataTokens, memory, i, ExecutionStack); // eslint-disable-line\n                    }\n\n                    //operations like Numbers[a]='xyz'\n                    else if (WhileLoopSourcedataTokens[i].type === 'SetArrayIndexValue') {\n                      SetArrayIndexValue(WhileLoopSourcedataTokens, i, j, memory, tokens, OriginalIterator, iterator, ExecutionStack, LinebylineSourcedata);\n                    }\n                  }\n                }\n                skipInterpretation = WhileLoopSourcedataTokens.length;\n\n                //End of While loop execution\n\n                //Handling For loops\n              }\n              break;\n\n            case 'ForLoopStart':\n              {\n                var FlagPrimalLoop = 0; // eslint-disable-line\n\n                var SourcedataTokens = [];\n\n                var { OriginalIterator, IterationStart, IterationEnd, iterator, element, ForLoopSourcedataIndexStart, Cycle } = ForLoopSetMetadata(mutable_tokens, j, memory);\n\n                function getSourcedata(startIndex, mutable_tokens, StoreResult) {\n                  let Returnvalue = HandleBlocks(mutable_tokens, startIndex, StoreResult);\n                  StoreResult = Returnvalue.StoreResult;\n\n                  return StoreResult;\n                }\n\n                ForLoopSourcedataIndexStart = getLoopIndexStart(mutable_tokens, j, '{', ForLoopSourcedataIndexStart);\n\n                SourcedataTokens = getSourcedata(ForLoopSourcedataIndexStart, mutable_tokens, SourcedataTokens);\n\n                SourcedataTokens.forEach((el) => {\n                  el.isNestedLoop = false;\n                });\n\n                //Checking if the for loop has one more for loop inside it\n                let FindNestedLoop = SourcedataTokens.find((el) => el.type === 'ForLoopStart');\n\n                if (FindNestedLoop != undefined) {\n                  let NestedLoopindex = SourcedataTokens.indexOf(FindNestedLoop) + 3;\n                  let NestedLooplength = SourcedataTokens[NestedLoopindex].EndIndex - SourcedataTokens[NestedLoopindex].startIndex + 2;\n\n                  //if we have a nested loop, set isNesteLoop to TRUE\n\n                  for (let x = NestedLoopindex; x < NestedLoopindex + NestedLooplength; x++) {\n                    SourcedataTokens[x].isNestedLoop = true;\n                  }\n                }\n\n                if (element.includes('(') && element.includes(',')) {\n                  FlagPrimalLoop = 1;\n                }\n\n                //Iterating over forloop sourcedata\n                //self line 'iterator <= Cycle' determines start of the loop and the duration of the loop\n\n                let message = 'दुहराओ के अंदर लिखे गए कोड को ' + IterationStart + ' से ' + IterationEnd + ' तक, मतलब ' + eval(IterationEnd - IterationStart + 1) + ' बार RUN(रन) किया जायेगा |' + '\\n' + ' इसमें Computer, ' + '\"' + iterator + '\"' + ' को Memory में, ' + IterationStart + ' से ' + IterationEnd + ' तक क़ीमत(Values) सेट करता जाएगा|';\n\n                //This is the experession whcih is getting evaluated.\n                let expression = 'दुहराओ ' + iterator + ' को ' + mutable_tokens[j + 1].value + ' मे';\n                let description = 'एक ही कोड को बार-बार दोहराना। ';\n                let Linenumber = LinebylineSourcedata.indexOf(expression);\n                Linenumber += 1;\n\n                AddtoExecutionStack(ExecutionStack, ActiveLangugaeKeywords.For, description, SourcedataTokens, '', message, Linenumber);\n\n                for (iterator = IterationStart; iterator <= Cycle; iterator++) {\n                  let forloopindex = memory.find((el) => el.name === OriginalIterator);\n\n                  forloopindex.value = iterator;\n\n                  //flag to avoid running this code if loop is primal because the payload needs to be compeltely different\n                  if (FlagPrimalLoop === 0) {\n                    // ForLoopArrayorStringOutput(elementValue, iterator, memory, self); // eslint-disable-line\n                  }\n\n                  for (let i = 0; i < SourcedataTokens.length; i++) {\n                    // let isNested = SourcedataTokens[i].isNestedLoop;\n\n                    //This code runs only if we have a nested loop situation\n                    skipInterpretation = 0;\n                    try {\n                      interpretToken(SourcedataTokens, i, memory);\n                    } catch (e) {\n                      console.log(e, `error in interpreting for loop ${SourcedataTokens[i]}`);\n                    }\n                    if (skipInterpretation != 0) {\n                      i = i + skipInterpretation;\n                    }\n                  }\n                }\n\n                skipInterpretation = skipInterpretation + SourcedataTokens.length;\n              }\n\n              break;\n            //END FOR LOOP EXECUTION\n            case 'functionExecution': {\n              //checking if function is invoked somewhere later in the program\n\n              //If we see a function execution call, for e.g Add(x,y), we prepare for execution\n\n              let functionSourceData = [];\n              let functionName = token;\n\n              let passedValues = mutable_tokens[j].passedValues;\n\n              let functionToken = mutable_tokens.find((el) => el.value === functionName);\n\n              let functionArguments = functionToken.arguments;\n\n              functionSourceData = functionToken.SourceData;\n\n              //Creating a seperate execution context and setting fucntion context name:value pair in functionContextmemory\n\n              //for e.g x=3, y=4 is already defined and then we execute add(x,y)\n\n              // This is an memory form limited to function context\n\n              //Operating on function arguments and setting their values. For e.g the function add(x,y) might be called as add(3,4)\n\n              //so we set x=3, y=4 and set self variable-value pair in functionContextmemory\n\n              functionArguments.forEach((el, index) => {\n                let val = passedValues[index];\n\n                val = val.replace(/\"/g, '');\n                val = val.replace(/'/g, '');\n\n                passedValues[index] = val;\n\n                //in self code we are filtering out arguments passed based on whether they already exist in updated tokens or not\n\n                let FindInUpdatedTokens = memory.find((el) => el.name === val);\n\n                //For passing same argument and same value to function  e.g function foo (fibonacci) and fibonacci is already declared with some value\n                if (FindInUpdatedTokens === undefined) {\n                  functionContextmemory.push({\n                    name: el,\n\n                    value: val,\n\n                    identifier: j + index,\n                    type: 'value',\n                    context: 'FunctionExecutionContext',\n                  });\n                }\n\n                //For passing different argument and value to function  e.g function foo (arr) and arr doesn't exist anywhere in tokens.\n                else if (el != FindInUpdatedTokens.name && FindInUpdatedTokens != undefined) {\n                  functionContextmemory.push({\n                    name: el,\n\n                    value: FindInUpdatedTokens.value,\n\n                    identifier: j + index,\n                    type: FindInUpdatedTokens.type,\n                    context: 'FunctionExecutionContext',\n                    IntheEndSetValueto: val,\n                  });\n                } else {\n                  functionContextmemory.push({\n                    name: el,\n\n                    value: val,\n\n                    identifier: j + index,\n                    type: FindInUpdatedTokens.type,\n                    context: 'FunctionExecutionContext',\n                    IntheEndSetValueto: val,\n                  });\n                }\n              });\n\n              //Building a complete variable-value pair dataset\n\n              var CompleteTokenValueList = [...memory, ...functionContextmemory];\n\n              let message = 'Computer ' + '\"' + functionName + '\"' + ' नाम की रचना को कॉल (Call) करता है | आपने ' + '\"()\"' + ' के अंदर दिए गए New Values का रचना ' + functionName + ' में उपयोग करके, रचना ' + functionName + ' में लिखे गए कोड को रन करता है |';\n\n              let expression = functionName + '(';\n\n              let description = ' एक विशिष्ट रूप से लिखा गया कोड जिसका हम बार बार उपयोग कर सकते है | ';\n\n              let position = findtokenPositioninCode(LinebylineSourcedata, expression, false);\n\n              if (position != undefined) {\n                AddtoExecutionStack(ExecutionStack, ActiveLangugaeKeywords.Function, description, functionName, functionSourceData, message, position);\n              }\n\n              //Now we start digging into the function execution\n              //might have to change i to 1\n              //skip in functionsourcedata\n              for (let i = 0; i < functionSourceData.length; i++) {\n                skipInterpretation = 0;\n                try {\n                  interpretToken(functionSourceData, i, CompleteTokenValueList);\n                } catch (e) {\n                  console.log(e, `error in interpreting function execution ${functionName}`);\n                }\n                if (skipInterpretation != 0) {\n                  i = i + skipInterpretation;\n                }\n              }\n              break;\n            }\n          }\n        }\n      } catch (e) {\n        console.log(e, `Error in Interpreting token ${mutable_tokens[j]}`);\n      }\n      /* else if (token === \"अन्यथा\") {\n        let result = HandleBlocks(mutable_tokens, j, result);\n        // let StartofBlock = mutable_tokens[j + 1].startIndex;\n        let EndofBlock = mutable_tokens[j + 1].EndIndex;\n  \n        let lastValue = kalaam.LastConditionValue.pop();\n  \n        if (lastValue) {\n          j = EndofBlock;\n        }*/\n    }\n\n    //#STEP 1- Cleaning the sourcedata and setting the 'result' to 'cleaned_sourcedata'\n\n    //If a code is not working, it is probably because it's not cleaned properly.\n    // console.log('cleaned_sourcedata:', cleaned_sourcedata);\n    console.log('cleaned_sourcedata:', cleaned_sourcedata);\n\n    console.log('tokens:', tokens);\n\n    cleaned_sourcedata = GetCleanSourcedata(sourcedata, cleaned_sourcedata, mixedimpurity);\n\n    //#STEP 2- - Parsing cleaned_sourcedata, adding each item depending on it's type to tokens array\n\n    // PARSING INITIATION\n\n    (function _parser() {\n      for (i; i < cleaned_sourcedata.length; i++) {\n        _analyzeToken(cleaned_sourcedata, i, tokens);\n\n        //Code to skip improve a particular part of cleaned_sourcedata if it's being operated by two different functions.\n        if (skipParsing != 0) {\n          i = i + skipParsing;\n        }\n      }\n    })();\n\n    //CLEANING UP THE TOKENS ARRAY\n    //Removing tokens with value = '', It was generated due to \" cleaned_sourcedata = cleaned_sourcedata.replace(/(;|\\n|\\r)/gm, \" \").split(' ')\"\n\n    //Filtering seemed unnecessary, removed for now.\n    //tokens = tokens.filter(el => el.value != '')\n\n    //variableArray = tokens.filter((el) => el.type === 'variable');\n\n    //As of now, this is how the timeline looks\n\n    //raw sourcecode -> cleaned_sourcedata -> tokens\n\n    //#STEP 3 - evaluating conditions, running loops, executing functions finding values in memory and printing outputs\n\n    //This is the final section\n    //interpreting the code from syntax tree\n    (function _interpretor() {\n      for (let x = 0; x < tokens.length; x++) {\n        //We will be having a copy of tokens as mutable_tokens\n        interpretToken(tokens, x, memory);\n        if (skipInterpretation != 0) {\n          x = x + skipInterpretation;\n        }\n      }\n    })();\n\n    //This is where error handling kicks in\n\n    //To find undefined variables\n\n    function onlyUnique(value, index, arr) {\n      return arr.indexOf(value) === index;\n    }\n\n    var assigned_variables = assigned_variables.filter(onlyUnique);\n\n    var difference = variables_array.filter((x) => !assigned_variables.includes(x));\n\n    if (difference.length > 0) {\n      difference.forEach((el) => {\n        kalaam.error.push(`Variable ${el} is undefined`);\n      });\n    }\n\n    kalaam.linebylineOutput = kalaam.error.length > 0 ? kalaam.error : kalaam.output.split('\\n');\n\n    //time taken to transpile the code is t1-t0\n    var t1 = performance.now(); // eslint-disable-line\n\n    if (kalaam.error.length === 0) {\n      let s = (t1 - t0).toPrecision(4);\n      kalaam.TimeTaken = `सफल | speed - ${s} ms`;\n    } else {\n      kalaam.isError = true;\n\n      kalaam.TimeTaken = 'Compilation Error: Check for assignement and declaration mistyping';\n    }\n\n    //kalaam.linebylineoutput is what you will finally see on output screen\n\n    kalaam.linebylineOutput = kalaam.linebylineOutput.filter(function (item) {\n      return item !== '';\n    });\n\n    kalaam.ExecutionStack = ExecutionStack;\n    return kalaam;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport { Compile, KalaamKeywords };\n"]}]}