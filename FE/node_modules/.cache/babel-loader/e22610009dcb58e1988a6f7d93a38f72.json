{"remainingRequest":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/babel-loader/lib/index.js!/Users/jonny/Desktop/myProjects/Kalaam-BE/scanner/main.js","dependencies":[{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/scanner/main.js","mtime":1620343647685},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMiOwovL1RvIGNoZWNrIHZhcmlhYmxlIHR5cGVzOiBOdW1iZXIsIFN0cmluZywgQXJyYXkgZXRjLgppbXBvcnQgKiBhcyBUeXBlQ2hlY2sgZnJvbSAnLi4vVHlwZUNoZWNrL1R5cGVDaGVja2luZyc7IC8vVG8gY2hlY2sgb3RoZXIgb3BlcmF0aW9ucyBsaWtlIE11bHRpU3RyaW5nLCBBcml0aG1ldGljIE9wZXJhdGlvbiBldGMuCgppbXBvcnQgKiBhcyBBZHZhbmNlZFR5cGVDaGVjayBmcm9tICcuLi9UeXBlQ2hlY2svQWR2YW5jZWRUeXBlQ2hlY2tpbmcnOyAvL1NFQ1RJT04gLSBDaGVja2luZyBmb3IgdHlwZSBvZiBjaGFyYWN0ZXJzLiBUeXBlQ2hlY2sgaXMgYW4gb2JqZWN0IHdoaWNoIGNvbnNpc3RzIGFsbCBzZWxmIGZ1bmN0aW9ucy4gQ2hlY2sgTGluZSAxMDIKCnZhciBpc1ZhcmlhYmxlID0gVHlwZUNoZWNrLmlzVmFyaWFibGUoKTsKdmFyIGlzTnVtYmVyID0gVHlwZUNoZWNrLmlzTnVtYmVyKCk7CnZhciBpc09wZXJhdG9yID0gVHlwZUNoZWNrLmlzT3BlcmF0b3IoKTsKdmFyIGlzUHJpbnRPcGVyYXRpb24gPSBUeXBlQ2hlY2suaXNQcmludE9wZXJhdGlvbigpOwp2YXIgaXNDb25kaXRpb25hbEtleXdvcmQgPSBUeXBlQ2hlY2suaXNDb25kaXRpb25hbEtleXdvcmQoKTsKdmFyIGlzRm9yTG9vcCA9IFR5cGVDaGVjay5pc0Zvckxvb3AoKTsKdmFyIGlzRnVuY3Rpb24gPSBUeXBlQ2hlY2suaXNGdW5jdGlvbigpOwp2YXIgaXNGdW5jdGlvbkNhbGwgPSBUeXBlQ2hlY2suaXNGdW5jdGlvbkNhbGwoKTsKdmFyIGlzTmF0aXZlT3BlcmF0aW9uID0gVHlwZUNoZWNrLmlzTmF0aXZlT3BlcmF0aW9uKCk7IC8vbmVlZHMgd29yawoKdmFyIGlzRXhwcmVzc2lvbiA9IFR5cGVDaGVjay5pc0V4cHJlc3Npb24oKTsKdmFyIGlzQXJyYXkgPSBUeXBlQ2hlY2suaXNBcnJheSgpOwp2YXIgaXNJbnB1dCA9IFR5cGVDaGVjay5pc0lucHV0KCk7CnZhciBpc1NldEFycmF5SW5kZXhWYWx1ZSA9IFR5cGVDaGVjay5pc1NldEFycmF5SW5kZXhWYWx1ZSgpOyAvLyBjb25zdCBpc0VtcHR5QXJyYXlJbml0ID0gVHlwZUNoZWNrLmlzRW1wdHlBcnJheUluaXQoKQoKdmFyIGlzU3RyaW5nID0gVHlwZUNoZWNrLmlzU3RyaW5nKCk7CnZhciBpc2ludmFsaWRTdHJpbmcgPSBUeXBlQ2hlY2suaXNpbnZhbGlkU3RyaW5nKCk7IC8vaWYgcGFyc2VyIGVuY291bnRlcnMgYW55dGhpbmcgbGlrZSAoIiBvciAoLCB0aGVuIHRoYXQncyBhIHJlYWx0aW1lIHByaW50LgovL2J1aWxkc3RyaW5nIHdpbGwgYmUgYXBwbGllZCBub3cgdG8gY3JlYXRlIGEgc3RyaW5nIGFuZCBwdXNoIGl0IGludG8gdG9rZW5zLiBCdWlsZHN0cmluZyBpcyB1c2VkIHRvIGNvbWJpbmUgc3RyaW5nIHRva2VucyBsaWtlCi8vWydoZWxsbycsICdLYWxhYW0nLCAnZGV2ZWxvcGVycycsICIhIl0gaW50byAnaGVsbG8ga2FsYWFtIGRldmVsb3BlcnMhJy4KLy9JdCdzIGJlY2F1c1JjPWUgc291cmNlY29kZSBpcyBhbiBhcnJheSBvZiB0b2tlbnMgYW5kIGVhY2ggdG9rZW4gaXMgYW4gaW5kaXZpZHVhbCB3b3JkIGluIGEgcHJvZ3JhbS4KLy9JdCdzIHJlY29tbWVuZGVkIHRvIGxvb2sgYXQgc291cmNlY29kZSBvZiBldmVyeSBwcm9ncmFtIHRvIHVuZGVyc3RhbmQgaG93IGl0IGNvbnZlcnRzIHBsYWluIHRleHQgaW50byBhcnJheSBvZiBpbmRpdmlkdWFsIHdvcmRzLgoKdmFyIGlzUmVhbFRpbWVQcmludE11bHRpcGxlU3RyaW5nID0gQWR2YW5jZWRUeXBlQ2hlY2suaXNSZWFsVGltZVByaW50TXVsdGlwbGVTdHJpbmcoKTsgLy9jb25zdCBpc1N0cmluZ2FuZFZhbHVlID0gQWR2YW5jZWRUeXBlQ2hlY2suaXNTdHJpbmdhbmRWYWx1ZSgpCgp2YXIgaXNDYWxjdWxhdGlvbiA9IEFkdmFuY2VkVHlwZUNoZWNrLmlzQ2FsY3VsYXRpb24oKTsKCmZ1bmN0aW9uIFNjYW5uZXIoc291cmNlY29kZSwgaSwgdG9rZW5zKSB7CiAgdmFyIGVsID0gc291cmNlY29kZVtpXTsKICB2YXIgdHlwZSA9IGlzVmFyaWFibGUoZWwpID8gJ1ZBUklBQkxFJyA6IGlzTnVtYmVyKGVsKSA/ICdOVU1CRVInIDogaXNpbnZhbGlkU3RyaW5nKGVsKSA/ICdFTVBUWV9TVFJJTkcnIDogaXNJbnB1dChlbCkgPyAnSU5QVVQnIDogaXNPcGVyYXRvcihlbCkgPyAnT1BFUkFUT1InIDogaXNQcmludE9wZXJhdGlvbihlbCwgc291cmNlY29kZSwgaSkgPyAnUFJJTlQnIDogaXNGdW5jdGlvbihlbCkgPyAnRlVOQ1RJT04nIDogaXNBcnJheShlbCkgPyAnQVJSQVknIDogaXNTZXRBcnJheUluZGV4VmFsdWUoZWwsIHNvdXJjZWNvZGUsIGkpID8gJ1NFVF9BUlJBWV9JTkRFWCcgOiBpc1NldEFycmF5SW5kZXhWYWx1ZShlbCwgc291cmNlY29kZSwgaSkgPT0gZmFsc2UgPyAnR0VUX0FSUkFZX0lOREVYJyA6IGlzQ29uZGl0aW9uYWxLZXl3b3JkKGVsKSA/ICdDT05ESVRJT05BTF9LRVlXT1JEJyA6IGVsLmluY2x1ZGVzKCfgpKrgpYHgpLYnKSA/ICdQVVNIX1RPX0FSUkFZJyA6IGlzRm9yTG9vcChlbCkgPyAnRk9SX0xPT1AnIDogaXNDYWxjdWxhdGlvbihlbCkgPyAnQ0FMQ1VMQVRJT04nIDogaXNSZWFsVGltZVByaW50TXVsdGlwbGVTdHJpbmcoZWwpID8gJ1JFQUxUSU1FX1BSSU5UJyA6IGlzU3RyaW5nKGVsKSA/ICdTVFJJTkcnIDogaXNGdW5jdGlvbkNhbGwoZWwsIHRva2Vucywgc291cmNlY29kZSwgaSkgPyAnRlVOQ1RJT05fQ0FMTCcgOiBpc05hdGl2ZU9wZXJhdGlvbihlbCkgPyAnTkFUSVZFX09QRVJBVElPTicgOiBpc0V4cHJlc3Npb24oZWwpICYmIGVsLmluY2x1ZGVzKCdbJykgJiYgZWwuaW5jbHVkZXMoJ10nKSA/ICdBUlJBWV9QVVNIJyA6ICdVTktOT1dOJzsKICByZXR1cm4gdHlwZTsKfQoKZXhwb3J0IGRlZmF1bHQgU2Nhbm5lcjsKLypcXCAKICAgICAgICBlbHNlIGlmIGlzRXhwcmVzc2lvbihlbCkgICYmICFpc0NhbGN1bGF0aW9uKGVsKSAmJiAhZWwuaW5jbHVkZXMoIlsiKSAmJiAhZWwuaW5jbHVkZXMoIl0iKSAmJiAoIWlzQ29uZGl0aW9uYWxLZXl3b3JkKHNvdXJjZWNvZGVbaSAtIDFdKSkgJiYgKHNvdXJjZWNvZGVbaSAtIDFdICE9ICLgpK7gpYciICYmIHNvdXJjZWNvZGVbaSAtIDFdICE9ICLgpLDgpJrgpKjgpL4iKT8KCgogICAgICAgICAgICAKICAgICAgICAgICAgbGV0IENoZWNrRnVuY3Rpb25FeHByZXNzaW9uID0gZWwuc3BsaXQoIigiKQoKICAgICAgICAgICAgbGV0IHBhc3NlZFZhbHVlcyA9IFJlbW92ZUJyYWNrZXRzKENoZWNrRnVuY3Rpb25FeHByZXNzaW9uWzFdKQogICAgICAgICAgICBwYXNzZWRWYWx1ZXMgPSBwYXNzZWRWYWx1ZXMuc3BsaXQoIiwiKQogICAgICAgICAgICB0b2tlbiA9IHRva2Vucy5maW5kKGVsID0+IGVsLnZhbHVlID09IENoZWNrRnVuY3Rpb25FeHByZXNzaW9uWzBdKQogICAgICAgICAgIAoKICAgICAgICAgICAgaWYgKHRva2VuICE9IHVuZGVmaW5lZCAmJiBzb3VyY2Vjb2RlW2ktMV0hPSfgpKbgpL/gpJbgpL7gpI8nPwoKICAgICAgICAgICAgICAgIFB1c2hGdW5jdGlvbkV4ZWN1dGlvbihlbCwgdG9rZW5zLCBzb3VyY2Vjb2RlLCBpLCBwYXNzZWRWYWx1ZXMpCgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewoKICAgICAgICAgICAgICAgIFB1c2hFeHByZXNzaW9uKGVsLCB0b2tlbnMpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfQoKICAgICAgICB9CiAqLw=="},{"version":3,"sources":["/Users/jonny/Desktop/myProjects/Kalaam-BE/scanner/main.js"],"names":["TypeCheck","AdvancedTypeCheck","isVariable","isNumber","isOperator","isPrintOperation","isConditionalKeyword","isForLoop","isFunction","isFunctionCall","isNativeOperation","isExpression","isArray","isInput","isSetArrayIndexValue","isString","isinvalidString","isRealTimePrintMultipleString","isCalculation","Scanner","sourcecode","i","tokens","el","type","includes"],"mappings":"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","sourcesContent":["//To check variable types: Number, String, Array etc.\n\nimport * as TypeCheck from '../TypeCheck/TypeChecking';\n\n//To check other operations like MultiString, Arithmetic Operation etc.\nimport * as AdvancedTypeCheck from '../TypeCheck/AdvancedTypeChecking';\n\n//SECTION - Checking for type of characters. TypeCheck is an object which consists all self functions. Check Line 102\n\nconst isVariable = TypeCheck.isVariable();\n\nconst isNumber = TypeCheck.isNumber();\n\nconst isOperator = TypeCheck.isOperator();\n\nconst isPrintOperation = TypeCheck.isPrintOperation();\nconst isConditionalKeyword = TypeCheck.isConditionalKeyword();\nconst isForLoop = TypeCheck.isForLoop();\nconst isFunction = TypeCheck.isFunction();\nconst isFunctionCall = TypeCheck.isFunctionCall();\nconst isNativeOperation = TypeCheck.isNativeOperation();\n\n//needs work\nconst isExpression = TypeCheck.isExpression();\n\nconst isArray = TypeCheck.isArray();\nconst isInput = TypeCheck.isInput();\n\nconst isSetArrayIndexValue = TypeCheck.isSetArrayIndexValue();\n\n// const isEmptyArrayInit = TypeCheck.isEmptyArrayInit()\n\nconst isString = TypeCheck.isString();\nconst isinvalidString = TypeCheck.isinvalidString();\n\n\n//if parser encounters anything like (\" or (, then that's a realtime print.\n\n//buildstring will be applied now to create a string and push it into tokens. Buildstring is used to combine string tokens like\n//['hello', 'Kalaam', 'developers', \"!\"] into 'hello kalaam developers!'.\n\n//It's becausRc=e sourcecode is an array of tokens and each token is an individual word in a program.\n\n//It's recommended to look at sourcecode of every program to understand how it converts plain text into array of individual words.\n\nconst isRealTimePrintMultipleString = AdvancedTypeCheck.isRealTimePrintMultipleString();\n\n//const isStringandValue = AdvancedTypeCheck.isStringandValue()\n\nconst isCalculation = AdvancedTypeCheck.isCalculation();\n\nfunction Scanner(sourcecode, i, tokens) {\n    var el = sourcecode[i];\n\n    var type = isVariable(el)\n        ? 'VARIABLE'\n        : isNumber(el)\n            ? 'NUMBER'\n            : isinvalidString(el)\n                ? 'EMPTY_STRING'\n                : isInput(el)\n                    ? 'INPUT'\n                    : isOperator(el)\n                        ? 'OPERATOR'\n                        : isPrintOperation(el, sourcecode, i)\n                            ? 'PRINT'\n                            : isFunction(el)\n                                ? 'FUNCTION'\n                                : isArray(el)\n                                    ? 'ARRAY'\n                                    : isSetArrayIndexValue(el, sourcecode, i)\n                                        ? 'SET_ARRAY_INDEX'\n                                        : isSetArrayIndexValue(el, sourcecode, i) == false\n                                            ? 'GET_ARRAY_INDEX'\n                                            : isConditionalKeyword(el)\n                                                ? 'CONDITIONAL_KEYWORD'\n                                                : el.includes('पुश')\n                                                    ? 'PUSH_TO_ARRAY'\n                                                    : isForLoop(el)\n                                                        ? 'FOR_LOOP'\n                                                        : isCalculation(el)\n                                                            ? 'CALCULATION'\n                                                            : isRealTimePrintMultipleString(el)\n                                                                ? 'REALTIME_PRINT'\n                                                                : isString(el)\n                                                                    ? 'STRING'\n                                                                    : isFunctionCall(el, tokens, sourcecode, i)\n                                                                        ? 'FUNCTION_CALL'\n                                                                        : isNativeOperation(el)\n                                                                            ? 'NATIVE_OPERATION'\n                                                                            : isExpression(el) && el.includes('[') && el.includes(']')\n                                                                                ? 'ARRAY_PUSH'\n                                                                                : 'UNKNOWN';\n\n    return type;\n}\n\nexport default Scanner;\n\n/*\\\\ \n        else if isExpression(el)  && !isCalculation(el) && !el.includes(\"[\") && !el.includes(\"]\") && (!isConditionalKeyword(sourcecode[i - 1])) && (sourcecode[i - 1] != \"मे\" && sourcecode[i - 1] != \"रचना\")?\n\n\n            \n            let CheckFunctionExpression = el.split(\"(\")\n\n            let passedValues = RemoveBrackets(CheckFunctionExpression[1])\n            passedValues = passedValues.split(\",\")\n            token = tokens.find(el => el.value == CheckFunctionExpression[0])\n           \n\n            if (token != undefined && sourcecode[i-1]!='दिखाए'?\n\n                PushFunctionExecution(el, tokens, sourcecode, i, passedValues)\n\n            }\n            else {\n\n                PushExpression(el, tokens)\n                \n            }\n\n        }\n */\n"]}]}