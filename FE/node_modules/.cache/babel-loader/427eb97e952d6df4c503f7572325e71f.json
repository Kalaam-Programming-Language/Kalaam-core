{"remainingRequest":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/babel-loader/lib/index.js!/Users/jonny/Desktop/myProjects/Kalaam-BE/Scripts/main.js","dependencies":[{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/Scripts/main.js","mtime":1652752356137},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/jonny/Desktop/myProjects/Kalaam-BE/Scripts/main.js"],"names":["SourceDataReplaceforEasyParsing","ActiveLangugaeKeywords","RemoveQuotes","RemoveBrackets","Count","IsSpecialChar","v","i","IsConditionalOperator","e","includes","IsReservedKeyword","Print","If","isPureEval","element","test","isCalculation","isNumber","charAt","length","isArrayOperation","GetCleanSourcedata","sourcedata","cleaned_sourcedata","impurities","forEach","indexOf","push","elements","split","index","filter","item","GetcleanedExpression","expression","replace","SplitElementsArray","multiCal","StringVar","StrVar","j","flag","getLoopIndexStart","mutable_tokens","check","setIndex","value","handlemultConditions","condition","substring","SweepedElement","operator","AddElementToArray","Sourcedata","updated_tokens","ExecutionStack","LinebylineSourcedata","token","Split","Array","ElementtoPush","find","el","name","ArrayEl","ArrayValue","indexofArray","message","Linenumber","AddtoExecutionStack","AcceptInputandSetValue","tokens","console","log","SetInputValueAs","AcceptAs","prompt","CalculateValues","calculation","result","calculationArray","SetValues","joinStringVar","join","NewStringVar","eval","toString","PushSetArrayIndexValue","data","type","ValueToSet","PushGetArrayIndexValue","CreateArrayElement","Value","iterator","ArrayElement","SetArrayorStringElement","OriginalElement","NewValue","variable","indexCollected","Element","GetArrayorStringElement","undefined","ForLoopArrayorStringOutput","elementValue","global","CurrentElement","FoundValue","output","ArrayElementValue","UpdateUpdated_tokenswithValues","payload","a","b","HandleBlocks","StoreResult","ArrayBrackets","x","pop","startIndex","EndIndex","HandleConditions","SplitArray","Values","ForLoopConditionValue","SplitandJoin","array","Joinarray","AccumulateValue","ResetValue","AssignorUpdateValues","OriginalIterator","varvalue","FinalValue","AssignmentError","keywords","error","varvalueType","findvalueinMemory","memory_value","checkifUndefined","mv","undefined_error","Itemvalue","ItemvalueLength","identifier","n","ArrayItem","m","GetConditionValue","ConditionValue","MultConditionsCount","parseInt","BuiltMultConditonWithValues","LastResult","ForLoopSetMetadata","ForLoopMetaData","IterationStart","iterationStart","IterationEnd","iterationEnd","elementLength","ForLoopSourcedataIndexStart","Cycle","SetArrayIndexValue","SourceData","CompleteTokenValueList","NewValueToSet","newInterator","iterat","stack","keyword","keywordUse"],"mappings":"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","sourcesContent":["import { SourceDataReplaceforEasyParsing } from '../Scripts/DataCleaning';\n\nimport { ActiveLangugaeKeywords } from '../Compiler/constants';\n\nimport { RemoveQuotes, RemoveBrackets, Count } from '../Scripts/Helpers';\n\n//ANCHOR - Important functions to be used while parsing\n\n//Checking if string is empty. The way we check string is empty or not boils down to how cleaned_sourcedata sees empty string s\n\n//Needs improvement\n\nfunction IsSpecialChar(v, i) {\n  return v[i] == '?' || (v[i] == '=' && v[i + 1] != '=' && v[i - 1] != '=') || v[i] == '|' || v[i] == ';' || v[i] == '&' || v[i] == '^' || v[i] == '%' || v[i] == '$' || v[i] == '#' || v[i] == '@' || v[i] == '!' || v[i] == ':' || v[i] == '+' || v[i] == ',' || v[i] == '%' || v[i] == '-' || v[i + 1] == ')' || v[i] == '/' || v[i] == '*' || v[i] == '>' || v[i] == '<';\n}\n\nfunction IsConditionalOperator(e) {\n  return e.includes('>') || e.includes('<') || e.includes('==') || e.includes('!=');\n}\n\nfunction IsReservedKeyword(e) {\n  return e.includes('दुहराओ') || e.includes('रचना') || e.includes('अन्यथा') || e.includes('इनपुट') || e.includes('पुश') || e.includes(ActiveLangugaeKeywords.Print) || e.includes(ActiveLangugaeKeywords.If) || /* cleaned_sourcedata[k + 1] == '='*/ e == '}';\n}\n\n//Checking if element is a pure evaluation like 1+2, 20*34, 40+6-98 etc\n\nfunction isPureEval(element) {\n  if (/^([-+]?[0-9]*\\.?[0-9]+[\\/\\+\\-\\*])+([-+]?[0-9]*\\.?[0-9]+)*$/gm.test(element)) {\n    return true;\n  }\n}\n\n//Checking if an element is calculation to be performed\n\nfunction isCalculation(element) {\n  if (!isNumber(element)) {\n    if ((element.includes('+') || element.includes('%') || element.includes('-') || element.includes('*') || element.includes('/')) && ((element.includes('(') && element.includes(')')) || (!element.includes('(') && !element.includes(')'))) && element.charAt(element.length - 1) != '+') {\n      return true;\n    }\n  }\n}\n\n//removing brackets from element\n\nfunction isArrayOperation(element) {\n  //To find Patterns like Array[2], Array[index] etc\n\n  element = RemoveBrackets(element);\n\n  if (element.charAt(element.length - 1) == ']' && element.includes('[') && element.charAt(0) != '[') {\n    return true;\n  }\n}\n\n//preparing sourcedata for easy parsing by handling new lines, enters etc.\n//cleaning up the data to get a suitable version of sourcedata. it's better to get suitable version because users can type what they wish but we need to maintain\n//integrity of program in every possible condition. So, we clean and refactor raw code to remove unnecessary data.\n\nfunction GetCleanSourcedata(sourcedata, cleaned_sourcedata, impurities) {\n  sourcedata = SourceDataReplaceforEasyParsing(sourcedata);\n\n  sourcedata.forEach((element) => {\n    //finding the elements which has =\" in it so that to seprate them into name,==,swanand if input is name=\"swanand\".\n\n    //We define such elements as impurites. We process them, bring them into a suitable form and push to cleaned_spircedata\n\n    //This is our cleaning factory\n\n    if (!element.includes('==') && (element.indexOf('=\"') > -1 || element.indexOf('=') > 0 || element.charAt(0) == '=') && element != '==') {\n      impurities.push(element); //push such element as impurity in impurities\n\n      let elements = element.split('=');\n      let index = cleaned_sourcedata.length;\n\n      cleaned_sourcedata[index] = elements[0];\n      cleaned_sourcedata[index + 1] = '=';\n      cleaned_sourcedata[index + 2] = elements[1];\n    }\n\n    //as long as element is pure, push it to new and clean version of sourcedata\n    if (!impurities.includes(element)) {\n      cleaned_sourcedata.push(element);\n    }\n\n    //\n  });\n\n  //removing empty \"\" values for final version of sourcedata\n  //SECTION FInal sourcedata cleaning\n\n  cleaned_sourcedata = cleaned_sourcedata.filter(function (item) {\n    return item !== '';\n  });\n\n  return cleaned_sourcedata;\n}\n\nfunction GetcleanedExpression(expression) {\n  expression = expression.replace(/ /g, '');\n\n  expression = RemoveQuotes(expression);\n  expression = expression.replace(/\\(/g, '');\n  expression = expression.replace(/\\)/g, '');\n\n  return expression;\n}\n\n//To convert 'a+b-c*d' into ['a','+','-','c','*','d']\n\nfunction SplitElementsArray(element, multiCal) {\n  element = multiCal ? element : RemoveBrackets(element);\n\n  if (IsConditionalOperator(element)) {\n    element = element.replace(/' '/g, '');\n  }\n  //get index of operation from updated tokens, as a reference\n\n  var StringVar = []; // here StrVar values will get pushed\n  var StrVar = ''; // its used to read var values of any type (anna,a,bad,x etc.) and push it to StringVar\n  //  var HindiRegex = /(?:^|\\s)[\\u0900-\\u097F]+?(?:\\s|$)/g\n\n  for (let j = 0; j < element.length; j++) {\n    // find if element[j] is alphabet\n\n    let flag = false;\n\n    if (/^[A-Z]+$/i.test(element[j]) || element[j] == '[' || element[j] == ']' || element[j] == '\"' || element[j] == \"'\" || isNumber(element[j])) {\n      StrVar = StrVar + element[j]; //keep on pushing for long variable names as strings e.g hello, kalaam\n\n      flag = true;\n    }\n\n    if (element[j] == ')' || element[j] == '(') {\n      StringVar.push(element[j]);\n      flag = true;\n    }\n\n    //to solve [\"Age \"] into [\"Age\"], so that it can correctly find its value in updated_tokens\n\n    if (element[j] == ' ' && element[j + 1] != '+') {\n      StrVar = StrVar + element[j];\n      flag = true;\n    }\n\n    //for checking equivalency\n    if (element[j] == '=' && element[j + 1] == '=') {\n      StringVar.push(StrVar);\n\n      StringVar.push(element[j] + element[j + 1]);\n\n      StrVar = '';\n      flag = true;\n\n      j = j + 1;\n    }\n\n    //for checking !=\n    if (element[j] == '!' && element[j + 1] == '=') {\n      StringVar.push(StrVar);\n\n      StringVar.push(element[j] + element[j + 1]);\n\n      StrVar = '';\n      flag = true;\n    }\n\n    if (IsSpecialChar(element, j)) {\n      StringVar.push(StrVar); //push whatever string we have got because it's a string now, cant push operators with it\n\n      //finding the calculations that required brackets and adding them\n\n      if (element[j + 1] != ')') {\n        StringVar.push(element[j]); // fixing the bias\n      }\n\n      StrVar = ''; // emptyig the StrVar for next variable\n      flag = true;\n    }\n\n    //pushing hindi chars here\n    //UPDATED\n\n    if (flag == false) {\n      StrVar = StrVar + element[j];\n\n      flag = true;\n    }\n\n    if (element[j + 1] == null) {\n      StringVar.push(StrVar); //fixing bias for last element\n\n      flag = true;\n    }\n  }\n\n  return StringVar;\n}\n\n//get the start of loop in tokens array\n\nfunction getLoopIndexStart(mutable_tokens, j, check, setIndex) {\n  while (mutable_tokens[j].value != check) {\n    if (mutable_tokens[j + 1].value == check) {\n      setIndex = j + 1;\n    }\n\n    j++;\n  }\n  return setIndex;\n}\n\n//this is how we handle mulitiple conditions like अगर (ageone==10 && AverageAge<1000 && agetwo>100 || ageone==10) OR (ageone==10 )\n\nfunction handlemultConditions(element) {\n  for (let i = 0; i < element.length; i++) {\n    if (element.charAt(i) == '&' || element.charAt(i) == '|') {\n      let condition = element.substring(0, i + 2);\n\n      let SweepedElement = element.replace(condition, '');\n      let operator = '';\n\n      if (element.charAt(i) == '&') {\n        condition = condition.replace('&&', '');\n        operator = '&&';\n      } else if (element.charAt(i) == '|') {\n        condition = condition.replace('||', '');\n        operator = '||';\n      }\n\n      return {\n        SweepedElement,\n        condition,\n        operator,\n      };\n    }\n  }\n}\n\n//For operarions like Numbers.पुश(23)\n\nfunction AddElementToArray(Sourcedata, index, updated_tokens, ExecutionStack, LinebylineSourcedata) {\n  let token = Sourcedata[index].value;\n\n  token = token.replace('पुश', '');\n  let Split = token.split('.');\n  let Array = Split[0];\n  let ElementtoPush = RemoveBrackets(Split[1]);\n\n  if (ElementtoPush.charAt(0) == '\"' || ElementtoPush.charAt(0) == \"'\") {\n    ElementtoPush = ElementtoPush;\n  } else {\n    ElementtoPush = updated_tokens.find((el) => el.name == ElementtoPush).value;\n  }\n\n  let ArrayEl = updated_tokens.find((el) => el.name == Array);\n\n  let ArrayValue = ArrayEl.value;\n  if (ArrayValue == '[]') {\n    ArrayValue = ArrayValue.split(',');\n  }\n  ArrayValue.push(ElementtoPush);\n\n  let indexofArray = updated_tokens.indexOf(ArrayEl);\n\n  ArrayValue = ArrayValue.filter((el) => el != '[]');\n\n  updated_tokens[indexofArray].value = ArrayValue;\n\n  let message = 'आपने ' + '\"' + ElementtoPush + '\"' + ' को ' + +'\"' + Array + '\"' + ' इस बकेट(Array) में दर्ज(Store) करवाया है| ';\n\n  let expression = Sourcedata[index].value;\n  //\n\n  let Linenumber = LinebylineSourcedata.indexOf(expression);\n  Linenumber += 1;\n\n  AddtoExecutionStack(ExecutionStack, 'इनपुट', 'किसी नई VALUE को स्वीकार करना ', Array, ElementtoPush, message, Linenumber);\n}\n\nfunction AcceptInputandSetValue(tokens, index, updated_tokens, ExecutionStack, LinebylineSourcedata) {\n  console.log('index:', index);\n  console.log('tokens:', tokens);\n  let SetInputValueAs = tokens[index].AcceptAs;\n\n  var value = prompt('आप ' + '\"' + SetInputValueAs + '\"' + ' को क्या किंमत देना चाहते हो ?'); // eslint-disable-line\n\n  updated_tokens.push({\n    name: SetInputValueAs,\n\n    value: value,\n  });\n  console.log('updated_tokens:', updated_tokens);\n\n  let message = 'आपने ' + '\"' + SetInputValueAs + '\"' + ' को ' + '\"' + value + '\"' + ' ये Value देकर Computer के Memory में दर्ज(Store) करवाया है| ';\n\n  let expression = 'इनपुट(' + SetInputValueAs + ')';\n\n  let Linenumber = LinebylineSourcedata.indexOf(expression);\n  Linenumber += 1;\n\n  AddtoExecutionStack(ExecutionStack, 'इनपुट', 'किसी नई VALUE को स्वीकार करना ', SetInputValueAs, value, message, Linenumber);\n}\n\n//One of the most frequently needed function\n\n//it is used to calculate variable values like x= y*100 (y*100 will be calculated here)\n\n//or Array[i]= x+ageone. (x+ageone) is caluculated here\n\n//If you are not getting the values right, this is where you should start debugging\n\nfunction CalculateValues(calculation, j, updated_tokens, multiCal) {\n  var result;\n  try {\n    var calculationArray = SplitElementsArray(calculation, multiCal);\n\n    var StringVar = SetValues(calculationArray, updated_tokens);\n\n    let joinStringVar = StringVar.join('');\n\n    let NewStringVar = '';\n    //evaluate the exepression as it is when multical is true\n    //for expressions like c=(ageone+agetwo)/2 + (ageone+agetwo)*2\n\n    if (isNumber(joinStringVar.charAt(0)) || multiCal) {\n      NewStringVar = eval(joinStringVar);\n    }\n\n    //Not realted to numbers at all but strings\n    else if (!isNumber(joinStringVar.charAt(0))) {\n      StringVar.forEach((el) => {\n        if (el != '+') {\n          el = el.toString();\n          NewStringVar = NewStringVar + el;\n        }\n      });\n    } else {\n      StringVar = StringVar;\n    }\n\n    result = StringVar.length > 1 ? NewStringVar : StringVar;\n  } catch (e) {\n    //if c=a+b, and either b,a is undefined\n    result = e;\n  }\n\n  return result;\n}\n\n//Have to move this two functions to Pushfunctions.js\n\nfunction PushSetArrayIndexValue(value, tokens, data, i) {\n  tokens.push({\n    type: 'SetArrayIndexValue',\n    value: value,\n    ValueToSet: data[i + 2], //skipping =\n  });\n}\n\nfunction PushGetArrayIndexValue(value, tokens) {\n  tokens.push({\n    type: 'GetArrayIndexValue',\n    value: value,\n  });\n}\n\n//Performs only Array Operations\n\n//converts Array[a] into [Array, a]\n\n//This helps us to find their respective values easily in updated_tokens\n\nfunction CreateArrayElement(Value, iterator) {\n  let ArrayElement = RemoveBrackets(Value);\n\n  //Seprating out index identifier. a from Array[a]\n  let element = ArrayElement;\n  element = element.replace(']', '');\n\n  let Split = element.split('[');\n\n  Split[1] = iterator;\n\n  Split = Split.join('[');\n\n  Split = Split + ']';\n  ArrayElement = Split;\n\n  ArrayElement = ArrayElement.replace(/' '/g, '');\n\n  return ArrayElement;\n}\n\n//This function is used to get array or string elements. e.g Array[2], String[5]\n\n//Heavily used by compiler in loops\n\nfunction SetArrayorStringElement(OriginalElement, ArrayElement, updated_tokens, iterator, NewValue, tokens, ExecutionStack, LinebylineSourcedata) {\n  let variable = ArrayElement;\n\n  ArrayElement = ArrayElement.replace(']', '');\n\n  let Split = ArrayElement.split('[');\n\n  let indexCollected = Split[1];\n\n  let Element = updated_tokens.find((el) => el.name == NewValue);\n\n  //If element is an assigned variable. Find the value and set it.\n\n  if (Element) {\n    if (isCalculation(NewValue)) {\n      // This is to set x= y*100, Array[i]= x+ageone.\n\n      let token = tokens.find((el) => el.value == NewValue);\n      let j = tokens.indexOf(token) - 1;\n\n      let value = CalculateValues(NewValue, j, updated_tokens);\n\n      NewValue = value;\n    }\n\n    NewValue = Element.value;\n  }\n\n  if (iterator == true) {\n    //for Array[a]=a\n\n    if (!isCalculation(NewValue)) {\n      NewValue = indexCollected;\n    }\n  }\n\n  //if fresh newvalue is foumd. the one which doesnt yet exist in the program, then run this.\n  else {\n    NewValue = NewValue;\n  }\n\n  let token = updated_tokens.find((el) => el.name == Split[0]);\n\n  let index = updated_tokens.indexOf(token);\n\n  //updated_tokens values will also get updated thrugh this reference\n  let value = token.value;\n\n  value = value.toString();\n\n  value = value.replace(']', '');\n  value = value.replace('[', '');\n  value = value.split(',');\n\n  if (iterator == true) {\n    //This is for Array[a]=a\n\n    value[indexCollected] = indexCollected;\n  } else {\n    //Run when iterator is not needed. iterator is present in ArrayEleMENT ALREADY. This is for Array[i]='Swanand'\n\n    value[indexCollected] = NewValue;\n  }\n\n  //converting array back into the string representation of it for better printabillity\n\n  updated_tokens[index].value = '[' + value.toString() + ']';\n\n  let message = ' Computer ने, ' + '\"' + variable + '\"' + ' को, ' + '\"' + value[indexCollected] + '\"' + ' ये VALUE दे कर अपने Memory में दर्ज(Store) करवाया है |';\n\n  let expression = OriginalElement;\n\n  expression = GetcleanedExpression(expression);\n\n  LinebylineSourcedata.forEach((el, index) => {\n    el = GetcleanedExpression(el);\n\n    if (el == expression) {\n      AddtoExecutionStack(ExecutionStack, '=', ' किसी VARIABLE को नई VALUE सेट करना   ', variable, value[indexCollected], message, index + 1);\n    }\n  });\n  // let Linenumber=''\n}\n\n//Printing a specific array element like Array[0], Array[3] etc.\n\n//Printing a dynamic array element like Array[i], Array[i+1] etc.\n\nfunction GetArrayorStringElement(element, updated_tokens, NewValue) {\n  element = element.replace(']', '');\n\n  let Split = element.split('[');\n\n  let indexCollected = Split[1];\n\n  if (isNumber(indexCollected)) {\n    let token = updated_tokens.find((el) => el.name == Split[0]);\n\n    let index = updated_tokens.indexOf(token);\n\n    let value = token.value.toString();\n\n    if (token.type == 'Array') {\n      value = value.replace(']', '');\n      value = value.replace('[', '');\n      value = value.split(',');\n\n      if (NewValue != undefined) {\n        if (!isNumber(NewValue)) {\n          NewValue = RemoveQuotes(NewValue);\n          NewValue = NewValue.replace(/'/g, '');\n          NewValue = NewValue.replace(/‘/g, '');\n        } else {\n          NewValue = NewValue;\n        }\n\n        value[indexCollected] = NewValue;\n\n        updated_tokens[index].value = value;\n      } else {\n        value = value[indexCollected];\n      }\n    } else if (token.type == 'string' || token.type != 'Array') {\n      value = value.charAt(indexCollected);\n    }\n\n    return value;\n  }\n}\n\n//Needs improvement\n\nfunction ForLoopArrayorStringOutput(elementValue, iterator, updated_tokens, global) {\n  let CurrentElement = '';\n  CurrentElement = elementValue.name + '[' + iterator + ']';\n  //Foundvalue is decided in the function depending upon the type.\n  //if it's array run array[2], if its string run string.charAt(2)\n  let FoundValue = GetArrayorStringElement(CurrentElement, updated_tokens);\n\n  global.output = global.output + FoundValue + '\\n';\n\n  return;\n}\n\n//Move it to typechecking.js\n\nfunction isNumber(element) {\n  if (/^[0-9]*$/gm.test(element)) {\n    return true;\n  }\n}\n\n//one of the heavily used function\n\n//converts ['a','+','b'] into [a+b] and then into [23,+,7] provided a=23 and b=7\n\nfunction SetValues(StringVar, updated_tokens) {\n  StringVar.forEach((el, i) => {\n    el = el.replace(/\\ /g, '');\n\n    if (el.charAt(el.length - 1) == ']') {\n      let ArrayElementValue = GetArrayorStringElement(el, updated_tokens);\n\n      ArrayElementValue = ArrayElementValue.replace(/['\"]+/g, '');\n\n      StringVar[i] = ArrayElementValue;\n    }\n\n    //finding variable value here\n\n    let token = updated_tokens.find((element) => element.name == el);\n\n    if (token != undefined) {\n      // if exists set it's value\n      StringVar[i] = token.value;\n    }\n  });\n\n  return StringVar;\n}\n\n//ANCHOR\n//Now we hae converted found \"a+b-d\" into [a,+,b,-,d]\n\n//Now lets run a loops on it to convert into [5,+,6,-,7]\n\n//Updated_tokens is updated by replacing \"value:a+b-d\" with \"value:5+6-7\".\n//after eval function it will be set as \"value:2\"\n\nfunction UpdateUpdated_tokenswithValues(payload) {\n  let StringVar = payload;\n\n  //run if it's arithmetic operation like [\"5+6-7\"]\n  if (isNumber(StringVar[0])) {\n    let value = eval(StringVar.join(''));\n\n    return value;\n  } else if (StringVar[1] == '==') {\n    let a = StringVar[0].toString();\n    let b = StringVar[2].toString();\n\n    a = a.replace(/\"/g, '');\n    a = a.replace(/'/g, '');\n\n    b = b.replace(/'/g, '');\n    b = b.replace(/\"/g, '');\n\n    let value = eval(a == b);\n\n    return value;\n  }\n\n  //run if it's String operation like [\"reddit\",\"+\", \"is goat\"]\n  else {\n    if (StringVar.includes('+')) {\n      StringVar[StringVar.indexOf('+')] = ' ';\n    }\n\n    let value = StringVar.join('');\n\n    return value;\n  }\n}\n\n//Handle Blocks is a function which takes care of nested block by taking care of nested '{' and '}' brackets\n\n//it uses the stack to push and pop brackets to accurately identify start and the end of the block\n\nfunction HandleBlocks(mutable_tokens, j, StoreResult) {\n  //StoreResult is used to push data into it in case of forloop or while loop conetext\n\n  //for a normal block like conditional block it might not need to be used yet\n\n  let ArrayBrackets = [];\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (mutable_tokens[j].value == '{') {\n      ArrayBrackets.push({\n        type: '{',\n        index: j,\n      });\n\n      if (StoreResult != undefined) {\n        StoreResult.push(mutable_tokens[j]);\n      }\n    } else if (mutable_tokens[j].value == '}') {\n      //As soon as open bracket is found, pop the last arraybracket stack value\n      //that's the match\n\n      let x = ArrayBrackets.pop();\n\n      if (StoreResult != undefined) {\n        StoreResult.push(mutable_tokens[j]);\n\n        mutable_tokens[x.index].startIndex = x.index;\n        mutable_tokens[x.index].EndIndex = j;\n      }\n\n      //set start and end index value for that { } block\n      mutable_tokens[x.index].startIndex = x.index;\n      mutable_tokens[x.index].EndIndex = j;\n      if (ArrayBrackets.length == 0) {\n        //As soon as stack is empty we have finished our last lblock\n\n        break;\n      }\n    } else {\n      if (StoreResult != undefined) {\n        StoreResult.push(mutable_tokens[j]);\n      }\n    }\n\n    j++;\n  }\n\n  return {\n    StoreResult,\n    j,\n  };\n}\n\n//Handles conditional statements\n\n//It does not return true or false rather it tells us whether to skip the execution or continue execution depending upon truth value of condition\n\n//If true 'i' is set to current index position, if false 'i' is skipped until the end of conditional block/\n\nfunction HandleConditions(sourcedata, i, updated_tokens) {\n  let element = sourcedata[i].value;\n\n  //let token= updated_tokens.find(el=> el.originalvalue==sourcedata[i].value)\n\n  let SplitArray = SplitElementsArray(element);\n\n  let Values = SetValues(SplitArray, updated_tokens);\n\n  let ForLoopConditionValue = UpdateUpdated_tokenswithValues(Values);\n\n  if (ForLoopConditionValue == false) {\n    while (sourcedata[i + 1].value != '}') {\n      //tokens.splice(i+1, 1);\n\n      //No need to delete tokens, we are iust skipping over the values so that they won't be printed or run\n\n      i++;\n    }\n\n    return i;\n  }\n}\n\n//Handly function to split and join Arrays\n\nfunction SplitandJoin(array, output, element) {\n  array[1] = output;\n\n  let Joinarray = array.join('[') + ']';\n  element = Joinarray;\n\n  return element;\n}\n\nvar AccumulateValue = '';\n\nfunction ResetValue() {\n  AccumulateValue = '';\n}\n\n//One of the most important functions\n\n//Takes care of all kind of assignments provided in raw sourcecode\n\n//Message=\"Hello World\", Numbers=[1,2,3,4,5], Numbers[2]=23 etc.\n\n//If a certain value is not being assigned properly start debugiing here\n\nfunction AssignorUpdateValues(sourcedata, i, updated_tokens, iterator, OriginalIterator, global, ExecutionStack, LinebylineSourcedata) {\n  let variable = sourcedata[i - 1].value;\n\n  let varvalue = sourcedata[i + 1].value;\n\n  var FinalValue = '';\n\n  if (varvalue == '\"' || varvalue == \"'\") {\n    varvalue = ' ';\n  }\n\n  //if someone accidenlty types Name=इनपुट or any other primary keywords\n\n  function AssignmentError(value, keywords) {\n    if (value != '') {\n      for (let x in keywords) {\n        if (keywords[x].includes(value)) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }\n  }\n\n  //checkAssignmentError(varvalue, ActiveLangugaeKeywords);\n\n  var error = AssignmentError(varvalue, ActiveLangugaeKeywords);\n\n  if (error) {\n    let error = 'Assignment error in ' + '\"' + variable + ' = ' + '\"';\n\n    global.error.push(error);\n  }\n\n  let varvalueType = sourcedata[i + 1].type;\n\n  function findvalueinMemory(v) {\n    return updated_tokens.find((el) => el.name == v);\n  }\n\n  let memory_value = findvalueinMemory(varvalue);\n\n  //if a=b and user haven't defined b yet\n  //doesn't work on a=b+c, where b is undefined, calculateValues function takes care of that\n\n  function checkifUndefined(v, mv, type) {\n    if (type == 'variable' && !isNumber(v) && mv == undefined) {\n      return `Cannot set ${variable} to undefined : ${v} is undefined `;\n    } else {\n      return false;\n    }\n  }\n\n  let undefined_error = checkifUndefined(varvalue, memory_value, varvalueType);\n\n  //if we have any undefined variables\n  if (undefined_error != false) {\n    global.error.push(undefined_error);\n  }\n\n  //to count the length, Numbers.संख्या()s\n  else if (varvalue.includes('संख्या')) {\n    let Split = varvalue.split('.');\n\n    let item = Split[0];\n\n    let Itemvalue = updated_tokens.find((el) => el.name == item).value;\n\n    if (Itemvalue.includes('[')) {\n      Itemvalue = Itemvalue.toString().split(',');\n    } else if (Itemvalue.length == 1) {\n      Itemvalue = Itemvalue;\n    } else {\n      Itemvalue = Itemvalue.toString();\n    }\n\n    let ItemvalueLength = Itemvalue.length;\n\n    FinalValue = ItemvalueLength;\n\n    updated_tokens.push({\n      name: variable,\n\n      value: ItemvalueLength,\n\n      identifier: i,\n      type: 'CalLength',\n    });\n  }\n\n  //this runs only for operations like x=Numbers[a]\n  else if (varvalueType == 'GetArrayIndexValue') {\n    let n = updated_tokens.find((el) => el.name == variable);\n\n    let index = updated_tokens.indexOf(n);\n\n    //Iterator is used only when we are looping over provided index not for the index that needs to be calculated\n    let element = varvalue.replace(']', '');\n\n    if (element.includes('+')) {\n      var Split = element.split('+');\n    } else if (element.includes('-')) {\n      var Split = element.split('-');\n    }\n\n    var flag = false;\n\n    //For operations like Name=Name+ Array[i]\n\n    if (element.includes('+') || (element.includes('-') && !Split[0].includes('['))) {\n      flag = true;\n\n      let token = updated_tokens.find((el) => el.name == Split[0]);\n      let index = updated_tokens.indexOf(token);\n\n      let ArrayItem = Split[1].split('[');\n\n      let output = CalculateValues(ArrayItem[1], i, updated_tokens);\n\n      let ArrayElement = SplitandJoin(ArrayItem, output, element);\n\n      //Get Numbers[3] value and now set it to our variable x\n      let value = GetArrayorStringElement(ArrayElement, updated_tokens);\n\n      AccumulateValue += value;\n\n      updated_tokens[index].value = AccumulateValue;\n      FinalValue = AccumulateValue;\n    } else {\n      var Split = element.split('[');\n    }\n\n    //for operations like x= Array[i+1] etc\n\n    if ((Split[1].includes('-') || Split[1].includes('+')) && !Split[1].includes('[')) {\n      let output = CalculateValues(Split[1], i, updated_tokens);\n\n      element = SplitandJoin(Split, output, element);\n    }\n\n    let token = updated_tokens.find((el) => el.name == Split[1]);\n\n    //for operations like Array[Age]. Here index is an already defined variable\n    if (token != undefined && OriginalIterator != Split[1] && token.name != '') {\n      element = SplitandJoin(Split, token.value, element);\n    }\n\n    //for operations like Array[i]: Looping over original index value\n    else if (OriginalIterator == Split[1]) {\n      element = SplitandJoin(Split, iterator, element);\n    }\n\n    let ArrayElement = element;\n\n    //Get Numbers[3] value and now set it to our variable x\n    let value = GetArrayorStringElement(ArrayElement, updated_tokens);\n    //\n    if (value != undefined) {\n      value = RemoveQuotes(value);\n    }\n\n    //\n\n    if (n != undefined && flag == false) {\n      updated_tokens[index].value = value;\n\n      FinalValue = value;\n    } else if (flag == false) {\n      updated_tokens.push({\n        name: variable,\n\n        value: value,\n\n        identifier: i,\n        type: sourcedata[i + 1].type,\n      });\n\n      FinalValue = value;\n    }\n  } else {\n    //if we are setting already defined value to new variable\n    let m = updated_tokens.find((el) => el.name == varvalue);\n\n    if (m != undefined) {\n      varvalue = m.value;\n\n      FinalValue = varvalue;\n    }\n\n    let n = updated_tokens.find((el) => el.name == variable);\n\n    if (n == undefined) {\n      //to check if the assigned value needs to be calculated. this is futher diveded in two types\n\n      if (isCalculation(varvalue)) {\n        //type 1- Age= 2020-2000\n\n        if (isPureEval(varvalue)) {\n          let value = eval(varvalue);\n\n          //write function for this, so repeatable\n          updated_tokens.push({\n            name: variable,\n\n            value: value,\n\n            identifier: i,\n            type: sourcedata[i + 1].type,\n          });\n\n          FinalValue = value;\n        }\n\n        //type 2- X= ageone+agetwo\n        else {\n          //performing the calculation\n          let multiCal = sourcedata[i + 1].multiCal;\n          let value = CalculateValues(varvalue, i, updated_tokens, multiCal);\n\n          updated_tokens.push({\n            name: variable,\n\n            value: value,\n\n            identifier: i,\n            type: sourcedata[i + 1].type,\n          });\n\n          FinalValue = value;\n        }\n      }\n\n      //if there is no need to calculate, push values as it is\n      else if (!isCalculation(varvalue)) {\n        updated_tokens.push({\n          name: variable,\n\n          value: varvalue,\n\n          identifier: i,\n          type: sourcedata[i + 1].type,\n        });\n\n        FinalValue = varvalue;\n      }\n    }\n\n    //if it's already assgined, reassign it with updated value\n    else {\n      varvalue = varvalue.toString();\n\n      if (varvalue.includes('-') || varvalue.includes('%') || varvalue.includes('+') || varvalue.includes('/') || varvalue.includes('*')) {\n        //\n\n        let NewValue = CalculateValues(varvalue, i, updated_tokens);\n\n        n.value = NewValue;\n\n        FinalValue = NewValue;\n      } else {\n        let index = updated_tokens.indexOf(n);\n        updated_tokens[index].value = varvalue;\n\n        FinalValue = varvalue;\n      }\n    }\n  }\n\n  //\n\n  let message = '';\n\n  if (isCalculation(sourcedata[i + 1].value) || sourcedata[i + 1].value.includes('संख्या')) {\n    message =\n      ' Computer सबसे पहले जाँच करता है की क्या, ' +\n      '\"' +\n      sourcedata[i + 1].value +\n      '\"' +\n      ' को सुलझाने(Solve) करने की ज़रुरत है?' +\n      '\\n' +\n      ' अगर हा, तो Computer ' +\n      '\"' +\n      sourcedata[i + 1].value +\n      '\"' +\n      ' को Solve करके, ' +\n      '\"' +\n      variable +\n      '\"' +\n      ' के नाम से Memory में दर्ज(Store)कर देगा | ' +\n      '\\n' +\n      ' यहापर , ' +\n      '\"' +\n      sourcedata[i + 1].value +\n      '\"' +\n      ' की कीमत (Value) , ' +\n      '\"' +\n      FinalValue +\n      '\"' +\n      ' आती है |' +\n      '\\n' +\n      ' इसलिए, Computer ' +\n      '\"' +\n      variable +\n      '\"' +\n      ' को ' +\n      '\"' +\n      FinalValue +\n      '\"' +\n      ' ये VALUE दे कर अपने Memory में दर्ज(Store) कर देता है |';\n  } else {\n    message = ' Computer ने, ' + '\"' + variable + '\"' + ' को, ' + '\"' + varvalue + '\"' + ' ये VALUE दे कर अपने Memory में दर्ज(Store) करवाया है |';\n  }\n\n  //This is the experession whcih is getting evaluated.\n\n  let expression = variable + '=' + varvalue;\n  //\n  expression = GetcleanedExpression(expression);\n\n  LinebylineSourcedata.forEach((el, index) => {\n    el = el.replace(/ /, '');\n\n    el = GetcleanedExpression(el);\n\n    if (el == expression) {\n      AddtoExecutionStack(ExecutionStack, '=', 'किसी VARIABLE को नई VALUE सेट करना   ', variable, varvalue, message, index + 1);\n    }\n  });\n}\n\n//GetConditionValue is our goto function to evaluate a condition to true or false\n\nfunction GetConditionValue(element, updated_tokens) {\n  var ConditionValue = false;\n\n  if (element.includes('&&') || element.includes('||')) {\n    let MultConditionsCount = parseInt(Count('&', element)) + parseInt(Count('|', element));\n\n    //this will be our final values\n    //converted as true&&false&&true||true\n    let BuiltMultConditonWithValues = '';\n    let LastResult = {};\n\n    //running for loop on original condition to calculates each individual condition and adding its value in BuiltMultConditonWithValues\n\n    for (let i = 0; i <= MultConditionsCount; i++) {\n      if (i == MultConditionsCount) {\n        let condition = LastResult.SweepedElement;\n        condition = condition.replace(/ /g, '');\n\n        let SplitArray = SplitElementsArray(condition);\n\n        let Values = SetValues(SplitArray, updated_tokens);\n\n        ConditionValue = UpdateUpdated_tokenswithValues(Values);\n\n        BuiltMultConditonWithValues = BuiltMultConditonWithValues + ConditionValue;\n      } else {\n        let result = handlemultConditions(element);\n\n        LastResult = result;\n\n        element = result.SweepedElement;\n        let condition = result.condition;\n        condition = condition.replace(/ /g, '');\n\n        let SplitArray = SplitElementsArray(condition);\n\n        let Values = SetValues(SplitArray, updated_tokens);\n\n        ConditionValue = UpdateUpdated_tokenswithValues(Values);\n\n        BuiltMultConditonWithValues = BuiltMultConditonWithValues + ConditionValue + result.operator;\n      }\n    }\n\n    //setting the final condition value in cases like अगर (ageone==10 && AverageAge<1000 && agetwo>100 || ageone==10)\n\n    ConditionValue = eval(BuiltMultConditonWithValues);\n  } else {\n    //let token= updated_tokens.find(el=> el.originalvalue==mutable_tokens[j].value)\n\n    let SplitArray = SplitElementsArray(element);\n    //\n\n    let Values = SetValues(SplitArray, updated_tokens);\n\n    Values = Values.filter(function (item) {\n      return item !== '' && item != \"'\" && item != \"='\" && item != '\"';\n    });\n\n    //Setting the final condition value in cases like अगर (ageone==10)\n\n    //\n    ConditionValue = UpdateUpdated_tokenswithValues(Values);\n  }\n\n  return ConditionValue;\n}\n\n//Getting every single information about our forloop\n\nfunction ForLoopSetMetadata(tokens, i, updated_tokens) {\n  var ForLoopMetaData = tokens[i + 1];\n\n  //Splitting the ForLoopMetaData values individually\n  var iterator = ForLoopMetaData.iterator;\n\n  var element = ForLoopMetaData.value;\n  var IterationStart = parseInt(ForLoopMetaData.iterationStart);\n\n  var IterationEnd = parseInt(ForLoopMetaData.iterationEnd);\n\n  //pushing index\n\n  //checking if iteration end is an predefined variable\n\n  let token = updated_tokens.find((el) => el.name == ForLoopMetaData.iterationEnd);\n\n  if (token != undefined) {\n    IterationEnd = parseInt(token.value);\n  }\n\n  // var ForLoopSourcedata = ForLoopMetaData.ForLoopSourcedata\n\n  var elementValue = updated_tokens.find((el) => el.name == element);\n\n  var elementLength = 0;\n\n  var ForLoopSourcedataIndexStart = 0;\n\n  var OriginalIterator = ForLoopMetaData.iterator;\n\n  // Run if start and end parameters are not given e.g दुहराओ a को  Name मे\n  // This is ran just to get Start and End parameters as they are not provided\n  if (ForLoopMetaData.iterationEnd == undefined) {\n    //run if element is array\n    if (elementValue.type == 'Array') {\n      elementLength = elementValue.value.split(',').length;\n\n      IterationStart = 0;\n      IterationEnd = elementLength - 1;\n    }\n\n    //run if element is String\n    else {\n      elementLength = elementValue.value.length;\n      IterationStart = 0;\n      IterationEnd = elementLength - 1;\n    }\n  }\n\n  var Cycle = IterationEnd;\n\n  return {\n    ForLoopSourcedataIndexStart,\n    Cycle,\n    OriginalIterator,\n    IterationStart,\n    IterationEnd,\n    iterator,\n    element,\n    elementValue,\n  };\n}\n\n//To resolve operations like Array[a]=a+2 in loops and in plain context\n\nfunction SetArrayIndexValue(SourceData, i, j, CompleteTokenValueList, tokens, OriginalIterator, iterator, ExecutionStack, LinebylineSourcedata) {\n  let Value = SourceData[i].value;\n\n  let ValueToSet = SourceData[i].ValueToSet;\n\n  let OriginalElement = Value + '=' + ValueToSet;\n\n  let element = RemoveBrackets(Value);\n\n  var ArrayElement = '';\n\n  //Seprating out index identifier. xyz from Array[xyz]\n\n  element = element.replace(']', '');\n\n  let Split = element.split('[');\n\n  // run if we need to set direct Array element value. like Array[2]= xyx\n  if (isNumber(Split[1])) {\n    Split = Split.join('[');\n    //\n\n    Split = Split + ']';\n\n    ArrayElement = Split;\n    //\n\n    NewValueToSet = CalculateValues(ValueToSet, j, CompleteTokenValueList);\n\n    SetArrayorStringElement(OriginalElement, ArrayElement, CompleteTokenValueList, false, NewValueToSet, tokens, ExecutionStack, LinebylineSourcedata);\n  }\n\n  // run if we need to dynamically set Array element value. like Array[i]= xyx\n  //CreateArrayElement function will create dynamic Array values. like Array[0], Array[1] etc.\n  else {\n    let index = Split[1];\n\n    // setting iterator as per user input\n    //for iterator like count=count + 1, Array[count]\n\n    let newInterator = 0;\n\n    let token = CompleteTokenValueList.find((el) => el.name == index);\n\n    if (token != undefined) {\n      newInterator = token.value;\n    } else {\n      newInterator = iterator;\n    }\n\n    ArrayElement = CreateArrayElement(Value, newInterator);\n  }\n\n  // this code is written to find operations like Array[a]= a*100+age*a. notice a\n  //find a way to simplify this in long term\n\n  let data = ValueToSet;\n\n  data = data.split('*').toString();\n  data = data.split('+').toString();\n  data = data.split('-').toString();\n  data = data.split('/').toString();\n  data = data.split(',');\n\n  //building a new value to convert a*100+age*a into 5*100+age*a and then sending it to CalculateValues()\n  let NewValueToSet = '';\n\n  if (data.includes(Split[1]) && data.length > 1) {\n    //we have operations like Array[a]= a*100+age*a. notice a\n\n    for (let m = 0; m < ValueToSet.length; m++) {\n      if (ValueToSet[m] == Split[1] && !/^[a-z]+$/i.test(ValueToSet[m + 1])) {\n        // value is been set . replacing index value a with iteartor value 0,1,2, etc.\n        NewValueToSet = NewValueToSet + iterator;\n      } else {\n        NewValueToSet = NewValueToSet + ValueToSet[m];\n      }\n    }\n\n    let iterat = false;\n    //gave it a different name so it would not fuck up with for loop iterator\n\n    NewValueToSet = CalculateValues(NewValueToSet, j, CompleteTokenValueList);\n\n    SetArrayorStringElement(OriginalElement, ArrayElement, CompleteTokenValueList, iterat, NewValueToSet, tokens, ExecutionStack, LinebylineSourcedata);\n  }\n\n  // this condition enables program to only run  Array[a]= xyz when iterator is a. It disallows running Array[blablabla]=xyz\n  if (OriginalIterator == Split[1]) {\n    if (Split[1] == ValueToSet) {\n      let iterator = true;\n\n      SetArrayorStringElement(OriginalElement, ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens, ExecutionStack, LinebylineSourcedata);\n    }\n\n    // for operations like Array[a]=ageone*100\n\n    if (!data.includes(Split[1]) && OriginalIterator == Split[1]) {\n      let iterator = false;\n\n      ValueToSet = CalculateValues(ValueToSet, j, CompleteTokenValueList);\n\n      SetArrayorStringElement(OriginalElement, ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens, ExecutionStack, LinebylineSourcedata);\n    }\n  }\n\n  //might have to add more conditions in the future\n  else {\n    let iterator = false;\n\n    ValueToSet = CalculateValues(ValueToSet, j, CompleteTokenValueList);\n\n    SetArrayorStringElement(OriginalElement, ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens, ExecutionStack, LinebylineSourcedata);\n  }\n}\n\nfunction AddtoExecutionStack(stack, keyword, keywordUse, variable, value, message, Linenumber) {\n  stack.push({\n    keyword: keyword,\n    keywordUse: keywordUse,\n    variable: variable,\n    value: value,\n    message: message,\n    Linenumber: Linenumber,\n  });\n}\n\nexport {\n  IsReservedKeyword,\n  GetCleanSourcedata,\n  GetcleanedExpression,\n  ForLoopSetMetadata,\n  getLoopIndexStart,\n  AddElementToArray,\n  ResetValue,\n  HandleBlocks,\n  HandleConditions,\n  AssignorUpdateValues,\n  PushGetArrayIndexValue,\n  PushSetArrayIndexValue,\n  isArrayOperation,\n  GetConditionValue,\n  CalculateValues,\n  handlemultConditions,\n  CreateArrayElement,\n  SetArrayorStringElement,\n  ForLoopArrayorStringOutput,\n  GetArrayorStringElement,\n  AcceptInputandSetValue,\n  SplitElementsArray,\n  SetValues,\n  UpdateUpdated_tokenswithValues,\n  SetArrayIndexValue,\n  AddtoExecutionStack,\n};\n"]}]}