{"remainingRequest":"/Users/jonny/Desktop/myProjects/Kalaam-core/FE/node_modules/babel-loader/lib/index.js!/Users/jonny/Desktop/myProjects/Kalaam-core/Scripts/main.js","dependencies":[{"path":"/Users/jonny/Desktop/myProjects/Kalaam-core/Scripts/main.js","mtime":1620343647683},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-core/FE/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-core/FE/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/jonny/Desktop/myProjects/Kalaam-core/Scripts/main.js"],"names":["SourceDataReplaceforEasyParsing","ActiveLangugaeKeywords","RemoveQuotes","RemoveBrackets","Count","IsSpecialChar","v","i","IsConditionalOperator","e","includes","IsReservedKeyword","Print","If","isPureEval","element","test","isCalculation","isNumber","charAt","length","isArrayOperation","GetCleanSourcedata","sourcedata","cleaned_sourcedata","impurities","forEach","indexOf","push","elements","split","index","filter","item","GetcleanedExpression","expression","replace","SplitElementsArray","multiCal","StringVar","StrVar","j","flag","getLoopIndexStart","mutable_tokens","check","setIndex","value","handlemultConditions","condition","substring","SweepedElement","operator","AddElementToArray","Sourcedata","updated_tokens","ExecutionStack","LinebylineSourcedata","token","Split","Array","ElementtoPush","find","el","name","ArrayEl","ArrayValue","indexofArray","message","Linenumber","AddtoExecutionStack","AcceptInputandSetValue","tokens","SetInputValueAs","AcceptAs","prompt","CalculateValues","calculation","result","calculationArray","SetValues","joinStringVar","join","NewStringVar","eval","toString","PushSetArrayIndexValue","data","type","ValueToSet","PushGetArrayIndexValue","CreateArrayElement","Value","iterator","ArrayElement","SetArrayorStringElement","OriginalElement","NewValue","variable","indexCollected","Element","GetArrayorStringElement","undefined","ForLoopArrayorStringOutput","elementValue","global","CurrentElement","FoundValue","output","console","log","ArrayElementValue","UpdateUpdated_tokenswithValues","payload","a","b","HandleBlocks","StoreResult","ArrayBrackets","x","pop","startIndex","EndIndex","HandleConditions","SplitArray","Values","ForLoopConditionValue","SplitandJoin","array","Joinarray","AccumulateValue","ResetValue","AssignorUpdateValues","OriginalIterator","varvalue","FinalValue","AssignmentError","keywords","error","varvalueType","findvalueinMemory","memory_value","checkifUndefined","mv","undefined_error","Itemvalue","ItemvalueLength","identifier","n","ArrayItem","m","GetConditionValue","ConditionValue","MultConditionsCount","parseInt","BuiltMultConditonWithValues","LastResult","ForLoopSetMetadata","ForLoopMetaData","IterationStart","iterationStart","IterationEnd","iterationEnd","elementLength","ForLoopSourcedataIndexStart","Cycle","SetArrayIndexValue","SourceData","CompleteTokenValueList","NewValueToSet","newInterator","iterat","stack","keyword","keywordUse"],"mappings":"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","sourcesContent":["import { SourceDataReplaceforEasyParsing, } from '../Scripts/DataCleaning';\n\nimport { ActiveLangugaeKeywords, } from '../Compiler/constants';\n\nimport { RemoveQuotes, RemoveBrackets, Count, } from '../Scripts/Helpers';\n\n//ANCHOR - Important functions to be used while parsing\n\n//Checking if string is empty. The way we check string is empty or not boils down to how cleaned_sourcedata sees empty string s\n\n//Needs improvement\n\nfunction IsSpecialChar(v, i) {\n    return (\n        v[i] == '?' ||\n    (v[i] == '=' && v[i + 1] != '=' && v[i - 1] != '=') ||\n    v[i] == '|' ||\n    v[i] == ';' ||\n    v[i] == '&' ||\n    v[i] == '^' ||\n    v[i] == '%' ||\n    v[i] == '$' ||\n    v[i] == '#' ||\n    v[i] == '@' ||\n    v[i] == '!' ||\n    v[i] == ':' ||\n    v[i] == '+' ||\n    v[i] == ',' ||\n    v[i] == '%' ||\n    v[i] == '-' ||\n    v[i + 1] == ')' ||\n    v[i] == '/' ||\n    v[i] == '*' ||\n    v[i] == '>' ||\n    v[i] == '<'\n    );\n}\n\nfunction IsConditionalOperator(e) {\n    return e.includes('>') || e.includes('<') || e.includes('==') || e.includes('!=');\n}\n\nfunction IsReservedKeyword(e) {\n    return (\n        e.includes('दुहराओ') ||\n    e.includes('रचना') ||\n    e.includes('अन्यथा') ||\n    e.includes('इनपुट') ||\n    e.includes('पुश') ||\n    e.includes(ActiveLangugaeKeywords.Print) ||\n    e.includes(ActiveLangugaeKeywords.If) ||\n        /* cleaned_sourcedata[k + 1] == '='*/ e == '}'\n    );\n}\n\n\n\n//Checking if element is a pure evaluation like 1+2, 20*34, 40+6-98 etc\n\nfunction isPureEval(element) {\n    if (/^([-+]?[0-9]*\\.?[0-9]+[\\/\\+\\-\\*])+([-+]?[0-9]*\\.?[0-9]+)*$/gm.test(element)) {\n        return true;\n    }\n}\n\n//Checking if an element is calculation to be performed\n\nfunction isCalculation(element) {\n    if (!isNumber(element)) {\n        if (\n            (element.includes('+') ||\n        element.includes('%') ||\n        element.includes('-') ||\n        element.includes('*') ||\n        element.includes('/')) &&\n      ((element.includes('(') && element.includes(')')) || (!element.includes('(') && !element.includes(')'))) &&\n      element.charAt(element.length - 1) != '+'\n        ) {\n            return true;\n        }\n    }\n}\n\n//removing brackets from element\n\nfunction isArrayOperation(element) {\n    //To find Patterns like Array[2], Array[index] etc\n\n    element = RemoveBrackets(element);\n\n    if (element.charAt(element.length - 1) == ']' && element.includes('[') && element.charAt(0) != '[') {\n        return true;\n    }\n}\n\n//preparing sourcedata for easy parsing by handling new lines, enters etc.\n//cleaning up the data to get a suitable version of sourcedata. it's better to get suitable version because users can type what they wish but we need to maintain\n//integrity of program in every possible condition. So, we clean and refactor raw code to remove unnecessary data.\n\nfunction GetCleanSourcedata(sourcedata, cleaned_sourcedata, impurities) {\n    sourcedata = SourceDataReplaceforEasyParsing(sourcedata);\n\n    sourcedata.forEach((element) => {\n    //finding the elements which has =\" in it so that to seprate them into name,==,swanand if input is name=\"swanand\".\n\n        //We define such elements as impurites. We process them, bring them into a suitable form and push to cleaned_spircedata\n\n        //This is our cleaning factory\n\n        if (\n            !element.includes('==') &&\n      (element.indexOf('=\"') > -1 || element.indexOf('=') > 0 || element.charAt(0) == '=') &&\n      element != '=='\n        ) {\n            impurities.push(element); //push such element as impurity in impurities\n\n            let elements = element.split('=');\n            let index = cleaned_sourcedata.length;\n\n            cleaned_sourcedata[index] = elements[0];\n            cleaned_sourcedata[index + 1] = '=';\n            cleaned_sourcedata[index + 2] = elements[1];\n        }\n\n        //as long as element is pure, push it to new and clean version of sourcedata\n        if (!impurities.includes(element)) {\n            cleaned_sourcedata.push(element);\n        }\n\n    //\n    });\n\n    //removing empty \"\" values for final version of sourcedata\n    //SECTION FInal sourcedata cleaning\n\n    cleaned_sourcedata = cleaned_sourcedata.filter(function(item) {\n        return item !== '';\n    });\n\n    return cleaned_sourcedata;\n}\n\nfunction GetcleanedExpression(expression) {\n    expression = expression.replace(/ /g, '');\n\n    expression = RemoveQuotes(expression);\n    expression = expression.replace(/\\(/g, '');\n    expression = expression.replace(/\\)/g, '');\n\n    return expression;\n}\n\n//To convert 'a+b-c*d' into ['a','+','-','c','*','d']\n\nfunction SplitElementsArray(element, multiCal) {\n    element = multiCal ? element : RemoveBrackets(element);\n\n    if (IsConditionalOperator(element)) {\n        element = element.replace(/' '/g, '');\n    }\n    //get index of operation from updated tokens, as a reference\n\n    var StringVar = []; // here StrVar values will get pushed\n    var StrVar = ''; // its used to read var values of any type (anna,a,bad,x etc.) and push it to StringVar\n    //  var HindiRegex = /(?:^|\\s)[\\u0900-\\u097F]+?(?:\\s|$)/g\n\n    for (let j = 0; j < element.length; j++) {\n    // find if element[j] is alphabet\n\n        let flag = false;\n\n        if (\n            /^[A-Z]+$/i.test(element[j]) ||\n      element[j] == '[' ||\n      element[j] == ']' ||\n      element[j] == '\"' ||\n      element[j] == '\\'' ||\n      isNumber(element[j])\n        ) {\n            StrVar = StrVar + element[j]; //keep on pushing for long variable names as strings e.g hello, kalaam\n\n            flag = true;\n        }\n\n        if (element[j] == ')' || element[j] == '(') {\n            StringVar.push(element[j]);\n            flag = true;\n        }\n\n        //to solve [\"Age \"] into [\"Age\"], so that it can correctly find its value in updated_tokens\n\n        if (element[j] == ' ' && element[j + 1] != '+') {\n            StrVar = StrVar + element[j];\n            flag = true;\n        }\n\n        //for checking equivalency\n        if (element[j] == '=' && element[j + 1] == '=') {\n            StringVar.push(StrVar);\n\n            StringVar.push(element[j] + element[j + 1]);\n\n            StrVar = '';\n            flag = true;\n\n            j = j + 1;\n        }\n\n        //for checking !=\n        if (element[j] == '!' && element[j + 1] == '=') {\n            StringVar.push(StrVar);\n\n            StringVar.push(element[j] + element[j + 1]);\n\n            StrVar = '';\n            flag = true;\n        }\n\n        if (IsSpecialChar(element, j)) {\n            StringVar.push(StrVar); //push whatever string we have got because it's a string now, cant push operators with it\n\n            //finding the calculations that required brackets and adding them\n\n            if (element[j + 1] != ')') {\n                StringVar.push(element[j]); // fixing the bias\n            }\n\n            StrVar = ''; // emptyig the StrVar for next variable\n            flag = true;\n        }\n\n        //pushing hindi chars here\n        //UPDATED\n\n        if (flag == false) {\n            StrVar = StrVar + element[j];\n\n            flag = true;\n        }\n\n        if (element[j + 1] == null) {\n            StringVar.push(StrVar); //fixing bias for last element\n\n            flag = true;\n        }\n    }\n\n    return StringVar;\n}\n\n//get the start of loop in tokens array\n\nfunction getLoopIndexStart(mutable_tokens, j, check, setIndex) {\n    while (mutable_tokens[j].value != check) {\n        if (mutable_tokens[j + 1].value == check) {\n            setIndex = j + 1;\n        }\n\n        j++;\n    }\n    return setIndex;\n}\n\n//this is how we handle mulitiple conditions like अगर (ageone==10 && AverageAge<1000 && agetwo>100 || ageone==10) OR (ageone==10 )\n\nfunction handlemultConditions(element) {\n    for (let i = 0; i < element.length; i++) {\n        if (element.charAt(i) == '&' || element.charAt(i) == '|') {\n            let condition = element.substring(0, i + 2);\n\n            let SweepedElement = element.replace(condition, '');\n            let operator = '';\n\n            if (element.charAt(i) == '&') {\n                condition = condition.replace('&&', '');\n                operator = '&&';\n            } else if (element.charAt(i) == '|') {\n                condition = condition.replace('||', '');\n                operator = '||';\n            }\n\n            return {\n                SweepedElement,\n                condition,\n                operator,\n            };\n        }\n    }\n}\n\n//For operarions like Numbers.पुश(23)\n\nfunction AddElementToArray(Sourcedata, index, updated_tokens, ExecutionStack, LinebylineSourcedata) {\n    let token = Sourcedata[index].value;\n\n    token = token.replace('पुश', '');\n    let Split = token.split('.');\n    let Array = Split[0];\n    let ElementtoPush = RemoveBrackets(Split[1]);\n\n    if (ElementtoPush.charAt(0) == '\"' || ElementtoPush.charAt(0) == '\\'') {\n        ElementtoPush = ElementtoPush;\n    } else {\n        ElementtoPush = updated_tokens.find((el) => el.name == ElementtoPush).value;\n    }\n\n    let ArrayEl = updated_tokens.find((el) => el.name == Array);\n\n    let ArrayValue = ArrayEl.value;\n    if (ArrayValue == '[]') {\n        ArrayValue = ArrayValue.split(',');\n    }\n    ArrayValue.push(ElementtoPush);\n\n    let indexofArray = updated_tokens.indexOf(ArrayEl);\n\n    ArrayValue = ArrayValue.filter((el) => el != '[]');\n\n    updated_tokens[indexofArray].value = ArrayValue;\n\n    let message =\n    'आपने ' + '\"' + ElementtoPush + '\"' + ' को ' + +'\"' + Array + '\"' + ' इस बकेट(Array) में दर्ज(Store) करवाया है| ';\n\n    let expression = Sourcedata[index].value;\n    //\n\n    let Linenumber = LinebylineSourcedata.indexOf(expression);\n    Linenumber += 1;\n\n    AddtoExecutionStack(\n        ExecutionStack,\n        'इनपुट',\n        'किसी नई VALUE को स्वीकार करना ',\n        Array,\n        ElementtoPush,\n        message,\n        Linenumber\n    );\n}\n\nfunction AcceptInputandSetValue(tokens, index, updated_tokens, ExecutionStack, LinebylineSourcedata) {\n    let SetInputValueAs = tokens[index].AcceptAs;\n\n  var value = prompt(\"आप \" + '\"' + SetInputValueAs + '\"' + \" को क्या किंमत देना चाहते हो ?\"); // eslint-disable-line\n\n    updated_tokens.push({\n        name: SetInputValueAs,\n\n        value: value,\n    });\n\n    let message =\n    'आपने ' +\n    '\"' +\n    SetInputValueAs +\n    '\"' +\n    ' को ' +\n    '\"' +\n    value +\n    '\"' +\n    ' ये Value देकर Computer के Memory में दर्ज(Store) करवाया है| ';\n\n    let expression = 'इनपुट(' + SetInputValueAs + ')';\n\n    let Linenumber = LinebylineSourcedata.indexOf(expression);\n    Linenumber += 1;\n\n    AddtoExecutionStack(\n        ExecutionStack,\n        'इनपुट',\n        'किसी नई VALUE को स्वीकार करना ',\n        SetInputValueAs,\n        value,\n        message,\n        Linenumber\n    );\n}\n\n//One of the most frequently needed function\n\n//it is used to calculate variable values like x= y*100 (y*100 will be calculated here)\n\n//or Array[i]= x+ageone. (x+ageone) is caluculated here\n\n//If you are not getting the values right, this is where you should start debugging\n\nfunction CalculateValues(calculation, j, updated_tokens, multiCal) {\n    var result;\n    try {\n        var calculationArray = SplitElementsArray(calculation, multiCal);\n\n        var StringVar = SetValues(calculationArray, updated_tokens);\n\n        let joinStringVar = StringVar.join('');\n\n        let NewStringVar = '';\n        //evaluate the exepression as it is when multical is true\n        //for expressions like c=(ageone+agetwo)/2 + (ageone+agetwo)*2\n\n        if (isNumber(joinStringVar.charAt(0)) || multiCal) {\n            NewStringVar = eval(joinStringVar);\n        }\n\n        //Not realted to numbers at all but strings\n        else if (!isNumber(joinStringVar.charAt(0))) {\n            StringVar.forEach((el) => {\n                if (el != '+') {\n                    el = el.toString();\n                    NewStringVar = NewStringVar + el;\n                }\n            });\n        } else {\n            StringVar = StringVar;\n        }\n\n        result = StringVar.length > 1 ? NewStringVar : StringVar;\n    } catch (e) {\n    //if c=a+b, and either b,a is undefined\n        result = e;\n    }\n\n    return result;\n}\n\n//Have to move this two functions to Pushfunctions.js\n\nfunction PushSetArrayIndexValue(value, tokens, data, i) {\n    tokens.push({\n        type: 'SetArrayIndexValue',\n        value: value,\n        ValueToSet: data[i + 2], //skipping =\n    });\n}\n\nfunction PushGetArrayIndexValue(value, tokens) {\n    tokens.push({\n        type: 'GetArrayIndexValue',\n        value: value,\n    });\n}\n\n//Performs only Array Operations\n\n//converts Array[a] into [Array, a]\n\n//This helps us to find their respective values easily in updated_tokens\n\nfunction CreateArrayElement(Value, iterator) {\n    let ArrayElement = RemoveBrackets(Value);\n\n    //Seprating out index identifier. a from Array[a]\n    let element = ArrayElement;\n    element = element.replace(']', '');\n\n    let Split = element.split('[');\n\n    Split[1] = iterator;\n\n    Split = Split.join('[');\n\n    Split = Split + ']';\n    ArrayElement = Split;\n\n    ArrayElement = ArrayElement.replace(/' '/g, '');\n\n    return ArrayElement;\n}\n\n//This function is used to get array or string elements. e.g Array[2], String[5]\n\n//Heavily used by compiler in loops\n\nfunction SetArrayorStringElement(\n    OriginalElement,\n    ArrayElement,\n    updated_tokens,\n    iterator,\n    NewValue,\n    tokens,\n    ExecutionStack,\n    LinebylineSourcedata\n) {\n    let variable = ArrayElement;\n\n    ArrayElement = ArrayElement.replace(']', '');\n\n    let Split = ArrayElement.split('[');\n\n    let indexCollected = Split[1];\n\n    let Element = updated_tokens.find((el) => el.name == NewValue);\n\n    //If element is an assigned variable. Find the value and set it.\n\n    if (Element) {\n        if (isCalculation(NewValue)) {\n            // This is to set x= y*100, Array[i]= x+ageone.\n\n            let token = tokens.find((el) => el.value == NewValue);\n            let j = tokens.indexOf(token) - 1;\n\n            let value = CalculateValues(NewValue, j, updated_tokens);\n\n            NewValue = value;\n        }\n\n        NewValue = Element.value;\n    }\n\n    if (iterator == true) {\n    //for Array[a]=a\n\n        if (!isCalculation(NewValue)) {\n            NewValue = indexCollected;\n        }\n    }\n\n    //if fresh newvalue is foumd. the one which doesnt yet exist in the program, then run this.\n    else {\n        NewValue = NewValue;\n    }\n\n    let token = updated_tokens.find((el) => el.name == Split[0]);\n\n    let index = updated_tokens.indexOf(token);\n\n    //updated_tokens values will also get updated thrugh this reference\n    let value = token.value;\n\n    value = value.toString();\n\n    value = value.replace(']', '');\n    value = value.replace('[', '');\n    value = value.split(',');\n\n    if (iterator == true) {\n    //This is for Array[a]=a\n\n        value[indexCollected] = indexCollected;\n    } else {\n    //Run when iterator is not needed. iterator is present in ArrayEleMENT ALREADY. This is for Array[i]='Swanand'\n\n        value[indexCollected] = NewValue;\n    }\n\n    //converting array back into the string representation of it for better printabillity\n\n    updated_tokens[index].value = '[' + value.toString() + ']';\n\n    let message =\n    ' Computer ने, ' +\n    '\"' +\n    variable +\n    '\"' +\n    ' को, ' +\n    '\"' +\n    value[indexCollected] +\n    '\"' +\n    ' ये VALUE दे कर अपने Memory में दर्ज(Store) करवाया है |';\n\n    let expression = OriginalElement;\n\n    expression = GetcleanedExpression(expression);\n\n    LinebylineSourcedata.forEach((el, index) => {\n        el = GetcleanedExpression(el);\n\n        if (el == expression) {\n            AddtoExecutionStack(\n                ExecutionStack,\n                '=',\n                ' किसी VARIABLE को नई VALUE सेट करना   ',\n                variable,\n                value[indexCollected],\n                message,\n                index + 1\n            );\n        }\n    });\n    // let Linenumber=''\n}\n\n//Printing a specific array element like Array[0], Array[3] etc.\n\n//Printing a dynamic array element like Array[i], Array[i+1] etc.\n\nfunction GetArrayorStringElement(element, updated_tokens, NewValue) {\n    element = element.replace(']', '');\n\n    let Split = element.split('[');\n\n    let indexCollected = Split[1];\n\n    if (isNumber(indexCollected)) {\n        let token = updated_tokens.find((el) => el.name == Split[0]);\n\n        let index = updated_tokens.indexOf(token);\n\n        let value = token.value.toString();\n\n        if (token.type == 'Array') {\n            value = value.replace(']', '');\n            value = value.replace('[', '');\n            value = value.split(',');\n\n            if (NewValue != undefined) {\n                if (!isNumber(NewValue)) {\n                    NewValue = RemoveQuotes(NewValue);\n                    NewValue = NewValue.replace(/'/g, '');\n                    NewValue = NewValue.replace(/‘/g, '');\n                } else {\n                    NewValue = NewValue;\n                }\n\n                value[indexCollected] = NewValue;\n\n                updated_tokens[index].value = value;\n            } else {\n                value = value[indexCollected];\n              \n            }\n        } else if (token.type == 'string' || token.type != 'Array') {\n            value = value.charAt(indexCollected);\n        }\n\n        return value;\n    }\n}\n\n//Needs improvement\n\nfunction ForLoopArrayorStringOutput(elementValue, iterator, updated_tokens, global) {\n    let CurrentElement = '';\n    CurrentElement = elementValue.name + '[' + iterator + ']';\n    //Foundvalue is decided in the function depending upon the type.\n    //if it's array run array[2], if its string run string.charAt(2)\n    let FoundValue = GetArrayorStringElement(CurrentElement, updated_tokens);\n\n    global.output = global.output + FoundValue + '\\n';\n    console.log('global.output:', global.output);\n    return;\n}\n\n//Move it to typechecking.js\n\nfunction isNumber(element) {\n    if (/^[0-9]*$/gm.test(element)) {\n        return true;\n    }\n}\n\n//one of the heavily used function\n\n//converts ['a','+','b'] into [a+b] and then into [23,+,7] provided a=23 and b=7\n\nfunction SetValues(StringVar, updated_tokens) {\n    StringVar.forEach((el, i) => {\n        el = el.replace(/\\ /g, '');\n\n        if (el.charAt(el.length - 1) == ']') {\n            let ArrayElementValue = GetArrayorStringElement(el, updated_tokens);\n\n            ArrayElementValue = ArrayElementValue.replace(/['\"]+/g, '');\n\n            StringVar[i] = ArrayElementValue;\n        }\n\n        //finding variable value here\n\n        let token = updated_tokens.find((element) => element.name == el);\n\n        if (token != undefined) {\n            // if exists set it's value\n            StringVar[i] = token.value;\n        }\n    });\n\n    return StringVar;\n}\n\n//ANCHOR\n//Now we hae converted found \"a+b-d\" into [a,+,b,-,d]\n\n//Now lets run a loops on it to convert into [5,+,6,-,7]\n\n//Updated_tokens is updated by replacing \"value:a+b-d\" with \"value:5+6-7\".\n//after eval function it will be set as \"value:2\"\n\nfunction UpdateUpdated_tokenswithValues(payload) {\n    let StringVar = payload;\n\n    //run if it's arithmetic operation like [\"5+6-7\"]\n    if (isNumber(StringVar[0])) {\n        let value = eval(StringVar.join(''));\n\n        return value;\n    } else if (StringVar[1] == '==') {\n        let a = StringVar[0].toString();\n        let b = StringVar[2].toString();\n\n        a = a.replace(/\"/g, '');\n        a = a.replace(/'/g, '');\n\n        b = b.replace(/'/g, '');\n        b = b.replace(/\"/g, '');\n\n        let value = eval(a == b);\n\n        return value;\n    }\n\n    //run if it's String operation like [\"reddit\",\"+\", \"is goat\"]\n    else {\n        if (StringVar.includes('+')) {\n            StringVar[StringVar.indexOf('+')] = ' ';\n        }\n\n        let value = StringVar.join('');\n\n        return value;\n    }\n}\n\n//Handle Blocks is a function which takes care of nested block by taking care of nested '{' and '}' brackets\n\n//it uses the stack to push and pop brackets to accurately identify start and the end of the block\n\nfunction HandleBlocks(mutable_tokens, j, StoreResult) {\n    //StoreResult is used to push data into it in case of forloop or while loop conetext\n\n    //for a normal block like conditional block it might not need to be used yet\n\n    let ArrayBrackets = [];\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n\n        if (mutable_tokens[j].value == '{') {\n            ArrayBrackets.push({\n                type: '{',\n                index: j,\n            });\n\n            if (StoreResult != undefined) {\n                StoreResult.push(mutable_tokens[j]);\n            }\n        } else if (mutable_tokens[j].value == '}') {\n            //As soon as open bracket is found, pop the last arraybracket stack value\n            //that's the match\n\n            let x = ArrayBrackets.pop();\n\n            if (StoreResult != undefined) {\n                StoreResult.push(mutable_tokens[j]);\n\n                mutable_tokens[x.index].startIndex = x.index;\n                mutable_tokens[x.index].EndIndex = j;\n            }\n\n            //set start and end index value for that { } block\n            mutable_tokens[x.index].startIndex = x.index;\n            mutable_tokens[x.index].EndIndex = j;\n            if (ArrayBrackets.length == 0) {\n                //As soon as stack is empty we have finished our last lblock\n\n                break;\n            }\n        } else {\n            if (StoreResult != undefined) {\n                StoreResult.push(mutable_tokens[j]);\n            }\n        }\n\n        j++;\n    }\n\n    return {\n        StoreResult,\n        j,\n    };\n}\n\n//Handles conditional statements\n\n//It does not return true or false rather it tells us whether to skip the execution or continue execution depending upon truth value of condition\n\n//If true 'i' is set to current index position, if false 'i' is skipped until the end of conditional block/\n\nfunction HandleConditions(sourcedata, i, updated_tokens) {\n    let element = sourcedata[i].value;\n\n    //let token= updated_tokens.find(el=> el.originalvalue==sourcedata[i].value)\n\n    let SplitArray = SplitElementsArray(element);\n\n    let Values = SetValues(SplitArray, updated_tokens);\n\n    let ForLoopConditionValue = UpdateUpdated_tokenswithValues(Values);\n\n    if (ForLoopConditionValue == false) {\n        while (sourcedata[i + 1].value != '}') {\n            //tokens.splice(i+1, 1);\n\n            //No need to delete tokens, we are iust skipping over the values so that they won't be printed or run\n\n            i++;\n        }\n\n        return i;\n    }\n}\n\n//Handly function to split and join Arrays\n\nfunction SplitandJoin(array, output, element) {\n    array[1] = output;\n\n    let Joinarray = array.join('[') + ']';\n    element = Joinarray;\n\n    return element;\n}\n\nvar AccumulateValue = '';\n\nfunction ResetValue() {\n    AccumulateValue = '';\n}\n\n//One of the most important functions\n\n//Takes care of all kind of assignments provided in raw sourcecode\n\n//Message=\"Hello World\", Numbers=[1,2,3,4,5], Numbers[2]=23 etc.\n\n//If a certain value is not being assigned properly start debugiing here\n\nfunction AssignorUpdateValues(\n    sourcedata,\n    i,\n    updated_tokens,\n    iterator,\n    OriginalIterator,\n    global,\n    ExecutionStack,\n    LinebylineSourcedata\n) {\n    let variable = sourcedata[i - 1].value;\n\n    let varvalue = sourcedata[i + 1].value;\n\n    var FinalValue = '';\n\n    if (varvalue == '\"' || varvalue == '\\'') {\n        varvalue = ' ';\n    }\n\n    //if someone accidenlty types Name=इनपुट or any other primary keywords\n\n    function AssignmentError(value, keywords) {\n        if (value != '') {\n            for (let x in keywords) {\n                if (keywords[x].includes(value)) {\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        }\n    }\n\n    //checkAssignmentError(varvalue, ActiveLangugaeKeywords);\n\n    var error = AssignmentError(varvalue, ActiveLangugaeKeywords);\n\n    if (error) {\n        let error = 'Assignment error in ' + '\"' + variable + ' = ' + '\"';\n\n        global.error.push(error);\n    }\n\n    let varvalueType = sourcedata[i + 1].type;\n\n    function findvalueinMemory(v) {\n        return updated_tokens.find((el) => el.name == v);\n    }\n\n    let memory_value = findvalueinMemory(varvalue);\n\n    //if a=b and user haven't defined b yet\n    //doesn't work on a=b+c, where b is undefined, calculateValues function takes care of that\n\n    function checkifUndefined(v, mv, type) {\n        if (type == 'variable' && !isNumber(v) && mv == undefined) {\n            return `Cannot set ${variable} to undefined : ${v} is undefined `;\n        } else {\n            return false;\n        }\n    }\n\n    let undefined_error = checkifUndefined(varvalue, memory_value, varvalueType);\n\n    //if we have any undefined variables\n    if (undefined_error != false) {\n        global.error.push(undefined_error);\n    }\n\n    //to count the length, Numbers.संख्या()s\n    else if (varvalue.includes('संख्या')) {\n        let Split = varvalue.split('.');\n\n        let item = Split[0];\n\n        let Itemvalue = updated_tokens.find((el) => el.name == item).value;\n\n        if (Itemvalue.includes('[')) {\n            Itemvalue = Itemvalue.toString().split(',');\n        } else if (Itemvalue.length == 1) {\n            Itemvalue = Itemvalue;\n        } else {\n            Itemvalue = Itemvalue.toString();\n        }\n\n        let ItemvalueLength = Itemvalue.length;\n\n        FinalValue = ItemvalueLength;\n\n        updated_tokens.push({\n            name: variable,\n\n            value: ItemvalueLength,\n\n            identifier: i,\n            type: 'CalLength',\n        });\n    }\n\n    //this runs only for operations like x=Numbers[a]\n    else if (varvalueType == 'GetArrayIndexValue') {\n        let n = updated_tokens.find((el) => el.name == variable);\n\n        let index = updated_tokens.indexOf(n);\n\n        //Iterator is used only when we are looping over provided index not for the index that needs to be calculated\n        let element = varvalue.replace(']', '');\n\n        if (element.includes('+')) {\n            var Split = element.split('+');\n        } else if (element.includes('-')) {\n            var Split = element.split('-');\n        }\n\n        var flag = false;\n\n        //For operations like Name=Name+ Array[i]\n\n        if (element.includes('+') || (element.includes('-') && !Split[0].includes('['))) {\n            flag = true;\n\n            let token = updated_tokens.find((el) => el.name == Split[0]);\n            let index = updated_tokens.indexOf(token);\n\n            let ArrayItem = Split[1].split('[');\n\n            let output = CalculateValues(ArrayItem[1], i, updated_tokens);\n\n            let ArrayElement = SplitandJoin(ArrayItem, output, element);\n\n            //Get Numbers[3] value and now set it to our variable x\n            let value = GetArrayorStringElement(ArrayElement, updated_tokens);\n\n            AccumulateValue += value;\n\n            updated_tokens[index].value = AccumulateValue;\n            FinalValue = AccumulateValue;\n        } else {\n            var Split = element.split('[');\n        }\n\n        //for operations like x= Array[i+1] etc\n\n        if ((Split[1].includes('-') || Split[1].includes('+')) && !Split[1].includes('[')) {\n            let output = CalculateValues(Split[1], i, updated_tokens);\n\n            element = SplitandJoin(Split, output, element);\n        }\n\n        let token = updated_tokens.find((el) => el.name == Split[1]);\n\n        //for operations like Array[Age]. Here index is an already defined variable\n        if (token != undefined && OriginalIterator != Split[1] && token.name != '') {\n            element = SplitandJoin(Split, token.value, element);\n        }\n\n        //for operations like Array[i]: Looping over original index value\n        else if (OriginalIterator == Split[1]) {\n            element = SplitandJoin(Split, iterator, element);\n        }\n\n        let ArrayElement = element;\n\n        //Get Numbers[3] value and now set it to our variable x\n        let value = GetArrayorStringElement(ArrayElement, updated_tokens);\n        //\n        if (value != undefined) {\n            value = RemoveQuotes(value);\n        }\n\n        //\n\n        if (n != undefined && flag == false) {\n            updated_tokens[index].value = value;\n\n            FinalValue = value;\n        } else if (flag == false) {\n            updated_tokens.push({\n                name: variable,\n\n                value: value,\n\n                identifier: i,\n                type: sourcedata[i + 1].type,\n            });\n\n            FinalValue = value;\n        }\n    } else {\n    //if we are setting already defined value to new variable\n        let m = updated_tokens.find((el) => el.name == varvalue);\n\n        if (m != undefined) {\n            varvalue = m.value;\n\n            FinalValue = varvalue;\n        }\n\n        let n = updated_tokens.find((el) => el.name == variable);\n\n        if (n == undefined) {\n            //to check if the assigned value needs to be calculated. this is futher diveded in two types\n\n            if (isCalculation(varvalue)) {\n                //type 1- Age= 2020-2000\n\n                if (isPureEval(varvalue)) {\n                    let value = eval(varvalue);\n\n                    //write function for this, so repeatable\n                    updated_tokens.push({\n                        name: variable,\n\n                        value: value,\n\n                        identifier: i,\n                        type: sourcedata[i + 1].type,\n                    });\n\n                    FinalValue = value;\n                }\n\n                //type 2- X= ageone+agetwo\n                else {\n                    //performing the calculation\n                    let multiCal = sourcedata[i + 1].multiCal;\n                    let value = CalculateValues(varvalue, i, updated_tokens, multiCal);\n\n                    updated_tokens.push({\n                        name: variable,\n\n                        value: value,\n\n                        identifier: i,\n                        type: sourcedata[i + 1].type,\n                    });\n\n                    FinalValue = value;\n                }\n            }\n\n            //if there is no need to calculate, push values as it is\n            else if (!isCalculation(varvalue)) {\n                updated_tokens.push({\n                    name: variable,\n\n                    value: varvalue,\n\n                    identifier: i,\n                    type: sourcedata[i + 1].type,\n                });\n\n                FinalValue = varvalue;\n            }\n        }\n\n        //if it's already assgined, reassign it with updated value\n        else {\n            varvalue = varvalue.toString();\n\n            if (\n                varvalue.includes('-') ||\n        varvalue.includes('%') ||\n        varvalue.includes('+') ||\n        varvalue.includes('/') ||\n        varvalue.includes('*')\n            ) {\n                //\n\n                let NewValue = CalculateValues(varvalue, i, updated_tokens);\n\n                n.value = NewValue;\n\n                FinalValue = NewValue;\n            } else {\n                let index = updated_tokens.indexOf(n);\n                updated_tokens[index].value = varvalue;\n\n                FinalValue = varvalue;\n            }\n        }\n    }\n\n    // console.log('variable, varvalue : ', variable, FinalValue );\n\n    let message = '';\n\n    if (isCalculation(sourcedata[i + 1].value) || sourcedata[i + 1].value.includes('संख्या')) {\n        message =\n      ' Computer सबसे पहले जाँच करता है की क्या, ' +\n      '\"' +\n      sourcedata[i + 1].value +\n      '\"' +\n      ' को सुलझाने(Solve) करने की ज़रुरत है?' +\n      '\\n' +\n      ' अगर हा, तो Computer ' +\n      '\"' +\n      sourcedata[i + 1].value +\n      '\"' +\n      ' को Solve करके, ' +\n      '\"' +\n      variable +\n      '\"' +\n      ' के नाम से Memory में दर्ज(Store)कर देगा | ' +\n      '\\n' +\n      ' यहापर , ' +\n      '\"' +\n      sourcedata[i + 1].value +\n      '\"' +\n      ' की कीमत (Value) , ' +\n      '\"' +\n      FinalValue +\n      '\"' +\n      ' आती है |' +\n      '\\n' +\n      ' इसलिए, Computer ' +\n      '\"' +\n      variable +\n      '\"' +\n      ' को ' +\n      '\"' +\n      FinalValue +\n      '\"' +\n      ' ये VALUE दे कर अपने Memory में दर्ज(Store) कर देता है |';\n    } else {\n        message =\n      ' Computer ने, ' +\n      '\"' +\n      variable +\n      '\"' +\n      ' को, ' +\n      '\"' +\n      varvalue +\n      '\"' +\n      ' ये VALUE दे कर अपने Memory में दर्ज(Store) करवाया है |';\n    }\n\n    //This is the experession whcih is getting evaluated.\n\n    let expression = variable + '=' + varvalue;\n    // console.log(updated_tokens);\n    expression = GetcleanedExpression(expression);\n\n    LinebylineSourcedata.forEach((el, index) => {\n        el = el.replace(/ /, '');\n\n        el = GetcleanedExpression(el);\n\n        if (el == expression) {\n            AddtoExecutionStack(\n                ExecutionStack,\n                '=',\n                'किसी VARIABLE को नई VALUE सेट करना   ',\n                variable,\n                varvalue,\n                message,\n                index + 1\n            );\n        }\n    });\n}\n\n//GetConditionValue is our goto function to evaluate a condition to true or false\n\nfunction GetConditionValue(element, updated_tokens) {\n    var ConditionValue = false;\n\n    if (element.includes('&&') || element.includes('||')) {\n        let MultConditionsCount = parseInt(Count('&', element)) + parseInt(Count('|', element));\n\n        //this will be our final values\n        //converted as true&&false&&true||true\n        let BuiltMultConditonWithValues = '';\n        let LastResult = {};\n\n        //running for loop on original condition to calculates each individual condition and adding its value in BuiltMultConditonWithValues\n\n        for (let i = 0; i <= MultConditionsCount; i++) {\n            if (i == MultConditionsCount) {\n                let condition = LastResult.SweepedElement;\n                condition = condition.replace(/ /g, '');\n\n                let SplitArray = SplitElementsArray(condition);\n\n                let Values = SetValues(SplitArray, updated_tokens);\n\n                ConditionValue = UpdateUpdated_tokenswithValues(Values);\n\n                BuiltMultConditonWithValues = BuiltMultConditonWithValues + ConditionValue;\n            } else {\n                let result = handlemultConditions(element);\n\n                LastResult = result;\n\n                element = result.SweepedElement;\n                let condition = result.condition;\n                condition = condition.replace(/ /g, '');\n\n                let SplitArray = SplitElementsArray(condition);\n\n                let Values = SetValues(SplitArray, updated_tokens);\n\n                ConditionValue = UpdateUpdated_tokenswithValues(Values);\n\n                BuiltMultConditonWithValues = BuiltMultConditonWithValues + ConditionValue + result.operator;\n            }\n        }\n\n        //setting the final condition value in cases like अगर (ageone==10 && AverageAge<1000 && agetwo>100 || ageone==10)\n\n        ConditionValue = eval(BuiltMultConditonWithValues);\n    } else {\n    //let token= updated_tokens.find(el=> el.originalvalue==mutable_tokens[j].value)\n\n        let SplitArray = SplitElementsArray(element);\n        // console.log('SplitArray: ', SplitArray);\n\n        let Values = SetValues(SplitArray, updated_tokens);\n\n        Values = Values.filter(function(item) {\n            return item !== '' && item != '\\'' && item != '=\\'' && item != '\"';\n        });\n\n        //Setting the final condition value in cases like अगर (ageone==10)\n\n        //console.log('Values: ', Values);\n        ConditionValue = UpdateUpdated_tokenswithValues(Values);\n    }\n\n    return ConditionValue;\n}\n\n//Getting every single information about our forloop\n\nfunction ForLoopSetMetadata(tokens, i, updated_tokens) {\n    var ForLoopMetaData = tokens[i + 1];\n\n    //Splitting the ForLoopMetaData values individually\n    var iterator = ForLoopMetaData.iterator;\n\n    var element = ForLoopMetaData.value;\n    var IterationStart = parseInt(ForLoopMetaData.iterationStart);\n\n    var IterationEnd = parseInt(ForLoopMetaData.iterationEnd);\n\n    //pushing index\n\n    //checking if iteration end is an predefined variable\n\n    let token = updated_tokens.find((el) => el.name == ForLoopMetaData.iterationEnd);\n\n    if (token != undefined) {\n        IterationEnd = parseInt(token.value);\n    }\n\n    // var ForLoopSourcedata = ForLoopMetaData.ForLoopSourcedata\n\n    var elementValue = updated_tokens.find((el) => el.name == element);\n\n    var elementLength = 0;\n\n    var ForLoopSourcedataIndexStart = 0;\n\n    var OriginalIterator = ForLoopMetaData.iterator;\n\n    // Run if start and end parameters are not given e.g दुहराओ a को  Name मे\n    // This is ran just to get Start and End parameters as they are not provided\n    if (ForLoopMetaData.iterationEnd == undefined) {\n    //run if element is array\n        if (elementValue.type == 'Array') {\n            elementLength = elementValue.value.split(',').length;\n\n            IterationStart = 0;\n            IterationEnd = elementLength - 1;\n        }\n\n        //run if element is String\n        else {\n            elementLength = elementValue.value.length;\n            IterationStart = 0;\n            IterationEnd = elementLength - 1;\n        }\n    }\n\n    var Cycle = IterationEnd;\n\n    return {\n        ForLoopSourcedataIndexStart,\n        Cycle,\n        OriginalIterator,\n        IterationStart,\n        IterationEnd,\n        iterator,\n        element,\n        elementValue,\n    };\n}\n\n//To resolve operations like Array[a]=a+2 in loops and in plain context\n\nfunction SetArrayIndexValue(\n    SourceData,\n    i,\n    j,\n    CompleteTokenValueList,\n    tokens,\n    OriginalIterator,\n    iterator,\n    ExecutionStack,\n    LinebylineSourcedata\n) {\n    let Value = SourceData[i].value;\n\n    let ValueToSet = SourceData[i].ValueToSet;\n\n    let OriginalElement = Value + '=' + ValueToSet;\n\n    let element = RemoveBrackets(Value);\n\n    var ArrayElement = '';\n\n    //Seprating out index identifier. xyz from Array[xyz]\n\n    element = element.replace(']', '');\n\n    let Split = element.split('[');\n\n    // run if we need to set direct Array element value. like Array[2]= xyx\n    if (isNumber(Split[1])) {\n        Split = Split.join('[');\n        //\n\n        Split = Split + ']';\n\n        ArrayElement = Split;\n        //\n\n        NewValueToSet = CalculateValues(ValueToSet, j, CompleteTokenValueList);\n\n        SetArrayorStringElement(\n            OriginalElement,\n            ArrayElement,\n            CompleteTokenValueList,\n            false,\n            NewValueToSet,\n            tokens,\n            ExecutionStack,\n            LinebylineSourcedata\n        );\n    }\n\n    // run if we need to dynamically set Array element value. like Array[i]= xyx\n    //CreateArrayElement function will create dynamic Array values. like Array[0], Array[1] etc.\n    else {\n        let index = Split[1];\n\n        // setting iterator as per user input\n        //for iterator like count=count + 1, Array[count]\n\n        let newInterator = 0;\n\n        let token = CompleteTokenValueList.find((el) => el.name == index);\n\n        if (token != undefined) {\n            newInterator = token.value;\n        } else {\n            newInterator = iterator;\n        }\n\n        ArrayElement = CreateArrayElement(Value, newInterator);\n    }\n\n    // this code is written to find operations like Array[a]= a*100+age*a. notice a\n    //find a way to simplify this in long term\n\n    let data = ValueToSet;\n\n    data = data.split('*').toString();\n    data = data.split('+').toString();\n    data = data.split('-').toString();\n    data = data.split('/').toString();\n    data = data.split(',');\n\n    //building a new value to convert a*100+age*a into 5*100+age*a and then sending it to CalculateValues()\n    let NewValueToSet = '';\n\n    if (data.includes(Split[1]) && data.length > 1) {\n    //we have operations like Array[a]= a*100+age*a. notice a\n\n        for (let m = 0; m < ValueToSet.length; m++) {\n            if (ValueToSet[m] == Split[1] && !/^[a-z]+$/i.test(ValueToSet[m + 1])) {\n                // value is been set . replacing index value a with iteartor value 0,1,2, etc.\n                NewValueToSet = NewValueToSet + iterator;\n            } else {\n                NewValueToSet = NewValueToSet + ValueToSet[m];\n            }\n        }\n\n        let iterat = false;\n        //gave it a different name so it would not fuck up with for loop iterator\n\n        NewValueToSet = CalculateValues(NewValueToSet, j, CompleteTokenValueList);\n\n        SetArrayorStringElement(\n            OriginalElement,\n            ArrayElement,\n            CompleteTokenValueList,\n            iterat,\n            NewValueToSet,\n            tokens,\n            ExecutionStack,\n            LinebylineSourcedata\n        );\n    }\n\n    // this condition enables program to only run  Array[a]= xyz when iterator is a. It disallows running Array[blablabla]=xyz\n    if (OriginalIterator == Split[1]) {\n        if (Split[1] == ValueToSet) {\n            let iterator = true;\n\n            SetArrayorStringElement(\n                OriginalElement,\n                ArrayElement,\n                CompleteTokenValueList,\n                iterator,\n                ValueToSet,\n                tokens,\n                ExecutionStack,\n                LinebylineSourcedata\n            );\n        }\n\n        // for operations like Array[a]=ageone*100\n\n        if (!data.includes(Split[1]) && OriginalIterator == Split[1]) {\n            let iterator = false;\n\n            ValueToSet = CalculateValues(ValueToSet, j, CompleteTokenValueList);\n\n            SetArrayorStringElement(\n                OriginalElement,\n                ArrayElement,\n                CompleteTokenValueList,\n                iterator,\n                ValueToSet,\n                tokens,\n                ExecutionStack,\n                LinebylineSourcedata\n            );\n        }\n    }\n\n    //might have to add more conditions in the future\n    else {\n        let iterator = false;\n\n        ValueToSet = CalculateValues(ValueToSet, j, CompleteTokenValueList);\n\n        SetArrayorStringElement(\n            OriginalElement,\n            ArrayElement,\n            CompleteTokenValueList,\n            iterator,\n            ValueToSet,\n            tokens,\n            ExecutionStack,\n            LinebylineSourcedata\n        );\n    }\n}\n\nfunction AddtoExecutionStack(stack, keyword, keywordUse, variable, value, message, Linenumber) {\n    stack.push({\n        keyword: keyword,\n        keywordUse: keywordUse,\n        variable: variable,\n        value: value,\n        message: message,\n        Linenumber: Linenumber,\n    });\n}\n\nexport {\n    IsReservedKeyword,\n    GetCleanSourcedata,\n    GetcleanedExpression,\n    ForLoopSetMetadata,\n    getLoopIndexStart,\n    AddElementToArray,\n    ResetValue,\n    HandleBlocks,\n    HandleConditions,\n    AssignorUpdateValues,\n    PushGetArrayIndexValue,\n    PushSetArrayIndexValue,\n    isArrayOperation,\n    GetConditionValue,\n    CalculateValues,\n    handlemultConditions,\n    CreateArrayElement,\n    SetArrayorStringElement,\n    ForLoopArrayorStringOutput,\n    GetArrayorStringElement,\n    AcceptInputandSetValue,\n    SplitElementsArray,\n    SetValues,\n    UpdateUpdated_tokenswithValues,\n    SetArrayIndexValue,\n    AddtoExecutionStack,\n};\n"]}]}