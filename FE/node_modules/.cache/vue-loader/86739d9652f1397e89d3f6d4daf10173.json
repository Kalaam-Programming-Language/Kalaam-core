{"remainingRequest":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/vuetify-loader/lib/loader.js??ref--17-0!/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/vue-cli-plugin-quasar/lib/loader.auto-import.js?kebab!/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/cache-loader/dist/cjs.js??ref--0-1!/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/src/views/Documentation.vue?vue&type=template&id=939d8420&scoped=true&","dependencies":[{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/src/views/Documentation.vue","mtime":1618273899892},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/vue-cli-plugin-quasar/lib/loader.auto-import.js","mtime":499162500000},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}