{"remainingRequest":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/vuetify-loader/lib/loader.js??ref--17-0!/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/vue-cli-plugin-quasar/lib/loader.auto-import.js?kebab!/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/cache-loader/dist/cjs.js??ref--0-1!/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/src/views/Practise.vue?vue&type=template&id=543887e5&scoped=true&","dependencies":[{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/src/views/Practise.vue","mtime":1652674559486},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/vue-cli-plugin-quasar/lib/loader.auto-import.js","mtime":499162500000},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Desktop/myProjects/Kalaam-BE/FE/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaGVsbG8iIH0sIFsKICAgIF9jKAogICAgICAiZGl2IiwKICAgICAgWwogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IGF0dHJzOiB7IGlkOiAiaGVhZGVyIiB9IH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJMb2dvYW5kVGl0bGUiIH0gfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygicm91dGVyLWxpbmsiLCB7IGF0dHJzOiB7IGlkOiAiS2FsYWFtIiwgdG86ICIvIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCLgpJXgpLLgpL7gpK4iKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLmlzTW9iaWxlCiAgICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICAgInEtZm9ybSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBmbG9hdDogInJpZ2h0IiwgInBhZGRpbmctcmlnaHQiOiAiMiUiIH0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJTZWxlY3QtTGFuZ3VhZ2UtZm9ybSIgfSwKICAgICAgICAgICAgICAgICAgICBvbjogeyBzdWJtaXQ6IF92bS5vblN1Ym1pdCB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygicS1zZWxlY3QiLCB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBkZW5zZTogInRydWUiLAogICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogImJsYWNrIiwKICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZWQ6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBfdm0ub3B0aW9ucwogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIHNjb3BlZFNsb3RzOiBfdm0uX3UoCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6ICJhcHBlbmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJxLWF2YXRhciIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBZ0FBQUFJQUNBTUFBQUREcGlUSUFBQUFVVkJNVkVWSGNFd0FBQUFBQUFBQUFBQUFBQUFBQUFBYUZRTC8weDMvMHgwQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBRUF3QUFBQUFHQlFELzB4My8weDMvMHgzLzB4My8weDBBQUFELzB4MUFOUWUvbmhZRk1xYTdBQUFBRjNSU1RsTUFnR0RQUU84UXdFQy9JSjh3MzFDUHIzQ0xZQ3p2VUljSnIzY0FBQXNzU1VSQlZIamE3ZDFydHFLNEFvQlJRS0FhRlpYcTZzN3BPLytCM2g5MXF2clVRK1dSUk8zc1BRQVh5M3hDaUJpckNnQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ0FsL2JIQjErOEhjWDUvUGJCSis5SGFmNThFNER4RjREeEYwQ0ovbjRUUU1tKy9DVUE0eThBNHk4QTR5K0EwdlNmM2dSZy9BVmcvQVZRb2l2akw0QkNmSDRUZ1BFWGdQRVhnUEVYUUduK2ZCT0E4UmVBOFJkQWliNjhDYUJvZndoQUFBSVFnQUFFSUFBQkNFQUFBaENBQUFRZ0FBRUlRQUFDRUlBQUJJQUFFQUFDUUFBSUFBRWdBQVNBQUJBQUF1QkIrclp0KzVjTm9HM2J2VEZjUHVaTmZSNkdYZmpSTUF4MWZXcWZPb0JqMjlUMTVaZGpIeTUxYTF4bmZXS213eER1NklaemMzeTJBTnBUZmJsejVKZW1OOEMzUHZlbjh5N01OeXo1VEtVTW9HL3J5OHdEN3c2dUI5ZE9uZldTd2Y4ZXdYUjhiQUQ3NXJEd3VNL09Bcjg2SGNhdzFuZytQaWlBZnQxaGR5Y0QvdU9INkx4KzlOOGJtUGJaQTloUHU5WEhlekRvLzJxR0VNUGxsRE9BNDhabWR5NEQ3eWZSdWd1eGpEZW4yQkVEMkUvajVvTlZRRlZWMWY0UW91cnFQbjBBelNYS3NlNE1mK3podjUxQW5BRDI4YzVZWnlmL2tFSTNwUXVnalpwczJRdURUWnJoRHlHRXNVMFRRRHRFUHM2U2wzdDNJYVZoSHorQUp2NGhOOFdlL2M4aHNhNk9IRUNTWW9kU1AvNWpTRzkzakJoQTdKUC9ONzJQZjhLVHdCUXJnQlIzSytWZUE0NjdrTXZRUndtZ1RqZGRyVTMrMDU0RTJ1MEJKTDFlbFRjSk9JUzhwbzBCOUplMDU2alNMdis3a051aDN4TEFLZkg1cXJBQWpsM0k3L3VYTHNzRFNQenhMeTZBMHlQR1A0VHh1REtBTnYzeEZoVkFFeDZrTzY0S0lNZmQ2bUQ4c3hUUUxBOWduMlc2VXRCdDREazhVck0wZ0RiUDVhcWNad01QSVR5NmdDVUJUSmtPcXpmKytRcVlIMENmNjNDTGVUUzBEby9YekE0ZzMycEZLVStFTk9FWm5HY0djQnh6SGRGZy9IUDZaMTRBR1ZlcmptV01meHRlS1lDTXExV1Q5ZC9uQ3lEajJhcVFHV0EvaGhjS3dQaEhONFFYQ3NENC84Y1dBQmNHa0hIOFMxa0RQb1VYQ2lEZmJIVXNaUUZnMzcxU0FMa085dFlQR0UwQUhoZkEvd3ovZjNFRitNa0N1SlQwSVBneENPRGp3bTl4MjhSRnVBRHNocm8rdGQ4MDlYbm9YaWFBM1hDdTYvY2pQMVlGMnZpZGVuZVpmdnVCNmR0NmVQSUF4a3R0YjlDcTN6S3BIdXVibjVuK2RPaWVOSUR4Y0xMM3k4Wm5RTHBadTc0dDNsb3FRd0M3eVFkLzgzZUE0K3pOVkJmK1pqTjFBR050OUxmUEFNZEZ0MG1MRWtnYndHRHZ4d2duZ0c3eEV2bCtlSW9BN1AvN3MxVmZBZzlyM3NiWlQzQ2tDOER3L3pwRFcvUHhYL21Fek54ZjhLVUtZRGdhN3hnemdOMzZqOUgwd0FEcyt4eHBCbkRZY3ZjODY3R3pKQUhZK1QzU0NXRGpBeEp6SHVWUEVFRG5QMkIrUHpWZi9FNXUvbzVzUmdIeEF4aDgvSC92bkgzODU2dzhSZytnTnRKWGRBOFkvL3NGUkE3QTdDL2FQV0NrWnlUdVhRWGlCdEM1K2J0cTRjNDYwWDRnYzZlQXFBSHNqUC8xY1hqWUEvSzNuMEdOR1lDLys5aThMSlBrcld3ekJXRDhvMTBCSWw5SzZ5d0JkTmIrbzEwQll2OUNkc2dRZ1BsZnZIdUE2RnNrM0pnR1JBdkEvZCsyQlptUDRwOUxwK1FCV1ArNWJYendXdHFZT0FELzluYm5ITHhrQnBoaU10Mm1EY0FFTU9JVUlNM0pkRWdhd0dTSW8wMEJ1alIzMDIzS0FGd0E3dGs5K2dSdzlSQ2lCT0FCZ0hzZWVndHc4eW9VSTREQkFHOVpqUDNwbDlMSkRxSkxGb0FUd1ByYjhJenJLWWRVQVRnQjNEWC9ZYUF1M1VFY1V3WFFHT0MxOTJBNXJ3QlhyZ0hiQStpTWI4UjF3SlNmcGtPYUFBN0dOK0pOUU1vVnRTWk5BTDRGdW12L0RGT0FLNGV4UFFEakcvRXU4SkwwT0xvVUFWeU1iOFFBMG42cE9xUUl3UGZBOTlWUHNBcHc3VGcyQjJBVktHWUFhZC9OSmtVQW5nU05HVUQrUzlIV0FLd0NSRjBJVEhzY3h3UUJXQWVPdVJBNDVsK1BFTUF6QlRDOFhnQm53MXQyQU80Q0JZQUFFQUFDd0YwQW13TG9YaThBNndBei9KZVhnZ1VRTllEKzVRTHdQRWpVQU5KK0d6ajVOdkRaQTJpeUg0Zm5BVEx3UkpBQW51SStNTWt6Z1dhQjkza3F1SFR6ZnhlUWNxc3R2d3Q0bVBtL0RFcTUxWVpmQmozL1VtRFNLNnJmQmo3TWdyOEtTSGRiZmZMcjRJZFpzRDlBdW5jejJmNEFkZ2lLZUIrWThOMjBROGhMM0FZa3V3K3dSOUFqTGRnbDdKRDNFT3dTbHNXU3JZTFRiQkdRZEovQTBRaXZPLzltUEFXazNTblVGd0pyVm1Gem5nSVM3eFVjL0ZsQXRMWEFORnN1MkMzOGhTWUJDZVpVMTU5SWlQVi9BUjRPWGJNTWQyMU9GWHM1TU1jL2hsZ1B2R25aZndiRi9qajV6NkRIVy9hL2tYRy9ZczMwcjJFS2lIVWpHUGtmT0hMOWIyRG4rZEJvMTRDWWY4SjR6UGZQb2Y0NEp0bzFJTjY5WU03L0RuWVZpSFlOaUxZZzZOL0RuMGIzaUFMdWpYL2tBRUxuYnZDcWM4aGZ3TjN4angyQUZhRWJxekVoZXdIM3h6OStBR0V3Rll3ekRRd2hETnZ1QmZZekhrT0lIMERvUENpKzRuNzh5bzNWbGtsVk8yZldrU0NBRUM1V0JKYXV5Q2I0Tk0zN1NXcVNBTXdGbzUwQ1FqaXYrelR0WjlhV0pvQVFCbytKeFRrRmhEQ3VlU3VudVRlZHFRSXdHWXgyQ2dqaHN2U3RiT2VYbGk2QUVBN09BbEZPQVV1dkEvc2xUNStrRENDRXdWemdSOGUxNzJSM21Ic1dPQzU2K0NoeEFDRjBaNnZESHgzV3Y1V1hHVGNFZmJOYitLcXBBd2doakJyNE1FTGRsay9UNFhSNzlKY3ZOZVVJSUlUUUhScFR3dmZwK2NhM2NxamIzODBIOXFmemJ0WHI1UWtnaEJDNm9UNDVGYXlmQi83d1ZoN3F1bjEzcXV2TGh0Zk1GOEQ3OVdDNDFQWDBmdXhGOXJEdndqUEpIY0N2UWRTbjNrV2czQUMrem0rYjNrV2c1QUNXM09hV2ZpZVFPNEJQMlE3MlhNNVpvSDJsQUk3WkNpam9PWUw2aFFKWS9EVHJscE5BTVFWY1hpaUFuQVVVOHlSSnYzdWhBSElXc0N1bGdHUDNRZ0ZVVGI2akxXYmYwZU1yQlpDejEySjJtMmxlS1lDY0JSd1ZrRkUzelF1Z09tYWJ0WlN6NitBekZORDhNVE9BalBQV1ZnSDV4cithSGNDbWgxbVczUXRXQ3NnMi9rc0N5SGE0dlFLeWpmK2lBSEpOQlV2NmFka0RDL2o2Vy81RkFWUjlsbTh5aTlwM3RIbnMrQzhNSU0vWEdHWHRQdjZnTmNGdlB6dGRHa0RWamdLSVhNRDRpUEgvTnRGYUhFRFZud1VRK1p1aC9JOEkvYnZpdmp5QXFqcU5Bb2pybkhuOFAveGdhMDBBcVU4Q0JmNER5U25uUkdEOHVOcStLb0NxYW5jQ2lHcWY3d0dCSHgrNldCbkFnaCtndXcyY0o5TmpZdDFQLzAyNk9vQ3FUN1kwWE9nZVEyMk91NEZmZG0xWUg4RDhYVWdzQmMrOEc2aHpmL3czQnJCb0p3cGZCczFaRWhneVh2MWpCSkFrZ2FKM21XdlNYUWQydi8yZWZXc0E4Uk1vL08rSCtqck43SHE4c2xuTDlnQVc3a25qZVpCSEpOQmR2Yk9LRVVCVjlYVzBNNWU5aHVNbk1FN1g1OVZ4QXFpcTZoVG54eTcraC9ockFsTzh1Y0R1NWs1ZDBRS29xbjdhdnBxMXM4bHM1RS9VdmIzNklnWlFWZFYrWXdPRDhmLzRibTYrc082bXUyOW8zQUNxcXRwUEY5Zi9lQXNENTNIRDZNL1pjeUY2QUZWVlZldDJyQnB0TFByYkJxWTFtNHhmcHBrN2JpUUpvS3FxL25RZUZ0Nm9PUDFmWDJ1cGh5V0RYeS80S0tVSzRPdHhUNGZCOE1jNkV6VG40ZDdkNFRqVXA0Vjc3U1FONE91a29LM1B3ODByMlowTk1QbjRtV3JyK2pMODlIN3VodUZRVCt0MjNVc2Z3UGNPMnJvK0Q4T3crekhaODJUM3lFZktGZ0FDUUFBSUFBRWdBQVNBQUJBQUFrQUFDQUFCSUFBRWdBQVFBQUpBQUFnQUFTQUFCSUFBRUFBQ1FBQUlBQUVnQUFTQUFCQUFBa0FBQ0FBQklBQWlCZkMzdDZqb0FQNzBEaFVkZ1BFdk80RFAzcCtpQXpEK1pRZGcvTXNPd0ExZzJRRjhzb0YvMFFFWS83SURNUDVsQi9EWEYrOU15UUVZLzdJRE1QNkZCK0FMb0xJRDhBVkEyUUVZLzdJRHNBQmNkZ0RHdit3QWpIL1pBUmovNG56NS9KRUZZQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQWdPZnlmeGxHYlRvNzZLQUdBQUFBQUVsRlRrU3VRbUNDIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm94eTogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgIDMxMDU0MTg1NDAKICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLkFjdGl2ZUxhbmd1YWdlLAogICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLkFjdGl2ZUxhbmd1YWdlID0gJCR2CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJBY3RpdmVMYW5ndWFnZSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfYygicS1idG4iLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBjb2xvcjogImJsYWNrIiB9LAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICJTdWJtaXQiLAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAic3VibWl0IiwKICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICJzZWNvbmRhcnkiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgICAgIF9jKCJ1bCIsIHsgYXR0cnM6IHsgaWQ6ICJoZWFkZXJsaXN0IiB9IH0sIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJyb3V0ZXItbGluayIsIHsgYXR0cnM6IHsgdG86ICIvRG9jdW1lbnRhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJEb2N1bWVudGF0aW9uIikKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJyb3V0ZXItbGluayIsIHsgYXR0cnM6IHsgdG86ICIvRXhhbXBsZXMiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiRXhhbXBsZXMiKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInEtZm9ybSIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJTZWxlY3QtTGFuZ3VhZ2UtZm9ybSIgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7IHN1Ym1pdDogX3ZtLm9uU3VibWl0IH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJxLXNlbGVjdCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogImJsYWNrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRsaW5lZDogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLm9wdGlvbnMKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVkU2xvdHM6IF92bS5fdShbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiAiYXBwZW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicS1hdmF0YXIiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQWdBQUFBSUFDQU1BQUFERHBpVElBQUFBVVZCTVZFVkhjRXdBQUFBQUFBQUFBQUFBQUFBQUFBQWFGUUwvMHgzLzB4MEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUVBd0FBQUFBR0JRRC8weDMvMHgzLzB4My8weDMvMHgwQUFBRC8weDFBTlFlL25oWUZNcWE3QUFBQUYzUlNUbE1BZ0dEUFFPOFF3RUMvSUo4dzMxQ1ByM0NMWUN6dlVJY0pyM2NBQUFzc1NVUkJWSGphN2QxcnRxSzRBb0JSUUtBYUZaWHE2czdwTy8rQjNoOTFxdnJVUStXUlJPM3NQUUFYeTN4Q2lCaXJDZ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUNBbC9iSEIxKzhIY1g1L1BiQkorOUhhZjU4RTREeEY0RHhGMENKL240VFFNbSsvQ1VBNHk4QTR5OEE0eStBMHZTZjNnUmcvQVZnL0FWUW9pdmpMNEJDZkg0VGdQRVhnUEVYZ1BFWFFHbitmQk9BOFJlQThSZEFpYjY4Q2FCb2Z3aEFBQUlRZ0FBRUlBQUJDRUFBQWhDQUFBUWdBQUVJUUFBQ0VJQUFCSUFBRUFBQ1FBQUlBQUVnQUFTQUFCQUFBdUJCK3JadCs1Y05vRzNidlRGY1B1Wk5mUjZHWGZqUk1BeDFmV3FmT29CajI5VDE1WmRqSHk1MWExeG5mV0ttd3hEdTZJWnpjM3kyQU5wVGZibHo1SmVtTjhDM1B2ZW44eTdNTnl6NVRLVU1vRy9yeTh3RDd3NnVCOWRPbmZXU3dmOGV3WFI4YkFENzVyRHd1TS9PQXI4NkhjYXcxbmcrUGlpQWZ0MWhkeWNEL3VPSDZMeCs5TjhibVBiWkE5aFB1OVhIZXpEby8ycUdFTVBsbERPQTQ4Wm1keTREN3lmUnVndXhqRGVuMkJFRDJFL2o1b05WUUZWVjFmNFFvdXJxUG4wQXpTWEtzZTRNZit6aHY1MUFuQUQyOGM1WVp5Zi9rRUkzcFF1Z2pacHMyUXVEVFpyaER5R0VzVTBUUUR0RVBzNlNsM3QzSWFWaEh6K0FKdjRoTjhXZS9jOGhzYTZPSEVDU1lvZFNQLzVqU0c5M2pCaEE3SlAvTjcyUGY4S1R3QlFyZ0JSM0srVmVBNDY3a012UVJ3bWdUamRkclUzKzA1NEUydTBCSkwxZWxUY0pPSVM4cG8wQjlKZTA1NmpTTHYrN2tOdWgzeExBS2ZINXFyQUFqbDNJNy91WExzc0RTUHp4THk2QTB5UEdQNFR4dURLQU52M3hGaFZBRXg2a082NEtJTWZkNm1EOHN4VFFMQTlnbjJXNlV0QnQ0RGs4VXJNMGdEYlA1YXFjWndNUElUeTZnQ1VCVEprT3F6ZisrUXFZSDBDZjYzQ0xlVFMwRG8vWHpBNGczMnBGS1UrRU5PRVpuR2NHY0J4ekhkRmcvSFA2WjE0QUdWZXJqbVdNZnh0ZUtZQ01xMVdUOWQvbkN5RGoyYXFRR1dBL2hoY0t3UGhITjRRWENzRDQvOGNXQUJjR2tISDhTMWtEUG9VWENpRGZiSFVzWlFGZzM3MVNBTGtPOXRZUEdFMEFIaGZBL3d6L2YzRUYrTWtDdUpUMElQZ3hDT0Rqd205eDI4UkZ1QURzaHJvK3RkODA5WG5vWGlhQTNYQ3U2L2NqUDFZRjJ2aWRlbmVaZnZ1QjZkdDZlUElBeGt0dGI5Q3EzektwSHV1Ym41bitkT2llTklEeGNMTDN5OFpuUUxwWnU3NHQzbG9xUXdDN3lRZC84M2VBNCt6TlZCZitaak4xQUdOdDlMZlBBTWRGdDBtTEVrZ2J3R0R2eHdnbmdHN3hFdmwrZUlvQTdQLzdzMVZmQWc5cjNzYlpUM0NrQzhEdy96cERXL1B4WC9tRXpOeGY4S1VLWURnYTd4Z3pnTjM2ajlIMHdBRHMreHhwQm5EWWN2Yzg2N0d6SkFIWStUM1NDV0RqQXhKekh1VlBFRURuUDJCK1B6VmYvRTV1L281c1JnSHhBeGg4L0gvdm5IMzg1Nnc4UmcrZ050SlhkQThZLy9zRlJBN0E3Qy9hUFdDa1p5VHVYUVhpQnRDNStidHE0YzQ2MFg0Z2M2ZUFxQUhzalAvMWNYallBL0szbjBHTkdZQy8rOWk4TEpQa3JXd3pCV0Q4bzEwQklsOUs2eXdCZE5iK28xMEJZdjlDZHNnUWdQbGZ2SHVBNkZzazNKZ0dSQXZBL2QrMkJabVA0cDlMcCtRQldQKzViWHp3V3RxWU9BRC85bmJuSEx4a0JwaGlNdDJtRGNBRU1PSVVJTTNKZEVnYXdHU0lvMDBCdWpSMzAyM0tBRndBN3RrOStnUnc5UkNpQk9BQmdIc2VlZ3R3OHlvVUk0REJBRzlaalAzcGw5TEpEcUpMRm9BVHdQcmI4SXpyS1lkVUFUZ0IzRFgvWWFBdTNVRWNVd1hRR09DMTkyQTVyd0JYcmdIYkEraU1iOFIxd0pTZnBrT2FBQTdHTitKTlFNb1Z0U1pOQUw0RnVtdi9ERk9BSzRleFBRRGpHL0V1OEpMME9Mb1VBVnlNYjhRQTBuNnBPcVFJd1BmQTk5VlBzQXB3N1RnMkIyQVZLR1lBYWQvTkprVUFuZ1NOR1VEK1M5SFdBS3dDUkYwSVRIc2N4d1FCV0FlT3VSQTQ1bCtQRU1BekJUQzhYZ0JudzF0MkFPNENCWUFBRUFBQ3dGMEFtd0xvWGk4QTZ3QXovSmVYZ2dVUU5ZRCs1UUx3UEVqVUFOSitHemo1TnZEWkEyaXlINGZuQVRMd1JKQUFudUkrTU1remdXYUI5M2txdUhUemZ4ZVFjcXN0dnd0NG1QbS9ERXE1MVlaZkJqMy9VbURTSzZyZkJqN01ncjhLU0hkYmZmTHI0SWRac0Q5QXVuY3oyZjRBZGdpS2VCK1k4TjIwUThoTDNBWWt1dyt3UjlBakxkZ2w3SkQzRU93U2xzV1NyWUxUYkJHUWRKL0EwUWl2Ty85bVBBV2szU25VRndKclZtRnpuZ0lTN3hVYy9GbEF0TFhBTkZzdTJDMzhoU1lCQ2VaVTE1OUlpUFYvQVI0T1hiTU1kMjFPRlhzNU1NYy9obGdQdkduWmZ3YkYvamo1ejZESFcvYS9rWEcvWXMzMHIyRUtpSFVqR1BrZk9ITDliMkRuK2RCbzE0Q1lmOEo0elBmUG9mNDRKdG8xSU42OVlNNy9EbllWaUhZTmlMWWc2Ti9EbjBiM2lBTHVqWC9rQUVMbmJ2Q3FjOGhmd04zeGp4MkFGYUVicXpFaGV3SDN4ejkrQUdFd0ZZd3pEUXdoRE52dUJmWXpIa09JSDBEb1BDaSs0bjc4eW8zVmxrbFZPMmZXa1NDQUVDNVdCSmF1eUNiNE5NMzdTV3FTQU13Rm81MENRaml2K3pUdFo5YVdKb0FRQm8rSnhUa0ZoREN1ZVN1bnVUZWRxUUl3R1l4MkNnamhzdlN0Yk9lWGxpNkFFQTdPQWxGT0FVdXZBL3NsVDUra0RDQ0V3VnpnUjhlMTcyUjNtSHNXT0M1NitDaHhBQ0YwWjZ2REh4M1d2NVdYR1RjRWZiTmIrS3FwQXdnaGpCcjRNRUxkbGsvVDRYUjc5SmN2TmVVSUlJVFFIUnBUd3ZmcCtjYTNjcWpiMzgwSDlxZnpidFhyNVFrZ2hCQzZvVDQ1RmF5ZkIvN3dWaDdxdW4xM3F1dkxodGZNRjhENzlXQzQxUFgwZnV4RjlyRHZ3alBKSGNDdlFkU24za1dnM0FDK3ptK2Iza1dnNUFDVzNPYVdmaWVRTzRCUDJRNzJYTTVab0gybEFJN1pDaWpvT1lMNmhRSlkvRFRybHBOQU1RVmNYaWlBbkFVVTh5Ukp2M3VoQUhJV3NDdWxnR1AzUWdGVVRiNmpMV2JmMGVNckJaQ3oxMkoybTJsZUtZQ2NCUndWa0ZFM3pRdWdPbWFidFpTejYrQXpGTkQ4TVRPQWpQUFdWZ0g1eHIrYUhjQ21oMW1XM1F0V0NzZzIva3NDeUhhNHZRS3lqZitpQUhKTkJVdjZhZGtEQy9qNlcvNUZBVlI5bG04eWk5cDN0SG5zK0M4TUlNL1hHR1h0UHY2Z05jRnZQenRkR2tEVmpnS0lYTUQ0aVBIL050RmFIRURWbndVUStadWgvSThJL2J2aXZqeUFxanFOQW9qcm5IbjhQL3hnYTAwQXFVOENCZjREeVNublJHRDh1TnErS29DcWFuY0NpR3FmN3dHQkh4KzZXQm5BZ2grZ3V3MmNKOU5qWXQxUC8wMjZPb0NxVDdZMFhPZ2VRMjJPdTRGZmRtMVlIOEQ4WFVnc0JjKzhHNmh6Zi93M0JyQm9Kd3BmQnMxWkVoZ3lYdjFqQkpBa2dhSjNtV3ZTWFFkMnYvMmVmV3NBOFJNby9PK0granJON0hxOHNsbkw5Z0FXN2tuamVaQkhKTkJkdmJPS0VVQlY5WFcwTTVlOWh1TW5NRTdYNTlWeEFxaXE2aFRueHk3K2gvaHJBbE84dWNEdTVrNWQwUUtvcW43YXZwcTFzOGxzNUUvVXZiMzZJZ1pRVmRWK1l3T0Q4Zi80Ym02K3NPNm11MjlvM0FDcXF0cFBGOWYvZUFzRDUzSEQ2TS9aY3lGNkFGVlZWZXQyckJwdExQcmJCcVkxbTR4ZnBwazdiaVFKb0txcS9uUWVGdDZvT1AxZlgydXBoeVdEWHkvNEtLVUs0T3R4VDRmQjhNYzZFelRuNGQ3ZDRUalVwNFY3N1NRTjRPdWtvSzNQdzgwcjJaME5NUG40bVdycitqTDg5SDd1aHVGUVQrdDIzVXNmd1BjTzJybytEOE93K3pIWjgyVDN5RWZLRmdBQ1FBQUlBQUVnQUFTQUFCQUFBa0FBQ0FBQklBQUVnQUFRQUFKQUFBZ0FBU0FBQklBQUVBQUNRQUFJQUFFZ0FBU0FBQkFBQWtBQUNBQUJJQUFpQmZDM3Q2am9BUDcwRGhVZGdQRXZPNERQM3AraUF6RCtaUWRnL01zT3dBMWcyUUY4c29GLzBRRVkvN0lETVA1bEIvRFhGKzlNeVFFWS83SURNUDZGQitBTG9MSUQ4QVZBMlFFWS83SURzQUJjZGdER3Yrd0FqSC9aQVJqLzRuejUvSkVGWUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFnT2Z5ZnhsR2JUbzc2S0FHQUFBQUFFbEZUa1N1UW1DQyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJveHk6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uQWN0aXZlTGFuZ3VhZ2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLkFjdGl2ZUxhbmd1YWdlID0gJCR2CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiQWN0aXZlTGFuZ3VhZ2UiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoInEtYnRuIiwgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBjb2xvcjogImJsYWNrIiB9LAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAiU3VibWl0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAic3VibWl0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogInNlY29uZGFyeSIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygidHJhbnNpdGlvbiIsIHsgYXR0cnM6IHsgbmFtZTogInNsaWRlLWZhZGUiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5zaG93TWVudSA9PSB0cnVlCiAgICAgICAgICAgICAgICA/IF9jKCJ1bCIsIHsgYXR0cnM6IHsgaWQ6ICJoZWFkZXJsaXN0TW9iaWxlIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udG9nZ2xlTWVudSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL0RvY3VtZW50YXRpb24iIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiRG9jdW1lbnRhdGlvbiIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udG9nZ2xlTWVudSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJyb3V0ZXItbGluayIsIHsgYXR0cnM6IHsgdG86ICIvRXhhbXBsZXMiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkV4YW1wbGVzIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoInJvdXRlci12aWV3IikKICAgICAgXSwKICAgICAgMQogICAgKSwKICAgIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAiTW9kZXMiIH0gfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjY4JSIsIGRpc3BsYXk6ICJmbGV4IiB9IH0sIFsKICAgICAgICAhdGhpcy4kc3RvcmUuc3RhdGUuUHJhY3Rpc2VPbgogICAgICAgICAgPyBfYygic3BhbiIsIFtfYygibGkiLCBbX3ZtLl92KCJQcmFjdGljZSBNb2RlIildKV0pCiAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgIHRoaXMuJHN0b3JlLnN0YXRlLlByYWN0aXNlT24KICAgICAgICAgID8gX2MoInNwYW4iLCBbCiAgICAgICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNTdHlsZTogeyBjb2xvcjogImdyZWVuIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiUHJhY3RpY2UgTW9kZSIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIwcHgiIH0gfSwgWwogICAgICAgICAgX2MoImxhYmVsIiwgeyBzdGF0aWNDbGFzczogInN3aXRjaCIgfSwgWwogICAgICAgICAgICB0aGlzLiRzdG9yZS5zdGF0ZS5QcmFjdGlzZU9uCiAgICAgICAgICAgICAgPyBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJjaGVja2JveCIgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLlN3aXRjaE1vZGUoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICB0aGlzLiRzdG9yZS5zdGF0ZS5MZWFybmluZ09uCiAgICAgICAgICAgICAgPyBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJjaGVja2JveCIsIGNoZWNrZWQ6ICIiIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5Td2l0Y2hNb2RlKCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAic2xpZGVyIHJvdW5kIiB9KQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICAhdGhpcy4kc3RvcmUuc3RhdGUuTGVhcm5pbmdPbgogICAgICAgICAgPyBfYygic3BhbiIsIFtfYygibGkiLCBbX3ZtLl92KCJMZWFybmluZyBNb2RlIildKV0pCiAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgIHRoaXMuJHN0b3JlLnN0YXRlLkxlYXJuaW5nT24KICAgICAgICAgID8gX2MoInNwYW4iLCBbCiAgICAgICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNTdHlsZTogeyBjb2xvcjogImdyZWVuIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiTGVhcm5pbmcgTW9kZSIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgXSksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIzMSUiLCBmbG9hdDogInJpZ2h0IiwgInRleHQtYWxpZ24iOiAiZW5kIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJzdGFja01lbnVJY29uIiB9LAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udG9nZ2xlTWVudSgpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCLimLAiKV0KICAgICAgICAgICkKICAgICAgICBdCiAgICAgICkKICAgIF0pLAogICAgdGhpcy4kc3RvcmUuc3RhdGUuTGVhcm5pbmdPbgogICAgICA/IF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiTGVhcm5pbmdNb2RlIiwgYXR0cnM6IHsgaWQ6ICJjb21waWxlciIgfSB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJ0ZXh0YXJlYSIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAibm8tc3NyIiwKICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgcGxhY2Vob2xkZXI6ICIuLi4iIH0gfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImNvZGVtaXJyb3IiLCB7CiAgICAgICAgICAgICAgICAgICAgcmVmOiAibXlDbSIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGlkOiAiY29kZWFyZWEiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5jb2RlLAogICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLmNtT3B0aW9ucwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIHJlYWR5OiBfdm0ub25DbVJlYWR5LAogICAgICAgICAgICAgICAgICAgICAgZm9jdXM6IF92bS5vbkNtRm9jdXMsCiAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogX3ZtLm9uQ21Db2RlQ2hhbmdlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJxLWJ0biIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZsYXQ6ICIiLCBpZDogIlJ1bmxpbmVieWxpbmVCdG4iLCBsYWJlbDogIlJ1biIgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLlJ1bkxpbmVieUxpbmUoKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoInEtYnRuIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgZmxhdDogIiIsIGlkOiAiQ2xlYXJidG4iLCBsYWJlbDogIkNsZWFyIiB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uQ2xlYXIoKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicS1idG4iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogeyBmbGF0OiAiIiwgaWQ6ICJzdWJtIiB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIF92bS5BZGQoX3ZtLktleXdvcmQuUHJpbnQgKyAiKCkiKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKF92bS5LZXl3b3JkLlByaW50KSldCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJxLWJ0biIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZsYXQ6ICIiLCBpZDogInN1Ym0iIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgX3ZtLkFkZCgi4KSH4KSo4KSq4KWB4KSfKCkiKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIuCkh+CkqOCkquClgeCknyIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicS1idG4iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogeyBmbGF0OiAiIiwgaWQ6ICJzdWJtIiB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgIF92bS5BZGQoX3ZtLktleXdvcmQuSWYgKyAiKCkiKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKF92bS5LZXl3b3JkLklmKSldCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJxLWJ0biIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZsYXQ6ICIiLCBpZDogInN1Ym0iIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5BZGQoIuCkpuClgeCkueCksOCkvuCkkyB4IOCkleCliyB5IOCkruClhyIpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigi4KSm4KWB4KS54KSw4KS+4KSTIildCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJxLWJ0biIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZsYXQ6ICIiLCBpZDogInN1Ym0iIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgX3ZtLkFkZChfdm0uS2V5d29yZC5XaGlsZSArICIoKSIpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MoX3ZtLktleXdvcmQuV2hpbGUpKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInEtYnRuIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgZmxhdDogIiIsIGlkOiAic3VibSIgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICBfdm0uQWRkKCIu4KS44KSC4KSW4KWN4KSv4KS+KCkiKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIi7gpLjgpILgpJbgpY3gpK/gpL4iKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInEtYnRuIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgZmxhdDogIiIsIGlkOiAic3VibSIgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICBfdm0uQWRkKCIu4KSq4KWB4KS2KCkiKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIi7gpKrgpYHgpLYiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInEtYnRuIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgZmxhdDogIiIsIGlkOiAic3VibSIgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLkFkZCgi4KSw4KSa4KSo4KS+IikKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCLgpLDgpJrgpKjgpL4iKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygiZGl2IiwgeyBhdHRyczogeyBpZDogIm91dHB1dCIgfSB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAiYmhhcmF0RElWIiB9IH0sIFsKICAgICAgICAgICAgICBfYygicCIsIHsgYXR0cnM6IHsgaWQ6ICJ2ZXJzaW9uIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiS2FsYWFtIC0gUnVuIFlvdXIgUHJvZ3JhbSBMaW5lIGJ5IExpbmUiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIHRoaXMuaXNFcnJvciA9PSBmYWxzZQogICAgICAgICAgICAgICAgPyBfYygicCIsIHsgYXR0cnM6IHsgaWQ6ICJDb2RlU3RhdHVzIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5UaW1lVGFrZW4pKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICB0aGlzLmlzRXJyb3IgPT0gdHJ1ZQogICAgICAgICAgICAgICAgPyBfYygicCIsIHsgYXR0cnM6IHsgaWQ6ICJDb2RlU3RhdHVzIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5UaW1lVGFrZW4pKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBhdHRyczogeyBpZDogInByaW50T3V0cHV0IiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBhdHRyczogeyBpZDogImxpbmVieWxpbmVPdXRwdXQiIH0gfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKHRoaXMuRXhlY3V0aW9uU3RhY2tMaW5lYnlMaW5lKSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgOiBfdm0uX2UoKSwKICAgIHRoaXMuJHN0b3JlLnN0YXRlLlByYWN0aXNlT24KICAgICAgPyBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIlByYWN0aXNlTW9kZSIsIGF0dHJzOiB7IGlkOiAiY29tcGlsZXIiIH0gfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IGF0dHJzOiB7IGlkOiAidGV4dGFyZWEiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgIm5vLXNzciIsCiAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IHBsYWNlaG9sZGVyOiAiLi4uIiB9IH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlbWlycm9yIiwgewogICAgICAgICAgICAgICAgICAgIHJlZjogIm15Q20iLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImxlZnQiIH0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGlkOiAiY29kZWFyZWEiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5jb2RlLAogICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6CiAgICAgICAgICAgICAgICAgICAgICAgICJXZWxjb21lIFRvIEthbGFhbSwgVGhpcyBpcyB5b3VyIENvZGUgRWRpdG9yLiIsCiAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBfdm0uY21PcHRpb25zCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgcmVhZHk6IF92bS5vbkNtUmVhZHksCiAgICAgICAgICAgICAgICAgICAgICBmb2N1czogX3ZtLm9uQ21Gb2N1cywKICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBfdm0ub25DbUNvZGVDaGFuZ2UKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJDb250cm9sUGFuZWwiIH0gfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoInEtYnRuIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZsYXQ6ICIiLCBpZDogIlJ1bmJ0biIsIGxhYmVsOiAiUnVuIiB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uUnVuKCkKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicS1idG4iLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgZmxhdDogIiIsIGlkOiAiQ2xlYXJidG4iLCBsYWJlbDogIkNsZWFyIiB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uQ2xlYXIoKQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJxLWJ0biIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgZmxhdDogIiIsIGlkOiAic3VibSIgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uQWRkKF92bS5LZXl3b3JkLlByaW50ICsgIigpIikKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MoX3ZtLktleXdvcmQuUHJpbnQpKV0KICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInEtYnRuIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBmbGF0OiAiIiwgaWQ6ICJzdWJtIiB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5BZGQoIuCkh+CkqOCkquClgeCknygpIikKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdigi4KSH4KSo4KSq4KWB4KSfIildCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJxLWJ0biIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgZmxhdDogIiIsIGlkOiAic3VibSIgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uQWRkKF92bS5LZXl3b3JkLklmICsgIigpIikKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MoX3ZtLktleXdvcmQuSWYpKV0KICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInEtYnRuIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBmbGF0OiAiIiwgaWQ6ICJzdWJtIiB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uQWRkKCLgpKbgpYHgpLngpLDgpL7gpJMgeCDgpJXgpYsgeSDgpK7gpYciKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCLgpKbgpYHgpLngpLDgpL7gpJMiKV0KICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInEtYnRuIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBmbGF0OiAiIiwgaWQ6ICJzdWJtIiB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5BZGQoX3ZtLktleXdvcmQuV2hpbGUgKyAiKCkiKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhfdm0uS2V5d29yZC5XaGlsZSkpXQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAicS1idG4iLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZsYXQ6ICIiLCBpZDogInN1Ym0iIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLkFkZCgiLuCkuOCkguCkluCljeCkr+CkvigpIikKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdigiLuCkuOCkguCkluCljeCkr+CkviIpXQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAicS1idG4iLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZsYXQ6ICIiLCBpZDogInN1Ym0iIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLkFkZCgiLuCkquClgeCktigpIikKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdigiLuCkquClgeCktiIpXQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAicS1idG4iLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZsYXQ6ICIiLCBpZDogInN1Ym0iIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5BZGQoIuCksOCkmuCkqOCkviIpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIuCksOCkmuCkqOCkviIpXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAib3V0cHV0IiB9IH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgYXR0cnM6IHsgaWQ6ICJiaGFyYXRESVYiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJwIiwgeyBhdHRyczogeyBpZDogInZlcnNpb24iIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJLYWxhYW0gLSBDb2RlIG91dHB1dCB3aWxsIGJlIHNob3duIGhlcmUiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIHRoaXMuaXNFcnJvciA9PSBmYWxzZQogICAgICAgICAgICAgICAgPyBfYygicCIsIHsgYXR0cnM6IHsgaWQ6ICJDb2RlU3RhdHVzIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5UaW1lVGFrZW4pKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICB0aGlzLmlzRXJyb3IgPT0gdHJ1ZQogICAgICAgICAgICAgICAgPyBfYygicCIsIHsgYXR0cnM6IHsgaWQ6ICJDb2RlU3RhdHVzIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5UaW1lVGFrZW4pKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgeyBhdHRyczogeyBpZDogInByaW50T3V0cHV0IiB9IH0sCiAgICAgICAgICAgICAgICBfdm0uX2wodGhpcy5saW5lYnlsaW5lT3V0cHV0LCBmdW5jdGlvbihvdXRwdXQsIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAga2V5OiBpbmRleCwKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJ3aGl0ZS1zcGFjZSI6ICJwcmUiIH0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImxpbmVieWxpbmVPdXRwdXQiIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiAiICsgX3ZtLl9zKG91dHB1dCkgKyAiICIpXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIDogX3ZtLl9lKCkKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}